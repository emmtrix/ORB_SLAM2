#include <typeinfo>
#include <cstddef>
#include <initializer_list>

#define std_type_info std::type_info

extern "C" {
    typedef unsigned long size_t;

    typedef long ptrdiff_t;

    typedef unsigned int wint_t;

}
extern "C++" {
    typedef decltype(nullptr) std_nullptr_t;

}
extern "C" {
    typedef char *va_list;

}
extern "C" {
     extern void *malloc(size_t size) ;

    extern int rand();

     extern void free(void *ptr) ;

    extern "C" {
        struct __locale_t;

        typedef struct __locale_t *locale_t;

    }
}
extern "C" {
    typedef int __int32_t;

    typedef unsigned int __uint32_t;

    typedef long __int64_t;

    typedef unsigned long __uint64_t;

}
typedef unsigned long __useconds_t;

extern "C" {
    typedef __int32_t int32_t;

    typedef __int64_t int64_t;

    typedef __uint64_t uint64_t;

}
typedef unsigned short ushort;

typedef __useconds_t useconds_t;

typedef __uint32_t pthread_t;

typedef __uint32_t pthread_mutex_t;

extern "C" {
    extern int vsnprintf(char *s, size_t n, const char *format, va_list arg);

     extern int snprintf(char *buffer, size_t bufsz, const char *format, ...) ;

     extern int vasprintf(char **__p1, const char *__p2, ...) ;

}
extern "C" {
    struct mbstate_t {
        int state;
    };

    struct tm;

}
class __attribute__((visibility("default")))  std___1_ios_base ;

struct std___1_char_traits;
struct std___1_char_traits_char_;
struct std___1_char_traits_char16_t_;
struct std___1_char_traits_char32_t_;
struct std___1_char_traits_wchar_t_;
class std___1_allocator;
struct std___1___non_trivial_if_true__std____1__allocator_char__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_char__() noexcept ;
};
class std___1_allocator_char_ : public std___1___non_trivial_if_true__std____1__allocator_char__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_char_() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(char *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
};
struct std___1_allocator_traits_std____1__allocator_char__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static char *allocate(std___1_allocator_char_ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_char_ &__a, char *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_char___void_(const std___1_allocator_char_ &__a) noexcept ;
};
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void *std___1___libcpp_allocate(size_t __size, size_t __align) ;

 __attribute__((returns_nonnull)) __attribute__((alloc_size(1))) __attribute__((visibility("default"))) void *operator new(size_t __sz) ;

 __attribute__((linkage("linkonce_odr"))) inline constexpr bool std___1___libcpp_is_constant_evaluated() noexcept ;

 [[noreturn]] __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1___throw_length_error(const char *__msg) ;

char *std___1_allocator_char_::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_char__::max_size_std____1__allocator_char___void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<char *>(operator new(__n * sizeof(char)));
    } else {
        return static_cast<char *>(std___1___libcpp_allocate(__n * sizeof(char), alignof(char)));
    }
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1___libcpp_deallocate(void *__ptr, size_t __size, size_t __align) ;

 __attribute__((visibility("default"))) void operator delete(void *__p) noexcept ;

void std___1_allocator_char_::deallocate(char *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(char), alignof(char));
    }
}
size_t std___1_allocator_char_::max_size() const noexcept {
    return (size_t)~0 / sizeof(char);
}
struct std___1___non_trivial_if_true__std____1__allocator_wchar_t__ {
};
class std___1_allocator_wchar_t_ : public std___1___non_trivial_if_true__std____1__allocator_wchar_t__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_char16_t__ {
};
class std___1_allocator_char16_t_ : public std___1___non_trivial_if_true__std____1__allocator_char16_t__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_char32_t__ {
};
class std___1_allocator_char32_t_ : public std___1___non_trivial_if_true__std____1__allocator_char32_t__ {
public:
};
struct std___1_allocator_std____1__pair_const_unsigned_int__double___rebind_std____1____value_type_unsigned_int__double__ {
};
struct std___1_allocator_std____1__pair_const_unsigned_int__double___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_unsigned_int__double___ {
};
class std___1_allocator_std____1__pair_const_unsigned_int__double__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_unsigned_int__double___ {
public:
};
struct std___1_allocator_std____1____value_type_unsigned_int__double___rebind_std____1____tree_node_std____1____value_type_unsigned_int__double___void____ {
};
struct std___1_allocator_std____1____value_type_unsigned_int__double___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_unsigned_int__double___ {
};
class std___1_allocator_std____1____value_type_unsigned_int__double__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_unsigned_int__double___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_unsigned_int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_unsigned_int__() noexcept ;
};
class std___1_allocator_unsigned_int_ : public std___1___non_trivial_if_true__std____1__allocator_unsigned_int__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(unsigned int *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_unsigned_int__unsigned_int_(unsigned int *__p, unsigned int &&__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_unsigned_int__const_unsigned_int___(unsigned int *__p, const unsigned int &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(unsigned int *__p) ;
};
struct std___1_allocator_traits_std____1__allocator_unsigned_int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static unsigned int *allocate(std___1_allocator_unsigned_int_ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_unsigned_int__unsigned_int__void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, unsigned int &&__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_unsigned_int__const_unsigned_int____void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, const unsigned int &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_unsigned_int__void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_unsigned_int___void_(const std___1_allocator_unsigned_int_ &__a) noexcept ;
};
unsigned int *std___1_allocator_unsigned_int_::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_unsigned_int__::max_size_std____1__allocator_unsigned_int___void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<unsigned int *>(operator new(__n * sizeof(unsigned int)));
    } else {
        return static_cast<unsigned int *>(std___1___libcpp_allocate(__n * sizeof(unsigned int), alignof(unsigned int)));
    }
}
void std___1_allocator_unsigned_int_::deallocate(unsigned int *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(unsigned int), alignof(unsigned int));
    }
}
size_t std___1_allocator_unsigned_int_::max_size() const noexcept {
    return (size_t)~0 / sizeof(unsigned int);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int &&std___1_forward_unsigned_int_(unsigned int &__t) noexcept ;

 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void *operator new(size_t __p1, void *__p) noexcept ;

void std___1_allocator_unsigned_int_::construct_unsigned_int__unsigned_int_(unsigned int *__p, unsigned int &&__args) {
    ::new ((void *)__p) unsigned int(std___1_forward_unsigned_int_(__args));
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const unsigned int &std___1_forward_const_unsigned_int___(const unsigned int &__t) noexcept ;

void std___1_allocator_unsigned_int_::construct_unsigned_int__const_unsigned_int___(unsigned int *__p, const unsigned int &__args) {
    ::new ((void *)__p) unsigned int(std___1_forward_const_unsigned_int___(__args));
}
void std___1_allocator_unsigned_int_::destroy(unsigned int *__p) {
    __p;
}
struct std___1_allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____rebind_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
struct std___1_allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____rebind_std____1____value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
struct std___1_allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____ {
};
class std___1_allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int___ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____ {
public:
};
struct std___1_allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____rebind_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1_allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____ {
};
class std___1_allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int___ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__KeyPoint__ {
};
class cv_KeyPoint;
class std___1_allocator_cv__KeyPoint_ : public std___1___non_trivial_if_true__std____1__allocator_cv__KeyPoint__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(cv_KeyPoint *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(cv_KeyPoint *__p) ;
};
class cv_Point__float_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__float_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__float_(cv_Point__float_ &&pt) noexcept ;
    float x;
    float y;
};
typedef cv_Point__float_ cv_Point2f;

class cv_KeyPoint {
public:
    cv_Point2f pt;
    float size;
    float angle;
    float response;
    int octave;
    int class_id;
};

void std___1_allocator_cv__KeyPoint_::deallocate(cv_KeyPoint *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(cv_KeyPoint), alignof(cv_KeyPoint));
    }
}
void std___1_allocator_cv__KeyPoint_::destroy(cv_KeyPoint *__p) {
    __p->~cv_KeyPoint();
}
struct std___1___non_trivial_if_true__std____1__allocator_cv__Point__float___ {
};
class std___1_allocator_cv__Point__float__ : public std___1___non_trivial_if_true__std____1__allocator_cv__Point__float___ {
public:
};
struct std___1_allocator_int__rebind_std____1____tree_node_int__void____ {
};
struct std___1_allocator_int__rebind;
struct std___1___non_trivial_if_true__std____1__allocator_int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_int__() noexcept ;
};
class std___1_allocator_int_ : public std___1___non_trivial_if_true__std____1__allocator_int__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(int *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_int_(int *__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_int__const_int___(int *__p, const int &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(int *__p) ;
};
struct std___1_allocator_traits_std____1__allocator_int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static int *allocate(std___1_allocator_int_ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_int_ &__a, int *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_int__void_(std___1_allocator_int_ &__a, int *__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_int__const_int____void_(std___1_allocator_int_ &__a, int *__p, const int &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_int__void_(std___1_allocator_int_ &__a, int *__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_int___void_(const std___1_allocator_int_ &__a) noexcept ;
};
int *std___1_allocator_int_::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_int__::max_size_std____1__allocator_int___void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<int *>(operator new(__n * sizeof(int)));
    } else {
        return static_cast<int *>(std___1___libcpp_allocate(__n * sizeof(int), alignof(int)));
    }
}
void std___1_allocator_int_::deallocate(int *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(int), alignof(int));
    }
}
size_t std___1_allocator_int_::max_size() const noexcept {
    return (size_t)~0 / sizeof(int);
}
void std___1_allocator_int_::construct_int_(int *__p) {
    ::new ((void *)__p) int();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const int &std___1_forward_const_int___(const int &__t) noexcept ;

void std___1_allocator_int_::construct_int__const_int___(int *__p, const int &__args) {
    ::new ((void *)__p) int(std___1_forward_const_int___(__args));
}
void std___1_allocator_int_::destroy(int *__p) {
    __p;
}
struct std___1_allocator_cv__Mat__rebind_std____1____list_node_cv__Mat__void____ {
};
struct std___1_allocator_cv__Mat__rebind;
struct std___1___non_trivial_if_true__std____1__allocator_cv__Mat__ {
};
class cv_Mat;
class std___1_allocator_cv__Mat_ : public std___1___non_trivial_if_true__std____1__allocator_cv__Mat__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(cv_Mat *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(cv_Mat *__p) ;
};
struct cv_MatStep {
    size_t *p;
    size_t buf[2];
};

struct cv_MatSize {
    int *p;
};

class cv_Size__int_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Size__int_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Size__int_(const cv_Size__int_ &sz) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Size__int_(cv_Size__int_ &&sz) noexcept ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Size__int_ &operator=(const cv_Size__int_ &sz) ;
    int width;
    int height;
};
struct cv_UMatData;
class cv_MatAllocator;
typedef unsigned char uchar;

class cv__InputArray;
typedef const cv__InputArray &cv_InputArray;

class std___1_vector_int__std____1__allocator_int__;
class cv_Scalar__double_;
typedef cv_Scalar__double_ cv_Scalar;

class cv__OutputArray;
typedef const cv__OutputArray &cv_OutputArray;

class cv_MatExpr;
class cv_Range;
typedef cv_Size__int_ cv_Size2i;

typedef cv_Size2i cv_Size;

class cv_Mat {
public:
    cv_Mat();
    cv_Mat(int rows, int cols, int type);
    cv_Mat(cv_Size size, int type);
    cv_Mat(const cv_Mat &m);
    cv_Mat(const cv_Mat &m, const cv_Range &rowRange, const cv_Range &colRange);
    ~cv_Mat() noexcept;
    cv_Mat &operator=(const cv_Mat &m);
    cv_Mat &operator=(const cv_MatExpr &expr);
    cv_Mat row(int y) const;
    cv_Mat col(int x) const;
    cv_Mat rowRange(int startrow, int endrow) const;
    cv_Mat colRange(int startcol, int endcol) const;
    void copyTo(cv_OutputArray m) const;
    void convertTo(cv_OutputArray m, int rtype, double alpha, double beta) const;
    cv_Mat &operator=(const cv_Scalar &s);
    cv_Mat reshape(int cn, int rows) const;
    cv_Mat reshape(int cn, int newndims, const int *newsz) const;
    cv_Mat reshape(int cn, const std___1_vector_int__std____1__allocator_int__ &newshape) const;
    cv_MatExpr t() const;
    cv_MatExpr inv(int method) const;
    double dot(cv_InputArray m) const;
    static cv_MatExpr zeros(int rows, int cols, int type);
    static cv_MatExpr eye(int rows, int cols, int type);
    void release();
    bool isContinuous() const;
    size_t elemSize() const;
    int type() const;
    int depth() const;
    int channels() const;
    bool empty() const;
    size_t total() const;
    const uchar *ptr(int i0) const;
     __attribute__((linkage("linkonce_odr"))) inline float &at_float_(int i0) ;
     __attribute__((linkage("linkonce_odr"))) inline const float &at_float_(int i0) const ;
     __attribute__((linkage("linkonce_odr"))) inline float &at_float_(int i0, int i1) ;
    cv_Mat(cv_Mat &&m);
    cv_Mat &operator=(cv_Mat &&m);
    enum __unnamed30 {
        MAGIC_VAL = 1124007936,
        AUTO_STEP = 0,
        CONTINUOUS_FLAG = (1 << 14),
        SUBMATRIX_FLAG = (1 << 15)
    };
    int flags;
    int dims;
    int rows;
    int cols;
    uchar *data;
    const uchar *datastart;
    const uchar *dataend;
    const uchar *datalimit;
    cv_MatAllocator *allocator;
    cv_UMatData *u;
    cv_MatSize size;
    cv_MatStep step;
};

void std___1_allocator_cv__Mat_::deallocate(cv_Mat *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(cv_Mat), alignof(cv_Mat));
    }
}
void std___1_allocator_cv__Mat_::destroy(cv_Mat *__p) {
    __p->~cv_Mat();
}
struct std___1_allocator_bool__rebind_std____1____list_node_bool__void____ {
};
struct std___1_allocator_bool__rebind_unsigned_long_ {
};
struct std___1_allocator_bool__rebind;
struct std___1___non_trivial_if_true__std____1__allocator_bool__ {
};
class std___1_allocator_bool_ : public std___1___non_trivial_if_true__std____1__allocator_bool__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__UMat__ {
};
class cv_UMat;
class std___1_allocator_cv__UMat_ : public std___1___non_trivial_if_true__std____1__allocator_cv__UMat__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(cv_UMat *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(cv_UMat *__p) ;
};
enum cv_UMatUsageFlags {
    USAGE_DEFAULT = 0,
    USAGE_ALLOCATE_HOST_MEMORY = 1 << 0,
    USAGE_ALLOCATE_DEVICE_MEMORY = 1 << 1,
    USAGE_ALLOCATE_SHARED_MEMORY = 1 << 2,
    __UMAT_USAGE_FLAGS_32BIT = 2147483647
};

class cv_UMat {
public:
    cv_UMat(cv_UMatUsageFlags usageFlags);
    ~cv_UMat() noexcept;
    int flags;
    int dims;
    int rows;
    int cols;
    cv_MatAllocator *allocator;
    cv_UMatUsageFlags usageFlags;
    cv_UMatData *u;
    size_t offset;
    cv_MatSize size;
    cv_MatStep step;
};

void std___1_allocator_cv__UMat_::deallocate(cv_UMat *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(cv_UMat), alignof(cv_UMat));
    }
}
void std___1_allocator_cv__UMat_::destroy(cv_UMat *__p) {
    __p->~cv_UMat();
}
struct std___1___non_trivial_if_true__std____1__allocator_unsigned_char__ {
};
class std___1_allocator_unsigned_char_ : public std___1___non_trivial_if_true__std____1__allocator_unsigned_char__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_unsigned_long__ {
};
class std___1_allocator_unsigned_long_ : public std___1___non_trivial_if_true__std____1__allocator_unsigned_long__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(unsigned long *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(unsigned long *__p) ;
};
void std___1_allocator_unsigned_long_::deallocate(unsigned long *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(unsigned long), alignof(unsigned long));
    }
}
void std___1_allocator_unsigned_long_::destroy(unsigned long *__p) {
    __p;
}
struct std___1___non_trivial_if_true__std____1__allocator_cv__DMatch__ {
};
class std___1_allocator_cv__DMatch_ : public std___1___non_trivial_if_true__std____1__allocator_cv__DMatch__ {
public:
};
struct std___1_allocator_double__rebind_std____1____list_node_double__void____ {
};
struct std___1_allocator_double__rebind;
struct std___1___non_trivial_if_true__std____1__allocator_double__ {
};
class std___1_allocator_double_ : public std___1___non_trivial_if_true__std____1__allocator_double__ {
public:
};
class std___1_allocator_const_DBoW2__FClass__TDescriptor___;
class std___1_allocator_DBoW2__FClass__TDescriptor_;
class std___1_allocator_const_cv__Mat___;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_int___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_int___() noexcept ;
};
class std___1_vector_unsigned_int__std____1__allocator_unsigned_int__;
class std___1_allocator_std____1__vector_unsigned_int__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_int__() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) ;
};
struct std___1_integral_constant_bool__true_ {
    static constexpr bool value __attribute__((linkage("linkonce_odr")))  = true;
};
struct std___1___default_init_tag {
};

struct std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_ : public std___1_allocator_unsigned_int_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_unsigned_int_ &__get() const noexcept ;
};
struct std___1___compressed_pair_elem_unsigned_int____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_unsigned_int____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *const &__get() const noexcept ;
    unsigned int *__value_;
};
class std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__ : public std___1___compressed_pair_elem_unsigned_int____0__false_, public std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &second() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_unsigned_int_ &second() const noexcept ;
};
class __attribute__((visibility("default")))  std___1___vector_base_common_true_  {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___vector_base_common_true_() ;
     __attribute__((linkage("available_externally"))) void __throw_length_error() const ;
};
class std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__ : public std___1___vector_base_common_true_ {
public:
    unsigned int *__begin_;
    unsigned int *__end_;
    std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_unsigned_int_ &__alloc() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(unsigned int *__new_last) noexcept ;
     [[noreturn]] __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __throw_length_error() const ;
};
struct std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____;
class std___1___wrap_iter_unsigned_int___;
class  std___1_vector_unsigned_int__std____1__allocator_unsigned_int__  : public std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_int__std____1__allocator_unsigned_int__() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_int__std____1__allocator_unsigned_int__(size_t __n, const unsigned int &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_unsigned_int__std____1__allocator_unsigned_int__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_unsigned_int___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_unsigned_int___ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool empty() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline unsigned int &operator[](size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const unsigned int &operator[](size_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int &back() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const unsigned int *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void push_back(const unsigned int &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void push_back(unsigned int &&__x) ;
     __attribute__((linkage("linkonce_odr"))) inline void pop_back() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __invalidate_all_iterators() ;
     __attribute__((linkage("linkonce_odr"))) void __vallocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline size_t __recommend(size_t __new_size) const ;
     __attribute__((linkage("linkonce_odr"))) inline void __construct_at_end(size_t __n, const unsigned int &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_unsigned_int___ __make_iter(unsigned int *__p) noexcept ;
     __attribute__((linkage("linkonce_odr"))) void __swap_out_circular_buffer(std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____ &__v) ;
     __attribute__((linkage("linkonce_odr"))) inline void __push_back_slow_path_unsigned_int_(unsigned int &&__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_new(size_t __current_size) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __construct_one_at_end_unsigned_int_(unsigned int &&__args) ;
};
void std___1_allocator_std____1__vector_unsigned_int__::deallocate(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__), alignof(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__));
    }
}
void std___1_allocator_std____1__vector_unsigned_int__::destroy(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) {
    __p->~std___1_vector_unsigned_int__std____1__allocator_unsigned_int__();
}
class std___1_allocator_cv__flann__FlannIndexType_;
class std___1_allocator_std____1__vector_cv__KeyPoint__;
struct std___1___non_trivial_if_true__std____1__allocator_float__ {
};
class std___1_allocator_float_ : public std___1___non_trivial_if_true__std____1__allocator_float__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(float *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(float *__p) ;
};
void std___1_allocator_float_::deallocate(float *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(float), alignof(float));
    }
}
void std___1_allocator_float_::destroy(float *__p) {
    __p;
}
struct std___1___non_trivial_if_true__std____1__allocator_cv__Point__int___ {
};
class cv_Point__int_;
class std___1_allocator_cv__Point__int__ : public std___1___non_trivial_if_true__std____1__allocator_cv__Point__int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(cv_Point__int_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(cv_Point__int_ *__p) ;
};
class cv_Point__int_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__int_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__int_(int _x, int _y) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__int_(cv_Point__int_ &&pt) noexcept ;
    int x;
    int y;
};
void std___1_allocator_cv__Point__int__::deallocate(cv_Point__int_ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(cv_Point__int_), alignof(cv_Point__int_));
    }
}
void std___1_allocator_cv__Point__int__::destroy(cv_Point__int_ *__p) {
    __p->~cv_Point__int_();
}
struct std___1___non_trivial_if_true__std____1__allocator_cv__Rect__int___ {
};
class std___1_allocator_cv__Rect__int__ : public std___1___non_trivial_if_true__std____1__allocator_cv__Rect__int___ {
public:
};
class std___1_allocator_std____1__vector_cv__DMatch__;
class std___1_allocator_std____1__vector_unsigned_char__;
class std___1_allocator_std____1__vector_int__;
struct std___1_allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___rebind_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ {
};
struct std___1_allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
};
class std___1_allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
public:
};
struct std___1_allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___rebind_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ {
};
struct std___1_allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
};
class std___1_allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____ {
public:
};
class std___1_allocator_std____1__pair_cv__dnn__dnn4_v20201117__Backend__cv__dnn__dnn4_v20201117__Target__;
class std___1_allocator_cv__dnn__dnn4_v20201117__Target_;
class std___1_allocator_cv__Mat___;
class std___1_allocator_cv__Ptr_cv__dnn__dnn4_v20201117__BackendWrapper__;
class std___1_allocator_cv__Ptr_cv__dnn__dnn4_v20201117__BackendNode__;
class std___1_allocator_cv__Ptr_cv__dnn__dnn4_v20201117__Layer__;
class std___1_allocator_std____1__vector_cv__Mat__;
class std___1_allocator_std____1__vector_std____1__vector_int___;
class std___1_allocator_cv__Rect__double__;
class std___1_allocator_cv__RotatedRect_;
struct std___1_allocator_std____1__pair_const_std____1__string__cvflann__any___rebind_std____1____value_type_std____1__string__cvflann__any__ {
};
struct std___1_allocator_std____1__pair_const_std____1__string__cvflann__any___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__cvflann__any___ {
};
class std___1_allocator_std____1__pair_const_std____1__string__cvflann__any__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__cvflann__any___ {
public:
};
struct std___1_allocator_std____1____value_type_std____1__string__cvflann__any___rebind_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ {
};
struct std___1_allocator_std____1____value_type_std____1__string__cvflann__any___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__cvflann__any___ {
};
class std___1_allocator_std____1____value_type_std____1__string__cvflann__any__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__cvflann__any___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____ {
public:
};
struct std___1_allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____rebind_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1_allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____ {
};
class std___1_allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____ {
public:
};
struct std___1_allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____rebind_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________ {
};
struct std___1_allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____ {
};
class std___1_allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ {
};
class std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ {
public:
};
class std___1_allocator_cv__VideoCapture_;
class std___1_allocator_cv__Vec_float__4__;
class std___1_allocator_cv__Vec_float__6__;
class std___1_allocator_std____1__vector_cv__Point__float___;
class std___1_allocator_cv__Point__double__;
class std___1_allocator_cv__ml__DTrees__Node_;
class std___1_allocator_cv__ml__DTrees__Split_;
class std___1_allocator_cv__DetectionROI_;
class std___1_allocator_std____1__pair_cv__Rect__int___int__;
class std___1_allocator_cv__DetectionBasedTracker__ExtObject_;
struct std___1___non_trivial_if_true__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ {
};
class std___1_allocator_cv__DetectionBasedTracker__TrackedObject_ : public std___1___non_trivial_if_true__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__detail__ImageFeatures__ {
};
class std___1_allocator_cv__detail__ImageFeatures_ : public std___1___non_trivial_if_true__std____1__allocator_cv__detail__ImageFeatures__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__detail__MatchesInfo__ {
};
class std___1_allocator_cv__detail__MatchesInfo_ : public std___1___non_trivial_if_true__std____1__allocator_cv__detail__MatchesInfo__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__Size__int___ {
};
class std___1_allocator_cv__Size__int__ : public std___1___non_trivial_if_true__std____1__allocator_cv__Size__int___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_cv__detail__CameraParams__ {
};
class std___1_allocator_cv__detail__CameraParams_ : public std___1___non_trivial_if_true__std____1__allocator_cv__detail__CameraParams__ {
public:
};
struct std___1_allocator_std____1__pair_int__int___rebind_std____1____tree_node_std____1__pair_int__int___void____ {
};
struct std___1_allocator_std____1__pair_int__int___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_int__int___ {
};
struct std___1_pair_int__int_;
class std___1_allocator_std____1__pair_int__int__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_int__int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1_pair_int__int_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(std___1_pair_int__int_ *__p) ;
};
struct std___1_pair_int__int_ {
    int first;
    int second;
};
void std___1_allocator_std____1__pair_int__int__::deallocate(std___1_pair_int__int_ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1_pair_int__int_), alignof(std___1_pair_int__int_));
    }
}
void std___1_allocator_std____1__pair_int__int__::destroy(std___1_pair_int__int_ *__p) {
    __p->~std___1_pair_int__int_();
}
class std___1_allocator_std____1__pair_cv__UMat__unsigned_char__;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1__pair_int__int___void_____ {
};
class std___1_allocator_std____1____tree_node_std____1__pair_int__int___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1__pair_int__int___void_____ {
public:
};
struct std___1_allocator_ORB_SLAM2__ExtractorNode__rebind_std____1____list_node_ORB_SLAM2__ExtractorNode__void____ {
};
struct std___1_allocator_ORB_SLAM2__ExtractorNode__rebind;
struct std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__ExtractorNode__ {
};
class std___1_allocator_ORB_SLAM2__ExtractorNode_ : public std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__ExtractorNode__ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____ {
};
class std___1_allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____ {
public:
};
struct std___1_allocator_ORB_SLAM2__MapPoint____rebind_std____1____list_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1_allocator_ORB_SLAM2__MapPoint____rebind_std____1____tree_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1_allocator_ORB_SLAM2__MapPoint____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__MapPoint____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__MapPoint____() noexcept ;
};
class ORB_SLAM2_MapPoint;
class std___1_allocator_ORB_SLAM2__MapPoint___ : public std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__MapPoint____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(ORB_SLAM2_MapPoint **__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(ORB_SLAM2_MapPoint **__p) ;
};
struct std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static ORB_SLAM2_MapPoint **allocate(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_ORB_SLAM2__MapPoint____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_ORB_SLAM2__MapPoint_____void_(const std___1_allocator_ORB_SLAM2__MapPoint___ &__a) noexcept ;
};
ORB_SLAM2_MapPoint **std___1_allocator_ORB_SLAM2__MapPoint___::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::max_size_std____1__allocator_ORB_SLAM2__MapPoint_____void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<ORB_SLAM2_MapPoint **>(operator new(__n * sizeof(ORB_SLAM2_MapPoint *)));
    } else {
        return static_cast<ORB_SLAM2_MapPoint **>(std___1___libcpp_allocate(__n * sizeof(ORB_SLAM2_MapPoint *), alignof(ORB_SLAM2_MapPoint *)));
    }
}
void std___1_allocator_ORB_SLAM2__MapPoint___::deallocate(ORB_SLAM2_MapPoint **__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(ORB_SLAM2_MapPoint *), alignof(ORB_SLAM2_MapPoint *));
    }
}
size_t std___1_allocator_ORB_SLAM2__MapPoint___::max_size() const noexcept {
    return (size_t)~0 / sizeof(ORB_SLAM2_MapPoint *);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_MapPoint *const &std___1_forward_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__t) noexcept ;

void std___1_allocator_ORB_SLAM2__MapPoint___::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) {
    ::new ((void *)__p) ORB_SLAM2_MapPoint *(std___1_forward_ORB_SLAM2__MapPoint__const___(__args));
}
void std___1_allocator_ORB_SLAM2__MapPoint___::destroy(ORB_SLAM2_MapPoint **__p) {
    __p;
}
struct std___1_allocator_ORB_SLAM2__KeyFrame____rebind_std____1____list_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1_allocator_ORB_SLAM2__KeyFrame____rebind_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1_allocator_ORB_SLAM2__KeyFrame____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__KeyFrame____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept ;
};
class ORB_SLAM2_KeyFrame;
class std___1_allocator_ORB_SLAM2__KeyFrame___ : public std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__KeyFrame____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(ORB_SLAM2_KeyFrame **__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(ORB_SLAM2_KeyFrame **__p) ;
};
struct std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static ORB_SLAM2_KeyFrame **allocate(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_ORB_SLAM2__KeyFrame____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_ORB_SLAM2__KeyFrame_____void_(const std___1_allocator_ORB_SLAM2__KeyFrame___ &__a) noexcept ;
};
ORB_SLAM2_KeyFrame **std___1_allocator_ORB_SLAM2__KeyFrame___::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::max_size_std____1__allocator_ORB_SLAM2__KeyFrame_____void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<ORB_SLAM2_KeyFrame **>(operator new(__n * sizeof(ORB_SLAM2_KeyFrame *)));
    } else {
        return static_cast<ORB_SLAM2_KeyFrame **>(std___1___libcpp_allocate(__n * sizeof(ORB_SLAM2_KeyFrame *), alignof(ORB_SLAM2_KeyFrame *)));
    }
}
void std___1_allocator_ORB_SLAM2__KeyFrame___::deallocate(ORB_SLAM2_KeyFrame **__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(ORB_SLAM2_KeyFrame *), alignof(ORB_SLAM2_KeyFrame *));
    }
}
size_t std___1_allocator_ORB_SLAM2__KeyFrame___::max_size() const noexcept {
    return (size_t)~0 / sizeof(ORB_SLAM2_KeyFrame *);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_KeyFrame *const &std___1_forward_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__t) noexcept ;

void std___1_allocator_ORB_SLAM2__KeyFrame___::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) {
    ::new ((void *)__p) ORB_SLAM2_KeyFrame *(std___1_forward_ORB_SLAM2__KeyFrame__const___(__args));
}
void std___1_allocator_ORB_SLAM2__KeyFrame___::destroy(ORB_SLAM2_KeyFrame **__p) {
    __p;
}
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void_____ {
};
class std___1_allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____ {
};
class std___1___tree_node_ORB_SLAM2__KeyFrame____void___;
class std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept ;
};
class std___1___tree_node_base_void___;
class std___1___tree_end_node_std____1____tree_node_base_void______ {
public:
    std___1___tree_node_base_void___ *__left_;
};
class __attribute__((standalone_debug))  std___1___tree_node_base_void___  : public std___1___tree_end_node_std____1____tree_node_base_void______ {
public:
    std___1___tree_node_base_void___ *__right_;
    std___1___tree_end_node_std____1____tree_node_base_void______ *__parent_;
    bool __is_black_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_base_void___ *__parent_unsafe() const ;
};
class __attribute__((standalone_debug))  std___1___tree_node_ORB_SLAM2__KeyFrame____void___  : public std___1___tree_node_base_void___ {
public:
    ORB_SLAM2_KeyFrame *__value_;
};
void std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____::deallocate(std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___tree_node_ORB_SLAM2__KeyFrame____void___), alignof(std___1___tree_node_ORB_SLAM2__KeyFrame____void___));
    }
}
struct std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___rebind_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ {
};
struct std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ {
};
class std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ {
public:
};
struct std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___rebind_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ {
};
struct std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ {
};
class std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ {
};
class std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___;
class std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__p, size_t __n) noexcept ;
};
struct std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ {
    ORB_SLAM2_KeyFrame *const first;
    unsigned long second;
};
struct __attribute__((standalone_debug))  std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_  {
    std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ __cc;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__get_value() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__get_value() const ;
};
class __attribute__((standalone_debug))  std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___  : public std___1___tree_node_base_void___ {
public:
    std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ __value_;
};
void std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____::deallocate(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___), alignof(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___));
    }
}
struct std___1___non_trivial_if_true__std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ {
};
class std___1_allocator_std____1__list_ORB_SLAM2__KeyFrame____ : public std___1___non_trivial_if_true__std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_long___ {
};
class std___1_vector_unsigned_long__std____1__allocator_unsigned_long__;
class std___1_allocator_std____1__vector_unsigned_long__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_long___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) ;
};
struct std___1___compressed_pair_elem_std____1__allocator_unsigned_long___1__true_ : public std___1_allocator_unsigned_long_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_long_ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_unsigned_long____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long *const &__get() const noexcept ;
    unsigned long *__value_;
};
class std___1___compressed_pair_unsigned_long____std____1__allocator_unsigned_long__ : public std___1___compressed_pair_elem_unsigned_long____0__false_, public std___1___compressed_pair_elem_std____1__allocator_unsigned_long___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_long_ &second() noexcept ;
};
class std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__ : public std___1___vector_base_common_true_ {
public:
    unsigned long *__begin_;
    unsigned long *__end_;
    std___1___compressed_pair_unsigned_long____std____1__allocator_unsigned_long__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_long_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(unsigned long *__new_last) noexcept ;
};
class  std___1_vector_unsigned_long__std____1__allocator_unsigned_long__  : public std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_unsigned_long__std____1__allocator_unsigned_long__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const unsigned long *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
void std___1_allocator_std____1__vector_unsigned_long__::deallocate(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__), alignof(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__));
    }
}
void std___1_allocator_std____1__vector_unsigned_long__::destroy(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) {
    __p->~std___1_vector_unsigned_long__std____1__allocator_unsigned_long__();
}
struct std___1___non_trivial_if_true__std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ {
};
class std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___;
class std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ : public std___1___non_trivial_if_true__std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) ;
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_long____1__true_ : public std___1_allocator_std____1__vector_unsigned_long__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_long__ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__vector_unsigned_long_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &__get() const noexcept ;
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__value_;
};
class std___1___compressed_pair_std____1__vector_unsigned_long_____std____1__allocator_std____1__vector_unsigned_long___ : public std___1___compressed_pair_elem_std____1__vector_unsigned_long_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_long____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_long__ &second() noexcept ;
};
class std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ : public std___1___vector_base_common_true_ {
public:
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__begin_;
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__end_;
    std___1___compressed_pair_std____1__vector_unsigned_long_____std____1__allocator_std____1__vector_unsigned_long___ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_long__ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__new_last) noexcept ;
};
class  std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___  : public std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
void std___1_allocator_std____1__vector_std____1__vector_unsigned_long___::deallocate(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___), alignof(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___));
    }
}
void std___1_allocator_std____1__vector_std____1__vector_unsigned_long___::destroy(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) {
    __p->~std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___();
}
struct std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___rebind_std____1____value_type_ORB_SLAM2__KeyFrame____int__ {
};
struct std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___ {
};
class std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___ {
public:
};
struct std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___rebind_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ {
};
struct std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___ {
};
class std___1_allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____ {
};
class std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___;
class std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__p, size_t __n) noexcept ;
};
struct std___1_pair_ORB_SLAM2__KeyFrame__const__int_ {
    ORB_SLAM2_KeyFrame *const first;
    int second;
};
struct __attribute__((standalone_debug))  std___1___value_type_ORB_SLAM2__KeyFrame____int_  {
    std___1_pair_ORB_SLAM2__KeyFrame__const__int_ __cc;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_ORB_SLAM2__KeyFrame__const__int_ &__get_value() ;
};
class __attribute__((standalone_debug))  std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___  : public std___1___tree_node_base_void___ {
public:
    std___1___value_type_ORB_SLAM2__KeyFrame____int_ __value_;
};
void std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____::deallocate(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___), alignof(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___));
    }
}
struct std___1___non_trivial_if_true__std____1__allocator_cv__Point3__float___ {
};
class std___1_allocator_cv__Point3__float__ : public std___1___non_trivial_if_true__std____1__allocator_cv__Point3__float___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_cv__Mat__void_____ {
};
class std___1_allocator_std____1____list_node_cv__Mat__void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_cv__Mat__void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____() noexcept ;
};
struct std___1___list_node_ORB_SLAM2__KeyFrame____void___;
class std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) ;
};
struct std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ {
    std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__prev_;
    std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__next_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__KeyFrame____void___() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__self() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__as_node() ;
};
struct __attribute__((standalone_debug))  std___1___list_node_ORB_SLAM2__KeyFrame____void___  : public std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ {
    ORB_SLAM2_KeyFrame *__value_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__as_link() ;
};
struct std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_ORB_SLAM2__KeyFrame____void___ *allocate(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_ORB_SLAM2__KeyFrame____void__void_(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__p1, ORB_SLAM2_KeyFrame **__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______void_(const std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a) noexcept ;
};
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<std___1___list_node_ORB_SLAM2__KeyFrame____void___ *>(operator new(__n * sizeof(std___1___list_node_ORB_SLAM2__KeyFrame____void___)));
    } else {
        return static_cast<std___1___list_node_ORB_SLAM2__KeyFrame____void___ *>(std___1___libcpp_allocate(__n * sizeof(std___1___list_node_ORB_SLAM2__KeyFrame____void___), alignof(std___1___list_node_ORB_SLAM2__KeyFrame____void___)));
    }
}
void std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____::deallocate(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___list_node_ORB_SLAM2__KeyFrame____void___), alignof(std___1___list_node_ORB_SLAM2__KeyFrame____void___));
    }
}
size_t std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____::max_size() const noexcept {
    return (size_t)~0 / sizeof(std___1___list_node_ORB_SLAM2__KeyFrame____void___);
}
void std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) {
    ::new ((void *)__p) ORB_SLAM2_KeyFrame *(std___1_forward_ORB_SLAM2__KeyFrame__const___(__args));
}
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_double__void_____ {
};
class std___1_allocator_std____1____list_node_double__void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_double__void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_bool__void_____ {
};
class std___1_allocator_std____1____list_node_bool__void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_bool__void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____() noexcept ;
};
struct std___1___list_node_ORB_SLAM2__MapPoint____void___;
class std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *allocate(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) ;
};
struct std___1___list_node_base_ORB_SLAM2__MapPoint____void___ {
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__prev_;
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__next_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__MapPoint____void___() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__self() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *__as_node() ;
};
struct __attribute__((standalone_debug))  std___1___list_node_ORB_SLAM2__MapPoint____void___  : public std___1___list_node_base_ORB_SLAM2__MapPoint____void___ {
    ORB_SLAM2_MapPoint *__value_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__as_link() ;
};
struct std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_ORB_SLAM2__MapPoint____void___ *allocate(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_ORB_SLAM2__MapPoint____void__void_(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__p1, ORB_SLAM2_MapPoint **__p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______void_(const std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a) noexcept ;
};
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____::allocate(size_t __n) {
    if (__n > std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______void_(*this)) {
        std___1___throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    if (std___1___libcpp_is_constant_evaluated()) {
        return static_cast<std___1___list_node_ORB_SLAM2__MapPoint____void___ *>(operator new(__n * sizeof(std___1___list_node_ORB_SLAM2__MapPoint____void___)));
    } else {
        return static_cast<std___1___list_node_ORB_SLAM2__MapPoint____void___ *>(std___1___libcpp_allocate(__n * sizeof(std___1___list_node_ORB_SLAM2__MapPoint____void___), alignof(std___1___list_node_ORB_SLAM2__MapPoint____void___)));
    }
}
void std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____::deallocate(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___list_node_ORB_SLAM2__MapPoint____void___), alignof(std___1___list_node_ORB_SLAM2__MapPoint____void___));
    }
}
size_t std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____::max_size() const noexcept {
    return (size_t)~0 / sizeof(std___1___list_node_ORB_SLAM2__MapPoint____void___);
}
void std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) {
    ::new ((void *)__p) ORB_SLAM2_MapPoint *(std___1_forward_ORB_SLAM2__MapPoint__const___(__args));
}
struct std___1_allocator_g2o__HyperGraph__Edge____rebind_std____1____tree_node_g2o__HyperGraph__Edge____void____ {
};
struct std___1_allocator_g2o__HyperGraph__Edge____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_g2o__HyperGraph__Edge____ {
};
class std___1_allocator_g2o__HyperGraph__Edge___ : public std___1___non_trivial_if_true__std____1__allocator_g2o__HyperGraph__Edge____ {
public:
};
struct std___1_allocator_g2o__HyperGraph__Vertex____rebind_std____1____tree_node_g2o__HyperGraph__Vertex____void____ {
};
struct std___1_allocator_g2o__HyperGraph__Vertex____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_g2o__HyperGraph__Vertex____ {
};
class std___1_allocator_g2o__HyperGraph__Vertex___ : public std___1___non_trivial_if_true__std____1__allocator_g2o__HyperGraph__Vertex____ {
public:
};
struct std___1_allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____rebind_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____ {
};
struct std___1_allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____ {
};
class std___1_allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex____ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____ {
};
class std___1___tree_node_g2o__HyperGraph__Edge____void___;
class std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___tree_node_g2o__HyperGraph__Edge____void___ *__p, size_t __n) noexcept ;
};
class g2o_HyperGraph_Edge;
class __attribute__((standalone_debug))  std___1___tree_node_g2o__HyperGraph__Edge____void___  : public std___1___tree_node_base_void___ {
public:
    g2o_HyperGraph_Edge *__value_;
};
void std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____::deallocate(std___1___tree_node_g2o__HyperGraph__Edge____void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___tree_node_g2o__HyperGraph__Edge____void___), alignof(std___1___tree_node_g2o__HyperGraph__Edge____void___));
    }
}
struct std___1_allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____rebind_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ {
};
struct std___1_allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____ {
};
class std___1_allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____ {
public:
};
struct std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____rebind_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ {
};
struct std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____ {
};
struct std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___;
class std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__p, size_t __n) noexcept ;
};
class g2o_HyperGraph_Vertex;
struct std___1_pair_const_int__g2o__HyperGraph__Vertex___ {
    const int first;
    g2o_HyperGraph_Vertex *second;
};
struct __attribute__((standalone_debug))  std___1___hash_value_type_int__g2o__HyperGraph__Vertex___  {
    std___1_pair_const_int__g2o__HyperGraph__Vertex___ __cc;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_const_int__g2o__HyperGraph__Vertex___ &__get_value() ;
};
struct std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ {
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *__next_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__upcast() noexcept ;
};
struct __attribute__((standalone_debug))  std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___  : public std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ {
    size_t __hash_;
    std___1___hash_value_type_int__g2o__HyperGraph__Vertex___ __value_;
};
void std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____::deallocate(std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___), alignof(std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___));
    }
}
struct std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ {
};
class std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ : public std___1___non_trivial_if_true__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p, size_t __n) noexcept ;
};
void std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________::deallocate(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *), alignof(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *));
    }
}
class std___1_allocator_g2o__Parameter___;
struct std___1_allocator_std____1__pair_const_int__g2o__Parameter_____rebind_std____1____value_type_int__g2o__Parameter____ {
};
struct std___1_allocator_std____1__pair_const_int__g2o__Parameter_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_int__g2o__Parameter_____ {
};
class std___1_allocator_std____1__pair_const_int__g2o__Parameter____ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_int__g2o__Parameter_____ {
public:
};
struct std___1_allocator_std____1____value_type_int__g2o__Parameter_____rebind_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ {
};
struct std___1_allocator_std____1____value_type_int__g2o__Parameter_____rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_int__g2o__Parameter_____ {
};
class std___1_allocator_std____1____value_type_int__g2o__Parameter____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_int__g2o__Parameter_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____ {
public:
};
struct std___1_allocator_std____1__pair_const_std____1__string__std____1__string___rebind_std____1____value_type_std____1__string__std____1__string__ {
};
struct std___1_allocator_std____1__pair_const_std____1__string__std____1__string___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__std____1__string___ {
};
class std___1_allocator_std____1__pair_const_std____1__string__std____1__string__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_const_std____1__string__std____1__string___ {
public:
};
class std___1_allocator_g2o__HyperGraphAction___;
class std___1_allocator_g2o__OptimizableGraph__Vertex___;
class std___1_allocator_g2o__OptimizableGraph__Edge___;
struct std___1_allocator_std____1____value_type_std____1__string__std____1__string___rebind_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ {
};
struct std___1_allocator_std____1____value_type_std____1__string__std____1__string___rebind;
struct std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__std____1__string___ {
};
class std___1_allocator_std____1____value_type_std____1__string__std____1__string__ : public std___1___non_trivial_if_true__std____1__allocator_std____1____value_type_std____1__string__std____1__string___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____ {
};
class std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_int__void_____ {
};
class std___1_allocator_std____1____tree_node_int__void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_int__void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void_____ {
};
class std___1_allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void____ : public std___1___non_trivial_if_true__std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void_____ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ {
};
class std___1_allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ {
public:
};
struct std___1___non_trivial_if_true__std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___non_trivial_if_true__std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept ;
};
struct std___1_pair_unsigned_long__unsigned_long_;
class std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ : public std___1___non_trivial_if_true__std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_unsigned_long__unsigned_long__() noexcept  = default;     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void deallocate(std___1_pair_unsigned_long__unsigned_long_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void destroy(std___1_pair_unsigned_long__unsigned_long_ *__p) ;
};
struct std___1_pair_unsigned_long__unsigned_long_ {
    unsigned long first;
    unsigned long second;
};
void std___1_allocator_std____1__pair_unsigned_long__unsigned_long__::deallocate(std___1_pair_unsigned_long__unsigned_long_ *__p, size_t __n) noexcept {
    if (std___1___libcpp_is_constant_evaluated()) {
        operator delete(__p);
    } else {
        std___1___libcpp_deallocate((void *)__p, __n * sizeof(std___1_pair_unsigned_long__unsigned_long_), alignof(std___1_pair_unsigned_long__unsigned_long_));
    }
}
void std___1_allocator_std____1__pair_unsigned_long__unsigned_long__::destroy(std___1_pair_unsigned_long__unsigned_long_ *__p) {
    __p->~std___1_pair_unsigned_long__unsigned_long_();
}
class std___1_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__std____1__set_ORB_SLAM2__KeyFrame_____;
class std___1_basic_ios;
class std___1_basic_streambuf;
class std___1_basic_istream;
class std___1_basic_ostream;
class std___1_basic_stringbuf;
typedef long std___1_streamoff;

class std___1_fpos_mbstate_t_ {
public:
    mbstate_t __st_;
    std___1_streamoff __off_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_fpos_mbstate_t_(std___1_streamoff __off) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) operator std___1_streamoff() const ;
};
class std___1_locale;
typedef ptrdiff_t std___1_streamsize;

class __attribute__((visibility("default")))  std___1_ios_base  {
public:
    static const unsigned int boolalpha __attribute__((linkage("available_externally")))  = 1;
    static const unsigned int dec __attribute__((linkage("available_externally")))  = 2;
    static const unsigned int hex __attribute__((linkage("available_externally")))  = 8;
    static const unsigned int internal __attribute__((linkage("available_externally")))  = 16;
    static const unsigned int left __attribute__((linkage("available_externally")))  = 32;
    static const unsigned int oct __attribute__((linkage("available_externally")))  = 64;
    static const unsigned int right __attribute__((linkage("available_externally")))  = 128;
    static const unsigned int unitbuf __attribute__((linkage("available_externally")))  = 8192;
    static const unsigned int adjustfield __attribute__((linkage("available_externally")))  = left | right | internal;
    static const unsigned int basefield __attribute__((linkage("available_externally")))  = dec | oct | hex;
    static const unsigned int badbit __attribute__((linkage("available_externally")))  = 1;
    static const unsigned int failbit __attribute__((linkage("available_externally")))  = 4;
    static const unsigned int goodbit __attribute__((linkage("available_externally")))  = 0;
    static const unsigned int in __attribute__((linkage("available_externally")))  = 8;
    static const unsigned int out __attribute__((linkage("available_externally")))  = 16;
    enum seekdir {
        beg,
        cur,
        end
    };
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) unsigned int flags() const ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) unsigned int flags(unsigned int __fmtfl) ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) std___1_streamsize precision() const ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) std___1_streamsize width() const ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) std___1_streamsize width(std___1_streamsize __wide) ;
    std___1_locale getloc() const;
    virtual ~std___1_ios_base() noexcept;
    enum event {
        erase_event,
        imbue_event,
        copyfmt_event
    };
    void clear(unsigned int __state);
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) void setstate(unsigned int __state) ;
    void __set_badbit_and_consider_rethrow();
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void *rdbuf() const ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void rdbuf(void *__sb) ;
    unsigned int __fmtflags_;
    std___1_streamsize __precision_;
    std___1_streamsize __width_;
    unsigned int __rdstate_;
    unsigned int __exceptions_;
    void *__rdbuf_;
    void *__loc_;
    void (**__fn_)(std___1_ios_base::event, std___1_ios_base &, int);
    int *__index_;
    size_t __event_size_;
    size_t __event_cap_;
    long *__iarray_;
    size_t __iarray_size_;
    size_t __iarray_cap_;
    void **__parray_;
    size_t __parray_size_;
    size_t __parray_cap_;
};

struct std___1___compressed_pair_elem_std____1__allocator_char___1__true_ : public std___1_allocator_char_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_char___1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_char_ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_char_ &__get() const noexcept ;
};
struct std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____raw {
    size_t __words[3];
};
union std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____short_std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____unnamed2 {
    unsigned char __size_;
    char __lx;
};
struct std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____short {
    union std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____short_std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____unnamed2 __unnamed2;
    char __data_[23];
};
struct std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____long {
    size_t __cap_;
    size_t __size_;
    char *__data_;
};
union std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep_std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____unnamed4 {
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____long __l;
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____short __s;
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____raw __r;
};
struct std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep {
    union std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep_std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____unnamed4 __unnamed4;
};
struct std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &__get() const noexcept ;
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep __value_;
};
class std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ : public std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_, public std___1___compressed_pair_elem_std____1__allocator_char___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__(std___1___default_init_tag &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_char_ &second() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_char_ &second() const noexcept ;
};
union std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____ulx {
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____long __lx;
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____short __lxx;
};
class __attribute__((visibility("default")))  std___1___basic_string_common_true_  {
public:
     __attribute__((linkage("available_externally"))) void __throw_length_error() const ;
};
class  std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__  : public std___1___basic_string_common_true_ {
public:
    static const size_t __short_mask __attribute__((linkage("available_externally")))  = 1;
    static const size_t __long_mask __attribute__((linkage("available_externally")))  = 1UL;
    enum __unnamed1 {
        __min_cap = (sizeof(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____long) - 1) / sizeof(char) > 2 ? (sizeof(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____long) - 1) / sizeof(char) : 2
    };
    enum __unnamed3 {
        __n_words = sizeof(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____ulx) / sizeof(size_t)
    };
    std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ __r_;
     __attribute__((exclude_from_explicit_instantiation)) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((visibility("default"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__str) ;
     __attribute__((exclude_from_explicit_instantiation)) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &&__str) noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(const char *__s) ;
     __attribute__((exclude_from_explicit_instantiation)) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(size_t __n, char __c) ;
     __attribute__((visibility("default"))) inline ~std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__() noexcept ;
     __attribute__((visibility("default"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &operator=(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__str) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((visibility("default"))) __attribute__((linkage("available_externally"))) void resize(size_t __n, char __c) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void resize(size_t __n) ;
     __attribute__((visibility("default"))) __attribute__((linkage("available_externally"))) void push_back(char __c) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *c_str() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __is_long() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_char_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_char_ &__alloc() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __set_short_size(size_t __s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t __get_short_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __set_long_size(size_t __s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t __get_long_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __set_long_cap(size_t __s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t __get_long_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __set_long_pointer(char *__p) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *__get_long_pointer() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *__get_long_pointer() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *__get_short_pointer() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *__get_short_pointer() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *__get_pointer() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __zero() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t __align_it_16UL_(size_t __s) noexcept ;
    enum __unnamed5 {
        __alignment = 16
    };
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static size_t __recommend(size_t __s) noexcept ;
     __attribute__((visibility("default"))) inline void __init(const char *__s, size_t __sz) ;
     __attribute__((visibility("default"))) inline void __init(size_t __n, char __c) ;
     [[noreturn]] __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __throw_length_error() const ;
};
class std___1_locale_id;
class std___1_locale_facet;
class std___1_locale___imp;
class __attribute__((visibility("default")))  std___1_locale  {
public:
    std___1_locale(const std___1_locale &__p1) noexcept;
    ~std___1_locale() noexcept;
    std___1_locale___imp *__locale_;
    const std___1_locale_facet *use_facet(std___1_locale_id &__p1) const;
};

typedef std___1_fpos_mbstate_t_ std___1_streampos;

class __attribute__((visibility("default")))  std___1_basic_streambuf_char__std____1__char_traits_char__  {
public:
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_streambuf_char__std____1__char_traits_char__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline int sputc(char __c) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_streamsize sputn(const char *__s, std___1_streamsize __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *eback() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *gptr() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *egptr() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void setg(char *__gbeg, char *__gnext, char *__gend) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *pbase() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *pptr() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char *epptr() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void pbump(int __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __pbump(std___1_streamsize __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void setp(char *__pbeg, char *__pend) ;
     __attribute__((linkage("available_externally"))) virtual void imbue(const std___1_locale &__loc) ;
     __attribute__((linkage("available_externally"))) virtual std___1_basic_streambuf_char__std____1__char_traits_char__ *setbuf(char *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streampos seekoff(std___1_streamoff __off, std___1_ios_base::seekdir __way, unsigned int __which) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streampos seekpos(std___1_streampos __sp, unsigned int __which) ;
     __attribute__((linkage("available_externally"))) virtual int sync() ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize showmanyc() ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize xsgetn(char *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual int underflow() ;
     __attribute__((linkage("available_externally"))) virtual int uflow() ;
     __attribute__((linkage("available_externally"))) virtual int pbackfail(int __c) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize xsputn(const char *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual int overflow(int __c) ;
    std___1_locale __loc_;
    char *__binp_;
    char *__ninp_;
    char *__einp_;
    char *__bout_;
    char *__nout_;
    char *__eout_;
};
class std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__ : public std___1_basic_streambuf_char__std____1__char_traits_char__ {
public:
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ __str_;
    mutable char *__hm_;
    unsigned int __mode_;
     __attribute__((linkage("linkonce_odr"))) virtual int underflow() ;
     __attribute__((linkage("linkonce_odr"))) virtual int pbackfail(int __c) ;
     __attribute__((linkage("linkonce_odr"))) virtual int overflow(int __c) ;
     __attribute__((linkage("linkonce_odr"))) virtual std___1_streampos seekoff(std___1_streamoff __off, std___1_ios_base::seekdir __way, unsigned int __wch) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) virtual std___1_streampos seekpos(std___1_streampos __sp, unsigned int __wch) ;
};
struct __attribute__((type_visibility("default")))  std___1_char_traits_char_1  {
     __attribute__((linkage("linkonce_odr"))) static inline void assign(char &__c1, const char &__c2) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr bool eq(char __c1, char __c2) noexcept ;
    static int compare(const char *__s1, const char *__s2, size_t __n) noexcept;
     __attribute__((linkage("linkonce_odr"))) static inline size_t length(const char *__s) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline char *copy(char *__s1, const char *__s2, size_t __n) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline char *assign(char *__s, size_t __n, char __a) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr int not_eof(int __c) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr char to_char_type(int __c) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr int to_int_type(char __c) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr bool eq_int_type(int __c1, int __c2) noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline constexpr int eof() noexcept ;
};
int std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__::underflow() {
    if (this->__hm_ < this->pptr()) {
        this->__hm_ = this->pptr();
    }
    if (this->__mode_ & std___1_ios_base::in) {
        if (this->egptr() < this->__hm_) {
            this->setg(this->eback(), this->gptr(), this->__hm_);
        }
        if (this->gptr() < this->egptr()) {
            return std___1_char_traits_char_1::to_int_type(*this->gptr());
        }
    }
    return std___1_char_traits_char_1::eof();
}
int std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__::pbackfail(int __c) {
    if (this->__hm_ < this->pptr()) {
        this->__hm_ = this->pptr();
    }
    if (this->eback() < this->gptr()) {
        if (std___1_char_traits_char_1::eq_int_type(__c, std___1_char_traits_char_1::eof())) {
            this->setg(this->eback(), this->gptr() - 1, this->__hm_);
            return std___1_char_traits_char_1::not_eof(__c);
        }
        if ((this->__mode_ & std___1_ios_base::out) || std___1_char_traits_char_1::eq(std___1_char_traits_char_1::to_char_type(__c), this->gptr()[-1])) {
            this->setg(this->eback(), this->gptr() - 1, this->__hm_);
            *this->gptr() = std___1_char_traits_char_1::to_char_type(__c);
            return __c;
        }
    }
    return std___1_char_traits_char_1::eof();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *const &std___1_max_char___(char *const &__a, char *const &__b) ;

int std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__::overflow(int __c) {
    if (!std___1_char_traits_char_1::eq_int_type(__c, std___1_char_traits_char_1::eof())) {
        ptrdiff_t __ninp = this->gptr() - this->eback();
        if (this->pptr() == this->epptr()) {
            if (!(this->__mode_ & std___1_ios_base::out)) {
                return std___1_char_traits_char_1::eof();
            }
            try {
                ptrdiff_t __nout = this->pptr() - this->pbase();
                ptrdiff_t __hm = this->__hm_ - this->pbase();
                this->__str_.push_back(char());
                this->__str_.resize(this->__str_.capacity());
                char *__p = const_cast<char *>(this->__str_.data());
                this->setp(__p, __p + this->__str_.size());
                this->__pbump(__nout);
                this->__hm_ = this->pbase() + __hm;
            } catch (...) {
                return std___1_char_traits_char_1::eof();
            }
        }
        this->__hm_ = std___1_max_char___(this->pptr() + 1, this->__hm_);
        if (this->__mode_ & std___1_ios_base::in) {
            char *__p = const_cast<char *>(this->__str_.data());
            this->setg(__p, __p + __ninp, this->__hm_);
        }
        return this->sputc(std___1_char_traits_char_1::to_char_type(__c));
    }
    return std___1_char_traits_char_1::not_eof(__c);
}
std___1_streampos std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__::seekoff(std___1_streamoff __off, std___1_ios_base::seekdir __way, unsigned int __wch) {
    if (this->__hm_ < this->pptr()) {
        this->__hm_ = this->pptr();
    }
    if ((__wch & (std___1_ios_base::in | std___1_ios_base::out)) == 0) {
        return std___1_streampos(-1);
    }
    if ((__wch & (std___1_ios_base::in | std___1_ios_base::out)) == (std___1_ios_base::in | std___1_ios_base::out) && __way == std___1_ios_base::seekdir::cur) {
        return std___1_streampos(-1);
    }
    const ptrdiff_t __hm = this->__hm_ == nullptr ? 0 : this->__hm_ - this->__str_.data();
    std___1_streamoff __noff;
    switch (__way) {
      case std___1_ios_base::seekdir::beg:
        __noff = 0;
        break;
      case std___1_ios_base::seekdir::cur:
        if (__wch & std___1_ios_base::in) {
            __noff = this->gptr() - this->eback();
        } else {
            __noff = this->pptr() - this->pbase();
        }
        break;
      case std___1_ios_base::seekdir::end:
        __noff = __hm;
        break;
      default:
        return std___1_streampos(-1);
    }
    __noff += __off;
    if (__noff < 0 || __hm < __noff) {
        return std___1_streampos(-1);
    }
    if (__noff != 0) {
        if ((__wch & std___1_ios_base::in) && this->gptr() == nullptr) {
            return std___1_streampos(-1);
        }
        if ((__wch & std___1_ios_base::out) && this->pptr() == nullptr) {
            return std___1_streampos(-1);
        }
    }
    if (__wch & std___1_ios_base::in) {
        this->setg(this->eback(), this->eback() + __noff, this->__hm_);
    }
    if (__wch & std___1_ios_base::out) {
        this->setp(this->pbase(), this->epptr());
        this->pbump(__noff);
    }
    return std___1_streampos(__noff);
}
std___1_streampos std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__::seekpos(std___1_streampos __sp, unsigned int __wch) {
    return this->seekoff(__sp, std___1_ios_base::seekdir::beg, __wch);
}
class std___1_basic_stringbuf_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__;
class std___1_basic_ostringstream;
class std___1_basic_ostream_char__std____1__char_traits_char__;
class __attribute__((visibility("default")))  std___1_basic_ios_char__std____1__char_traits_char__  : public std___1_ios_base {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void setstate(unsigned int __state) ;
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_ios_char__std____1__char_traits_char__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_streambuf_char__std____1__char_traits_char__ *rdbuf() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char fill() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char widen(char __c) const ;
    std___1_basic_ostream_char__std____1__char_traits_char__ *__tie_;
    mutable int __fill_;
};
class __attribute__((visibility("default")))  std___1_basic_ostream_char__std____1__char_traits_char__  : virtual public std___1_basic_ios_char__std____1__char_traits_char__ {
public:
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_ostream_char__std____1__char_traits_char__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_ostream_char__std____1__char_traits_char__ &operator<<(std___1_basic_ostream_char__std____1__char_traits_char__ &(*__pf)(std___1_basic_ostream_char__std____1__char_traits_char__ &)) ;
     __attribute__((linkage("available_externally"))) std___1_basic_ostream_char__std____1__char_traits_char__ &operator<<(bool __n) ;
     __attribute__((linkage("available_externally"))) std___1_basic_ostream_char__std____1__char_traits_char__ &operator<<(int __n) ;
     __attribute__((linkage("available_externally"))) std___1_basic_ostream_char__std____1__char_traits_char__ &operator<<(float __f) ;
     __attribute__((linkage("available_externally"))) std___1_basic_ostream_char__std____1__char_traits_char__ &put(char __c) ;
     __attribute__((linkage("available_externally"))) std___1_basic_ostream_char__std____1__char_traits_char__ &flush() ;
};
class std___1_basic_ostringstream_char__std____1__char_traits_char___std____1__allocator_char__ : public std___1_basic_ostream_char__std____1__char_traits_char__ {
public:
    std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__ __sb_;
};
class std___1_basic_ostringstream_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__;
class std___1_istreambuf_iterator;
class std___1_istreambuf_iterator_char__std____1__char_traits_char__;
class std___1_istreambuf_iterator_wchar_t__std____1__char_traits_wchar_t__;
class std___1_ostreambuf_iterator;
struct std___1_iterator_std____1__output_iterator_tag__void__void__void__void_ {
};
class std___1_ostreambuf_iterator_char__std____1__char_traits_char__ : public std___1_iterator_std____1__output_iterator_tag__void__void__void__void_ {
public:
    std___1_basic_streambuf_char__std____1__char_traits_char__ *__sbuf_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_ostreambuf_iterator_char__std____1__char_traits_char__(std___1_basic_ostream_char__std____1__char_traits_char__ &__s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool failed() const noexcept ;
};
std___1_ostreambuf_iterator_char__std____1__char_traits_char__::std___1_ostreambuf_iterator_char__std____1__char_traits_char__(std___1_basic_ostream_char__std____1__char_traits_char__ &__s) noexcept : __sbuf_(__s.rdbuf()) {
}
bool std___1_ostreambuf_iterator_char__std____1__char_traits_char__::failed() const noexcept {
    return this->__sbuf_ == nullptr;
}
class std___1_ostreambuf_iterator_wchar_t__std____1__char_traits_wchar_t__;
typedef std___1_basic_ios_char__std____1__char_traits_char__ std___1_ios;

class std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__;
typedef std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__ std___1_wios;

typedef std___1_basic_streambuf_char__std____1__char_traits_char__ std___1_streambuf;

class std___1_basic_istream_char__std____1__char_traits_char__;
typedef std___1_basic_istream_char__std____1__char_traits_char__ std___1_istream;

typedef std___1_basic_ostream_char__std____1__char_traits_char__ std___1_ostream;

typedef std___1_basic_stringbuf_char__std____1__char_traits_char___std____1__allocator_char__ std___1_stringbuf;

typedef std___1_basic_ostringstream_char__std____1__char_traits_char___std____1__allocator_char__ std___1_ostringstream;

class std___1_basic_streambuf_wchar_t__std____1__char_traits_wchar_t__;
typedef std___1_basic_streambuf_wchar_t__std____1__char_traits_wchar_t__ std___1_wstreambuf;

class std___1_basic_istream_wchar_t__std____1__char_traits_wchar_t__;
typedef std___1_basic_istream_wchar_t__std____1__char_traits_wchar_t__ std___1_wistream;

class std___1_basic_ostream_wchar_t__std____1__char_traits_wchar_t__;
typedef std___1_basic_ostream_wchar_t__std____1__char_traits_wchar_t__ std___1_wostream;

typedef std___1_basic_stringbuf_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ std___1_wstringbuf;

typedef std___1_basic_ostringstream_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ std___1_wostringstream;

class std___1_basic_ios1;
class std___1_basic_streambuf1;
class std___1_basic_istream1;
class std___1_basic_ostream1;
class std___1_basic_stringbuf1;
class std___1_basic_ostringstream1;
class std___1_fpos;
std___1_fpos_mbstate_t_::std___1_fpos_mbstate_t_(std___1_streamoff __off) : __st_(), __off_(__off) {
}
std___1_fpos_mbstate_t_::operator std___1_streamoff() const {
    return this->__off_;
}
class std___1_basic_string;
inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__() noexcept(std___1_integral_constant_bool__true_::value) : __r_(std___1___default_init_tag(), std___1___default_init_tag()) {
    this->__zero();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ &&std___1_move_std____1____compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char_____(std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ &__t) noexcept ;

inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &&__str) noexcept(std___1_integral_constant_bool__true_::value) : __r_(std___1_move_std____1____compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char_____(__str.__r_)) {
    __str.__zero();
}
std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(const char *__s) : __r_(std___1___default_init_tag(), std___1___default_init_tag()) {
    ((void)0);
    this->__init(__s, std___1_char_traits_char_1::length(__s));
}
inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(size_t __n, char __c) : __r_(std___1___default_init_tag(), std___1___default_init_tag()) {
    this->__init(__n, __c);
}
inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::~std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__() noexcept {
    if (this->__is_long()) {
        std___1_allocator_traits_std____1__allocator_char__::deallocate(this->__alloc(), this->__get_long_pointer(), this->__get_long_cap());
    }
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::size() const noexcept {
    return this->__is_long() ? this->__get_long_size() : this->__get_short_size();
}
inline size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::max_size() const noexcept {
    size_t __m = std___1_allocator_traits_std____1__allocator_char__::max_size_std____1__allocator_char___void_(this->__alloc());
    return __m - __alignment;
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::capacity() const noexcept {
    return (this->__is_long() ? this->__get_long_cap() : static_cast<size_t>(__min_cap)) - 1;
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::resize(size_t __n) {
    this->resize(__n, char());
}
const char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::c_str() const noexcept {
    return this->data();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr const char *std___1___to_address_const_char_(const char *__p) noexcept ;

const char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::data() const noexcept {
    return std___1___to_address_const_char_(this->__get_pointer());
}
bool std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__is_long() const noexcept {
    return (bool(this->__r_.first().__unnamed4.__s.__unnamed2.__size_ & __short_mask));
}
std___1_allocator_char_ &std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__alloc() noexcept {
    return this->__r_.second();
}
const std___1_allocator_char_ &std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__alloc() const noexcept {
    return this->__r_.second();
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__set_short_size(size_t __s) noexcept {
    this->__r_.first().__unnamed4.__s.__unnamed2.__size_ = (unsigned char)(__s << 1);
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_short_size() const noexcept {
    return this->__r_.first().__unnamed4.__s.__unnamed2.__size_ >> 1;
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__set_long_size(size_t __s) noexcept {
    this->__r_.first().__unnamed4.__l.__size_ = __s;
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_long_size() const noexcept {
    return this->__r_.first().__unnamed4.__l.__size_;
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__set_long_cap(size_t __s) noexcept {
    this->__r_.first().__unnamed4.__l.__cap_ = __long_mask | __s;
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_long_cap() const noexcept {
    return this->__r_.first().__unnamed4.__l.__cap_ & (size_t)~__long_mask;
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__set_long_pointer(char *__p) noexcept {
    this->__r_.first().__unnamed4.__l.__data_ = __p;
}
char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_long_pointer() noexcept {
    return this->__r_.first().__unnamed4.__l.__data_;
}
const char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_long_pointer() const noexcept {
    return this->__r_.first().__unnamed4.__l.__data_;
}
struct std___1_pointer_traits_char___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static char *pointer_to(char &__r) noexcept ;
};
char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_short_pointer() noexcept {
    return std___1_pointer_traits_char___::pointer_to(this->__r_.first().__unnamed4.__s.__data_[0]);
}
struct std___1_pointer_traits_const_char___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static const char *pointer_to(const char &__r) noexcept ;
};
const char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_short_pointer() const noexcept {
    return std___1_pointer_traits_const_char___::pointer_to(this->__r_.first().__unnamed4.__s.__data_[0]);
}
const char *std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__get_pointer() const noexcept {
    return this->__is_long() ? this->__get_long_pointer() : this->__get_short_pointer();
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__zero() noexcept {
    size_t (&__a)[3] = this->__r_.first().__unnamed4.__r.__words;
    for (unsigned int __i = 0; __i < __n_words; ++__i) {
        __a[__i] = 0;
    }
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__align_it_16UL_(size_t __s) noexcept {
    return (__s + (16UL - 1)) & ~(16UL - 1);
}
size_t std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__recommend(size_t __s) noexcept {
    if (__s < __min_cap) {
        return static_cast<size_t>(__min_cap) - 1;
    }
    size_t __guess = __align_it_16UL_(__s + 1) - 1;
    if (__guess == __min_cap) {
        ++__guess;
    }
    return __guess;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr char *std___1___to_address_char_(char *__p) noexcept ;

inline void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__init(const char *__s, size_t __sz) {
    if (__sz > this->max_size()) {
        this->__throw_length_error();
    }
    char *__p;
    if (__sz < __min_cap) {
        this->__set_short_size(__sz);
        __p = this->__get_short_pointer();
    } else {
        size_t __cap = __recommend(__sz);
        __p = std___1_allocator_traits_std____1__allocator_char__::allocate(this->__alloc(), __cap + 1);
        this->__set_long_pointer(__p);
        this->__set_long_cap(__cap + 1);
        this->__set_long_size(__sz);
    }
    std___1_char_traits_char_1::copy(std___1___to_address_char_(__p), __s, __sz);
    std___1_char_traits_char_1::assign(__p[__sz], char());
}
inline void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__init(size_t __n, char __c) {
    if (__n > this->max_size()) {
        this->__throw_length_error();
    }
    char *__p;
    if (__n < __min_cap) {
        this->__set_short_size(__n);
        __p = this->__get_short_pointer();
    } else {
        size_t __cap = __recommend(__n);
        __p = std___1_allocator_traits_std____1__allocator_char__::allocate(this->__alloc(), __cap + 1);
        this->__set_long_pointer(__p);
        this->__set_long_cap(__cap + 1);
        this->__set_long_size(__n);
    }
    std___1_char_traits_char_1::assign(std___1___to_address_char_(__p), __n, __c);
    std___1_char_traits_char_1::assign(__p[__n], char());
}
void std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__::__throw_length_error() const {
    this->std___1___basic_string_common_true_::__throw_length_error();
}
struct std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____raw {
    size_t __words[3];
};
union std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____short_std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____unnamed7 {
    unsigned char __size_;
    wchar_t __lx;
};
struct std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____short {
    union std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____short_std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____unnamed7 __unnamed7;
    wchar_t __data_[5];
};
struct std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____long {
    size_t __cap_;
    size_t __size_;
    wchar_t *__data_;
};
union std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____rep_std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____unnamed9 {
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____long __l;
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____short __s;
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____raw __r;
};
struct std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____rep {
    union std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____rep_std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____unnamed9 __unnamed9;
};
union std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____ulx {
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____long __lx;
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____short __lxx;
};
struct std___1___compressed_pair_elem_std____1__allocator_wchar_t___1__true_ : public std___1_allocator_wchar_t_ {
};
struct std___1___compressed_pair_elem_std____1__basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t______rep__0__false_ {
    std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____rep __value_;
};
class std___1___compressed_pair_std____1__basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t______rep__std____1__allocator_wchar_t__ : public std___1___compressed_pair_elem_std____1__basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t______rep__0__false_, public std___1___compressed_pair_elem_std____1__allocator_wchar_t___1__true_ {
public:
};
class  std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__  : public std___1___basic_string_common_true_ {
public:
    enum __unnamed6 {
        __min_cap = (sizeof(std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____long) - 1) / sizeof(wchar_t) > 2 ? (sizeof(std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____long) - 1) / sizeof(wchar_t) : 2
    };
    enum __unnamed8 {
        __n_words = sizeof(std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t_____ulx) / sizeof(size_t)
    };
    std___1___compressed_pair_std____1__basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t______rep__std____1__allocator_wchar_t__ __r_;
};
struct std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____raw {
    size_t __words[3];
};
union std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____short_std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____unnamed11 {
    unsigned char __size_;
    char16_t __lx;
};
struct std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____short {
    union std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____short_std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____unnamed11 __unnamed11;
    char16_t __data_[11];
};
struct std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____long {
    size_t __cap_;
    size_t __size_;
    char16_t *__data_;
};
union std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____rep_std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____unnamed13 {
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____long __l;
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____short __s;
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____raw __r;
};
struct std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____rep {
    union std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____rep_std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____unnamed13 __unnamed13;
};
union std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____ulx {
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____long __lx;
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____short __lxx;
};
struct std___1___compressed_pair_elem_std____1__allocator_char16_t___1__true_ : public std___1_allocator_char16_t_ {
};
struct std___1___compressed_pair_elem_std____1__basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t______rep__0__false_ {
    std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____rep __value_;
};
class std___1___compressed_pair_std____1__basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t______rep__std____1__allocator_char16_t__ : public std___1___compressed_pair_elem_std____1__basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t______rep__0__false_, public std___1___compressed_pair_elem_std____1__allocator_char16_t___1__true_ {
public:
};
class  std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__  : public std___1___basic_string_common_true_ {
public:
    enum __unnamed10 {
        __min_cap = (sizeof(std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____long) - 1) / sizeof(char16_t) > 2 ? (sizeof(std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____long) - 1) / sizeof(char16_t) : 2
    };
    enum __unnamed12 {
        __n_words = sizeof(std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t_____ulx) / sizeof(size_t)
    };
    std___1___compressed_pair_std____1__basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t______rep__std____1__allocator_char16_t__ __r_;
};
struct std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____raw {
    size_t __words[3];
};
union std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____short_std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____unnamed15 {
    unsigned char __size_;
    char32_t __lx;
};
struct std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____short {
    union std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____short_std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____unnamed15 __unnamed15;
    char32_t __data_[5];
};
struct std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____long {
    size_t __cap_;
    size_t __size_;
    char32_t *__data_;
};
union std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____rep_std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____unnamed17 {
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____long __l;
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____short __s;
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____raw __r;
};
struct std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____rep {
    union std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____rep_std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____unnamed17 __unnamed17;
};
union std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____ulx {
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____long __lx;
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____short __lxx;
};
struct std___1___compressed_pair_elem_std____1__allocator_char32_t___1__true_ : public std___1_allocator_char32_t_ {
};
struct std___1___compressed_pair_elem_std____1__basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t______rep__0__false_ {
    std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____rep __value_;
};
class std___1___compressed_pair_std____1__basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t______rep__std____1__allocator_char32_t__ : public std___1___compressed_pair_elem_std____1__basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t______rep__0__false_, public std___1___compressed_pair_elem_std____1__allocator_char32_t___1__true_ {
public:
};
class  std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__  : public std___1___basic_string_common_true_ {
public:
    enum __unnamed14 {
        __min_cap = (sizeof(std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____long) - 1) / sizeof(char32_t) > 2 ? (sizeof(std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____long) - 1) / sizeof(char32_t) : 2
    };
    enum __unnamed16 {
        __n_words = sizeof(std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t_____ulx) / sizeof(size_t)
    };
    std___1___compressed_pair_std____1__basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t______rep__std____1__allocator_char32_t__ __r_;
};
typedef std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ std___1_string;

typedef std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ std___1_wstring;

class std___1_basic_string1;
class std___1_vector;
struct std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction {
     __attribute__((linkage("linkonce_odr"))) explicit std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ &__v, size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction() noexcept ;
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ &__v_;
    unsigned int *__pos_;
    const unsigned int *const __new_end_;
};
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::std___1_vector_unsigned_int__std____1__allocator_unsigned_int__() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::std___1_vector_unsigned_int__std____1__allocator_unsigned_int__(size_t __n, const unsigned int &__x) {
    if (__n > 0) {
        this->__vallocate(__n);
        this->__construct_at_end(__n, __x);
    }
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::~std___1_vector_unsigned_int__std____1__allocator_unsigned_int__() noexcept {
    this->__annotate_delete();
}
class  std___1___wrap_iter_unsigned_int___  {
public:
    unsigned int *__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_unsigned_int___ operator+(ptrdiff_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_unsigned_int___ &operator+=(ptrdiff_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr unsigned int *base() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_unsigned_int___(unsigned int *__x) noexcept ;
};
inline std___1___wrap_iter_unsigned_int___ std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::begin() noexcept {
    return this->__make_iter(this->__begin_);
}
inline std___1___wrap_iter_unsigned_int___ std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::end() noexcept {
    return this->__make_iter(this->__end_);
}
size_t std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::capacity() const noexcept {
    return this->std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::capacity();
}
struct std___1___libcpp_compute_min_long__63__true_ {
    static constexpr long value __attribute__((linkage("available_externally")))  = (long(long(1) << 63));
};
class std___1___libcpp_numeric_limits_long__true_ {
public:
    static constexpr bool is_signed __attribute__((linkage("available_externally")))  = long(-1) < long(0);
    static constexpr int digits __attribute__((linkage("available_externally")))  = static_cast<int>(sizeof(long) * 8 - is_signed);
    static constexpr long __min __attribute__((linkage("available_externally")))  = std___1___libcpp_compute_min_long__63__true_::value;
    static constexpr long __max __attribute__((linkage("available_externally")))  = is_signed ? long(long(~0) ^ __min) : long(~0);
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr long max() noexcept ;
};
class std___1_numeric_limits_long_ : public std___1___libcpp_numeric_limits_long__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr long max() noexcept ;
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const unsigned long &std___1_min_unsigned_long_(const unsigned long &__a, const unsigned long &__b) ;

size_t std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::max_size() const noexcept {
    return std___1_min_unsigned_long_(std___1_allocator_traits_std____1__allocator_unsigned_int__::max_size_std____1__allocator_unsigned_int___void_(this->__alloc()), std___1_numeric_limits_long_::max());
}
inline unsigned int &std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::operator[](size_t __n) noexcept {
    ((void)0);
    return this->__begin_[__n];
}
inline const unsigned int &std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
unsigned int &std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::back() noexcept {
    ((void)0);
    return *(this->__end_ - 1);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr unsigned int *std___1___to_address_unsigned_int_(unsigned int *__p) noexcept ;

const unsigned int *std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::data() const noexcept {
    return std___1___to_address_unsigned_int_(this->__begin_);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int &&std___1_move_unsigned_int___(unsigned int &__t) noexcept ;

inline void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::push_back(unsigned int &&__x) {
    if (this->__end_ < this->__end_cap()) {
        this->__construct_one_at_end_unsigned_int_(std___1_move_unsigned_int___(__x));
    } else {
        this->__push_back_slow_path_unsigned_int_(std___1_move_unsigned_int___(__x));
    }
}
inline void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__invalidate_all_iterators() {
}
void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__vallocate(size_t __n) {
    if (__n > this->max_size()) {
        this->__throw_length_error();
    }
    this->__begin_ = this->__end_ = std___1_allocator_traits_std____1__allocator_unsigned_int__::allocate(this->__alloc(), __n);
    this->__end_cap() = this->__begin_ + __n;
    this->__annotate_new(0);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const unsigned long &std___1_max_unsigned_long_(const unsigned long &__a, const unsigned long &__b) ;

inline size_t std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__recommend(size_t __new_size) const {
    const size_t __ms = this->max_size();
    if (__new_size > __ms) {
        this->__throw_length_error();
    }
    const size_t __cap = this->capacity();
    if (__cap >= __ms / 2) {
        return __ms;
    }
    return std___1_max_unsigned_long_(2 * __cap, __new_size);
}
inline void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__construct_at_end(size_t __n, const unsigned int &__x) {
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction __tx(*this, __n);
    const unsigned int *__new_end = __tx.__new_end_;
    for (unsigned int *__pos = __tx.__pos_; __pos != __new_end; ++__pos , __tx.__pos_ = __pos) {
        std___1_allocator_traits_std____1__allocator_unsigned_int__::construct_unsigned_int__const_unsigned_int____void_(this->__alloc(), std___1___to_address_unsigned_int_(__pos), __x);
    }
}
inline std___1___wrap_iter_unsigned_int___ std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__make_iter(unsigned int *__p) noexcept {
    return std___1___wrap_iter_unsigned_int___(__p);
}
struct std___1_integral_constant_bool__false_ {
    static constexpr bool value __attribute__((linkage("linkonce_odr")))  = false;
};
struct std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_(std___1_allocator_unsigned_int_ &__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &__get() noexcept ;
    std___1_allocator_unsigned_int_ &__value_;
};
class std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____ : public std___1___compressed_pair_elem_unsigned_int____0__false_, public std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____(std::nullptr_t &&__t1, std___1_allocator_unsigned_int_ &__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &second() noexcept ;
};
class std___1___split_buffer_common_true_ {
public:
};
typedef std___1_integral_constant_bool__false_ std___1_false_type;

struct std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____ : public std___1___split_buffer_common_true_ {
    unsigned int *__first_;
    unsigned int *__begin_;
    unsigned int *__end_;
    std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_unsigned_int_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned int *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____(size_t __cap, size_t __start, std___1_allocator_unsigned_int_ &__a) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __destruct_at_end(unsigned int *__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(unsigned int *__new_last, std___1_false_type __p2) noexcept ;
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_unsigned_int___(unsigned int *&__x, unsigned int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_unsigned_int___unsigned_int__void_(std___1_allocator_unsigned_int_ &__p1, unsigned int *__begin1, unsigned int *__end1, unsigned int *&__end2) ;

void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__swap_out_circular_buffer(std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____ &__v) {
    this->__annotate_delete();
    std___1___construct_backward_with_exception_guarantees_std____1__allocator_unsigned_int___unsigned_int__void_(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
    std___1_swap_unsigned_int___(this->__begin_, __v.__begin_);
    std___1_swap_unsigned_int___(this->__end_, __v.__end_);
    std___1_swap_unsigned_int___(this->__end_cap(), __v.__end_cap());
    __v.__first_ = __v.__begin_;
    this->__annotate_new(this->size());
    this->__invalidate_all_iterators();
}
inline void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__push_back_slow_path_unsigned_int_(unsigned int &&__x) {
    std___1_allocator_unsigned_int_ &__a = this->__alloc();
    std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____ __v(this->__recommend(this->size() + 1), this->size(), __a);
    std___1_allocator_traits_std____1__allocator_unsigned_int__::construct_unsigned_int__unsigned_int__void_(__a, std___1___to_address_unsigned_int_(__v.__end_), std___1_forward_unsigned_int_(__x));
    __v.__end_++;
    this->__swap_out_circular_buffer(__v);
}
void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__annotate_new(size_t __current_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->capacity(), this->data() + __current_size);
}
void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction::std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ &__v, size_t __n) : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction::~std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction() noexcept {
    this->__v_.__end_ = this->__pos_;
}
void std___1_vector_unsigned_int__std____1__allocator_unsigned_int__::__construct_one_at_end_unsigned_int_(unsigned int &&__args) {
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int____ConstructTransaction __tx(*this, 1);
    std___1_allocator_traits_std____1__allocator_unsigned_int__::construct_unsigned_int__unsigned_int__void_(this->__alloc(), std___1___to_address_unsigned_int_(__tx.__pos_), std___1_forward_unsigned_int_(__args));
    ++__tx.__pos_;
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__KeyPoint___1__true_ : public std___1_allocator_cv__KeyPoint_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__KeyPoint_ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_cv__KeyPoint____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_KeyPoint *const &__get() const noexcept ;
    cv_KeyPoint *__value_;
};
class std___1___compressed_pair_cv__KeyPoint____std____1__allocator_cv__KeyPoint__ : public std___1___compressed_pair_elem_cv__KeyPoint____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__KeyPoint___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_KeyPoint *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__KeyPoint_ &second() noexcept ;
};
class std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ : public std___1___vector_base_common_true_ {
public:
    cv_KeyPoint *__begin_;
    cv_KeyPoint *__end_;
    std___1___compressed_pair_cv__KeyPoint____std____1__allocator_cv__KeyPoint__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__KeyPoint_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_KeyPoint *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(cv_KeyPoint *__new_last) noexcept ;
};
class  std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__  : public std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const cv_KeyPoint &operator[](size_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const cv_KeyPoint *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::~std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::capacity() const noexcept {
    return this->std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::capacity();
}
inline const cv_KeyPoint &std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_KeyPoint *std___1___to_address_cv__KeyPoint_(cv_KeyPoint *__p) noexcept ;

const cv_KeyPoint *std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::data() const noexcept {
    return std___1___to_address_cv__KeyPoint_(this->__begin_);
}
void std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__Point__float____1__true_ : public std___1_allocator_cv__Point__float__ {
};
struct std___1___compressed_pair_elem_cv__Point__float_____0__false_ {
    cv_Point__float_ *__value_;
};
class std___1___compressed_pair_cv__Point__float_____std____1__allocator_cv__Point__float___ : public std___1___compressed_pair_elem_cv__Point__float_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Point__float____1__true_ {
public:
};
class std___1___vector_base_cv__Point__float___std____1__allocator_cv__Point__float___ : public std___1___vector_base_common_true_ {
public:
    cv_Point__float_ *__begin_;
    cv_Point__float_ *__end_;
    std___1___compressed_pair_cv__Point__float_____std____1__allocator_cv__Point__float___ __end_cap_;
};
class  std___1_vector_cv__Point__float___std____1__allocator_cv__Point__float___  : public std___1___vector_base_cv__Point__float___std____1__allocator_cv__Point__float___ {
public:
};
struct std___1_vector_int__std____1__allocator_int____ConstructTransaction {
     __attribute__((linkage("linkonce_odr"))) explicit std___1_vector_int__std____1__allocator_int____ConstructTransaction(std___1_vector_int__std____1__allocator_int__ &__v, size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1_vector_int__std____1__allocator_int____ConstructTransaction() noexcept ;
    std___1_vector_int__std____1__allocator_int__ &__v_;
    int *__pos_;
    const int *const __new_end_;
};
struct std___1___compressed_pair_elem_std____1__allocator_int_____1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_int_____1__false_(std___1_allocator_int_ &__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &__get() noexcept ;
    std___1_allocator_int_ &__value_;
};
struct std___1___compressed_pair_elem_int____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_int____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *const &__get() const noexcept ;
    int *__value_;
};
class std___1___compressed_pair_int____std____1__allocator_int____ : public std___1___compressed_pair_elem_int____0__false_, public std___1___compressed_pair_elem_std____1__allocator_int_____1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_int____std____1__allocator_int____(std::nullptr_t &&__t1, std___1_allocator_int_ &__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &second() noexcept ;
};
struct std___1___split_buffer_int__std____1__allocator_int____ : public std___1___split_buffer_common_true_ {
    int *__first_;
    int *__begin_;
    int *__end_;
    std___1___compressed_pair_int____std____1__allocator_int____ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___split_buffer_int__std____1__allocator_int____(size_t __cap, size_t __start, std___1_allocator_int_ &__a) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___split_buffer_int__std____1__allocator_int____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const ;
     __attribute__((linkage("linkonce_odr"))) void __construct_at_end(size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) void __construct_at_end(size_t __n, const int &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __destruct_at_end(int *__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(int *__new_last, std___1_false_type __p2) noexcept ;
};
struct std___1___compressed_pair_elem_std____1__allocator_int___1__true_ : public std___1_allocator_int_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_int___1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_int_ &__get() const noexcept ;
};
class std___1___compressed_pair_int____std____1__allocator_int__ : public std___1___compressed_pair_elem_int____0__false_, public std___1___compressed_pair_elem_std____1__allocator_int___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_int____std____1__allocator_int__(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &second() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_int_ &second() const noexcept ;
};
class std___1___vector_base_int__std____1__allocator_int__ : public std___1___vector_base_common_true_ {
public:
    int *__begin_;
    int *__end_;
    std___1___compressed_pair_int____std____1__allocator_int__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_int_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_int_ &__alloc() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int *const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_int__std____1__allocator_int__() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_int__std____1__allocator_int__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(int *__new_last) noexcept ;
     [[noreturn]] __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __throw_length_error() const ;
};
class  std___1_vector_int__std____1__allocator_int__  : public std___1___vector_base_int__std____1__allocator_int__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_int__std____1__allocator_int__() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_int__std____1__allocator_int__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_vector_int__std____1__allocator_int__ &operator=(const std___1_vector_int__std____1__allocator_int__ &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline int &operator[](size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const int *data() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) void resize(size_t __sz) ;
     __attribute__((linkage("linkonce_odr"))) void resize(size_t __sz, const int &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __invalidate_all_iterators() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __invalidate_iterators_past(int *__new_last) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline size_t __recommend(size_t __new_size) const ;
     __attribute__((linkage("linkonce_odr"))) void __construct_at_end(size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) inline void __construct_at_end(size_t __n, const int &__x) ;
     __attribute__((linkage("linkonce_odr"))) void __append(size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) void __append(size_t __n, const int &__x) ;
     __attribute__((linkage("linkonce_odr"))) void __swap_out_circular_buffer(std___1___split_buffer_int__std____1__allocator_int____ &__v) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __destruct_at_end(int *__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_new(size_t __current_size) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_shrink(size_t __old_size) const noexcept ;
};
std___1_vector_int__std____1__allocator_int__::std___1_vector_int__std____1__allocator_int__() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_int__std____1__allocator_int__::~std___1_vector_int__std____1__allocator_int__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_int__std____1__allocator_int__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_int__std____1__allocator_int__::capacity() const noexcept {
    return this->std___1___vector_base_int__std____1__allocator_int__::capacity();
}
size_t std___1_vector_int__std____1__allocator_int__::max_size() const noexcept {
    return std___1_min_unsigned_long_(std___1_allocator_traits_std____1__allocator_int__::max_size_std____1__allocator_int___void_(this->__alloc()), std___1_numeric_limits_long_::max());
}
inline int &std___1_vector_int__std____1__allocator_int__::operator[](size_t __n) noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr int *std___1___to_address_int_(int *__p) noexcept ;

const int *std___1_vector_int__std____1__allocator_int__::data() const noexcept {
    return std___1___to_address_int_(this->__begin_);
}
void std___1_vector_int__std____1__allocator_int__::resize(size_t __sz) {
    size_t __cs = this->size();
    if (__cs < __sz) {
        this->__append(__sz - __cs);
    } else {
        if (__cs > __sz) {
            this->__destruct_at_end(this->__begin_ + __sz);
        }
    }
}
void std___1_vector_int__std____1__allocator_int__::resize(size_t __sz, const int &__x) {
    size_t __cs = this->size();
    if (__cs < __sz) {
        this->__append(__sz - __cs, __x);
    } else {
        if (__cs > __sz) {
            this->__destruct_at_end(this->__begin_ + __sz);
        }
    }
}
inline void std___1_vector_int__std____1__allocator_int__::__invalidate_all_iterators() {
}
inline void std___1_vector_int__std____1__allocator_int__::__invalidate_iterators_past(int *__new_last) {
    ((void)__new_last);
}
inline size_t std___1_vector_int__std____1__allocator_int__::__recommend(size_t __new_size) const {
    const size_t __ms = this->max_size();
    if (__new_size > __ms) {
        this->__throw_length_error();
    }
    const size_t __cap = this->capacity();
    if (__cap >= __ms / 2) {
        return __ms;
    }
    return std___1_max_unsigned_long_(2 * __cap, __new_size);
}
void std___1_vector_int__std____1__allocator_int__::__construct_at_end(size_t __n) {
    std___1_vector_int__std____1__allocator_int____ConstructTransaction __tx(*this, __n);
    const int *__new_end = __tx.__new_end_;
    for (int *__pos = __tx.__pos_; __pos != __new_end; ++__pos , __tx.__pos_ = __pos) {
        std___1_allocator_traits_std____1__allocator_int__::construct_int__void_(this->__alloc(), std___1___to_address_int_(__pos));
    }
}
inline void std___1_vector_int__std____1__allocator_int__::__construct_at_end(size_t __n, const int &__x) {
    std___1_vector_int__std____1__allocator_int____ConstructTransaction __tx(*this, __n);
    const int *__new_end = __tx.__new_end_;
    for (int *__pos = __tx.__pos_; __pos != __new_end; ++__pos , __tx.__pos_ = __pos) {
        std___1_allocator_traits_std____1__allocator_int__::construct_int__const_int____void_(this->__alloc(), std___1___to_address_int_(__pos), __x);
    }
}
void std___1_vector_int__std____1__allocator_int__::__append(size_t __n) {
    if (static_cast<size_t>(this->__end_cap() - this->__end_) >= __n) {
        this->__construct_at_end(__n);
    } else {
        std___1_allocator_int_ &__a = this->__alloc();
        std___1___split_buffer_int__std____1__allocator_int____ __v(this->__recommend(this->size() + __n), this->size(), __a);
        __v.__construct_at_end(__n);
        this->__swap_out_circular_buffer(__v);
    }
}
void std___1_vector_int__std____1__allocator_int__::__append(size_t __n, const int &__x) {
    if (static_cast<size_t>(this->__end_cap() - this->__end_) >= __n) {
        this->__construct_at_end(__n, __x);
    } else {
        std___1_allocator_int_ &__a = this->__alloc();
        std___1___split_buffer_int__std____1__allocator_int____ __v(this->__recommend(this->size() + __n), this->size(), __a);
        __v.__construct_at_end(__n, __x);
        this->__swap_out_circular_buffer(__v);
    }
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_int___(int *&__x, int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_int___int__void_(std___1_allocator_int_ &__p1, int *__begin1, int *__end1, int *&__end2) ;

void std___1_vector_int__std____1__allocator_int__::__swap_out_circular_buffer(std___1___split_buffer_int__std____1__allocator_int____ &__v) {
    this->__annotate_delete();
    std___1___construct_backward_with_exception_guarantees_std____1__allocator_int___int__void_(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
    std___1_swap_int___(this->__begin_, __v.__begin_);
    std___1_swap_int___(this->__end_, __v.__end_);
    std___1_swap_int___(this->__end_cap(), __v.__end_cap());
    __v.__first_ = __v.__begin_;
    this->__annotate_new(this->size());
    this->__invalidate_all_iterators();
}
void std___1_vector_int__std____1__allocator_int__::__destruct_at_end(int *__new_last) noexcept {
    this->__invalidate_iterators_past(__new_last);
    size_t __old_size = this->size();
    this->std___1___vector_base_int__std____1__allocator_int__::__destruct_at_end(__new_last);
    this->__annotate_shrink(__old_size);
}
void std___1_vector_int__std____1__allocator_int__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_int__std____1__allocator_int__::__annotate_new(size_t __current_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->capacity(), this->data() + __current_size);
}
void std___1_vector_int__std____1__allocator_int__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
void std___1_vector_int__std____1__allocator_int__::__annotate_shrink(size_t __old_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + __old_size, this->data() + this->size());
}
std___1_vector_int__std____1__allocator_int____ConstructTransaction::std___1_vector_int__std____1__allocator_int____ConstructTransaction(std___1_vector_int__std____1__allocator_int__ &__v, size_t __n) : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
}
std___1_vector_int__std____1__allocator_int____ConstructTransaction::~std___1_vector_int__std____1__allocator_int____ConstructTransaction() noexcept {
    this->__v_.__end_ = this->__pos_;
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__Mat___1__true_ : public std___1_allocator_cv__Mat_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Mat_ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_cv__Mat____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Mat *const &__get() const noexcept ;
    cv_Mat *__value_;
};
class std___1___compressed_pair_cv__Mat____std____1__allocator_cv__Mat__ : public std___1___compressed_pair_elem_cv__Mat____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Mat___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Mat *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Mat_ &second() noexcept ;
};
class std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__ : public std___1___vector_base_common_true_ {
public:
    cv_Mat *__begin_;
    cv_Mat *__end_;
    std___1___compressed_pair_cv__Mat____std____1__allocator_cv__Mat__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Mat_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Mat *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(cv_Mat *__new_last) noexcept ;
};
class  std___1_vector_cv__Mat__std____1__allocator_cv__Mat__  : public std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__Mat__std____1__allocator_cv__Mat__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const cv_Mat *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::~std___1_vector_cv__Mat__std____1__allocator_cv__Mat__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::capacity() const noexcept {
    return this->std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_Mat *std___1___to_address_cv__Mat_(cv_Mat *__p) noexcept ;

const cv_Mat *std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::data() const noexcept {
    return std___1___to_address_cv__Mat_(this->__begin_);
}
void std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_cv__Mat__std____1__allocator_cv__Mat__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_unsigned_long__0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_unsigned_long__0__false_(int &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const unsigned long &__get() const noexcept ;
    unsigned long __value_;
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_unsigned_long__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_unsigned_long___1__true_ {
public:
};
class std___1___bit_reference_std____1__vector_bool___true_;
class std___1___bit_iterator_std____1__vector_bool___false__0UL_;
class std___1_vector_bool__std____1__allocator_bool__ : public std___1___vector_base_common_true_ {
public:
    unsigned long *__begin_;
    size_t __size_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_unsigned_long__ __cap_alloc_;
     __attribute__((linkage("linkonce_odr"))) ~std___1_vector_bool__std____1__allocator_bool__() noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1_vector_bool__std____1__allocator_bool__(size_t __n, const bool &__v) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bit_iterator_std____1__vector_bool___false__0UL_ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bit_iterator_std____1__vector_bool___false__0UL_ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bit_reference_std____1__vector_bool___true_ operator[](size_t __n) ;
};
struct std___1___compressed_pair_elem_std____1__allocator_cv__UMat___1__true_ : public std___1_allocator_cv__UMat_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__UMat_ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_cv__UMat____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_UMat *const &__get() const noexcept ;
    cv_UMat *__value_;
};
class std___1___compressed_pair_cv__UMat____std____1__allocator_cv__UMat__ : public std___1___compressed_pair_elem_cv__UMat____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__UMat___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_UMat *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__UMat_ &second() noexcept ;
};
class std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__ : public std___1___vector_base_common_true_ {
public:
    cv_UMat *__begin_;
    cv_UMat *__end_;
    std___1___compressed_pair_cv__UMat____std____1__allocator_cv__UMat__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__UMat_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_UMat *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(cv_UMat *__new_last) noexcept ;
};
class  std___1_vector_cv__UMat__std____1__allocator_cv__UMat__  : public std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__UMat__std____1__allocator_cv__UMat__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const cv_UMat *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::~std___1_vector_cv__UMat__std____1__allocator_cv__UMat__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::capacity() const noexcept {
    return this->std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_UMat *std___1___to_address_cv__UMat_(cv_UMat *__p) noexcept ;

const cv_UMat *std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::data() const noexcept {
    return std___1___to_address_cv__UMat_(this->__begin_);
}
void std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_cv__UMat__std____1__allocator_cv__UMat__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_unsigned_char___1__true_ : public std___1_allocator_unsigned_char_ {
};
struct std___1___compressed_pair_elem_unsigned_char____0__false_ {
    unsigned char *__value_;
};
class std___1___compressed_pair_unsigned_char____std____1__allocator_unsigned_char__ : public std___1___compressed_pair_elem_unsigned_char____0__false_, public std___1___compressed_pair_elem_std____1__allocator_unsigned_char___1__true_ {
public:
};
class std___1___vector_base_unsigned_char__std____1__allocator_unsigned_char__ : public std___1___vector_base_common_true_ {
public:
    unsigned char *__begin_;
    unsigned char *__end_;
    std___1___compressed_pair_unsigned_char____std____1__allocator_unsigned_char__ __end_cap_;
};
class  std___1_vector_unsigned_char__std____1__allocator_unsigned_char__  : public std___1___vector_base_unsigned_char__std____1__allocator_unsigned_char__ {
public:
};
std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::~std___1_vector_unsigned_long__std____1__allocator_unsigned_long__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::capacity() const noexcept {
    return this->std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr unsigned long *std___1___to_address_unsigned_long_(unsigned long *__p) noexcept ;

const unsigned long *std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::data() const noexcept {
    return std___1___to_address_unsigned_long_(this->__begin_);
}
void std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_unsigned_long__std____1__allocator_unsigned_long__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__DMatch___1__true_ : public std___1_allocator_cv__DMatch_ {
};
class cv_DMatch;
struct std___1___compressed_pair_elem_cv__DMatch____0__false_ {
    cv_DMatch *__value_;
};
class std___1___compressed_pair_cv__DMatch____std____1__allocator_cv__DMatch__ : public std___1___compressed_pair_elem_cv__DMatch____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__DMatch___1__true_ {
public:
};
class std___1___vector_base_cv__DMatch__std____1__allocator_cv__DMatch__ : public std___1___vector_base_common_true_ {
public:
    cv_DMatch *__begin_;
    cv_DMatch *__end_;
    std___1___compressed_pair_cv__DMatch____std____1__allocator_cv__DMatch__ __end_cap_;
};
class  std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__  : public std___1___vector_base_cv__DMatch__std____1__allocator_cv__DMatch__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const cv_DMatch &operator[](size_t __n) const noexcept ;
};
class cv_DMatch {
public:
    int queryIdx;
    int trainIdx;
    int imgIdx;
    float distance;
};

size_t std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
inline const cv_DMatch &std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
struct std___1___compressed_pair_elem_std____1__allocator_double___1__true_ : public std___1_allocator_double_ {
};
struct std___1___compressed_pair_elem_double____0__false_ {
    double *__value_;
};
class std___1___compressed_pair_double____std____1__allocator_double__ : public std___1___compressed_pair_elem_double____0__false_, public std___1___compressed_pair_elem_std____1__allocator_double___1__true_ {
public:
};
class std___1___vector_base_double__std____1__allocator_double__ : public std___1___vector_base_common_true_ {
public:
    double *__begin_;
    double *__end_;
    std___1___compressed_pair_double____std____1__allocator_double__ __end_cap_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_double__std____1__allocator_double__() noexcept ;
};
class std___1___wrap_iter_double___;
class  std___1_vector_double__std____1__allocator_double__  : public std___1___vector_base_double__std____1__allocator_double__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_double__std____1__allocator_double__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_double___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_double___ end() noexcept ;
};
class std___1_vector_const_DBoW2__FClass__TDescriptor____std____1__allocator_const_DBoW2__FClass__TDescriptor____;
class std___1_vector_DBoW2__FClass__TDescriptor__std____1__allocator_DBoW2__FClass__TDescriptor__;
class std___1_vector_const_cv__Mat____std____1__allocator_const_cv__Mat____;
struct std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_ : public std___1_allocator_std____1__vector_unsigned_int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_int__ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &__get() const noexcept ;
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__value_;
};
class std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___ : public std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_int__ &second() noexcept ;
};
class std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___ : public std___1___vector_base_common_true_ {
public:
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__begin_;
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__end_;
    std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_unsigned_int__ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__new_last) noexcept ;
};
class  std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___  : public std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) void reserve(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ &operator[](size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void resize(size_t __sz) ;
     __attribute__((linkage("linkonce_odr"))) void resize(size_t __sz, const std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::~std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::capacity() const noexcept {
    return this->std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *std___1___to_address_std____1__vector_unsigned_int__(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) noexcept ;

const std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::data() const noexcept {
    return std___1___to_address_std____1__vector_unsigned_int__(this->__begin_);
}
void std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
class std___1_vector_cv__flann__FlannIndexType__std____1__allocator_cv__flann__FlannIndexType__;
class std___1_vector_std____1__vector_cv__KeyPoint___std____1__allocator_std____1__vector_cv__KeyPoint___;
struct std___1___compressed_pair_elem_std____1__allocator_float___1__true_ : public std___1_allocator_float_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_float_ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_float____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) float *const &__get() const noexcept ;
    float *__value_;
};
class std___1___compressed_pair_float____std____1__allocator_float__ : public std___1___compressed_pair_elem_float____0__false_, public std___1___compressed_pair_elem_std____1__allocator_float___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) float *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_float_ &second() noexcept ;
};
class std___1___vector_base_float__std____1__allocator_float__ : public std___1___vector_base_common_true_ {
public:
    float *__begin_;
    float *__end_;
    std___1___compressed_pair_float____std____1__allocator_float__ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_float_ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) float *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_float__std____1__allocator_float__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(float *__new_last) noexcept ;
};
class  std___1_vector_float__std____1__allocator_float__  : public std___1___vector_base_float__std____1__allocator_float__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_float__std____1__allocator_float__() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const float &operator[](size_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const float *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_float__std____1__allocator_float__::~std___1_vector_float__std____1__allocator_float__() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_float__std____1__allocator_float__::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_float__std____1__allocator_float__::capacity() const noexcept {
    return this->std___1___vector_base_float__std____1__allocator_float__::capacity();
}
inline const float &std___1_vector_float__std____1__allocator_float__::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr float *std___1___to_address_float_(float *__p) noexcept ;

const float *std___1_vector_float__std____1__allocator_float__::data() const noexcept {
    return std___1___to_address_float_(this->__begin_);
}
void std___1_vector_float__std____1__allocator_float__::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_float__std____1__allocator_float__::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__Point__int____1__true_ : public std___1_allocator_cv__Point__int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Point__int__ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_cv__Point__int_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Point__int_ *const &__get() const noexcept ;
    cv_Point__int_ *__value_;
};
class std___1___compressed_pair_cv__Point__int_____std____1__allocator_cv__Point__int___ : public std___1___compressed_pair_elem_cv__Point__int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Point__int____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Point__int_ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Point__int__ &second() noexcept ;
};
class std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___ : public std___1___vector_base_common_true_ {
public:
    cv_Point__int_ *__begin_;
    cv_Point__int_ *__end_;
    std___1___compressed_pair_cv__Point__int_____std____1__allocator_cv__Point__int___ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_cv__Point__int__ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) cv_Point__int_ *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(cv_Point__int_ *__new_last) noexcept ;
};
class  std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___  : public std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const cv_Point__int_ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::~std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::capacity() const noexcept {
    return this->std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_Point__int_ *std___1___to_address_cv__Point__int__(cv_Point__int_ *__p) noexcept ;

const cv_Point__int_ *std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::data() const noexcept {
    return std___1___to_address_cv__Point__int__(this->__begin_);
}
void std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__Rect__int____1__true_ : public std___1_allocator_cv__Rect__int__ {
};
class cv_Rect__int_;
struct std___1___compressed_pair_elem_cv__Rect__int_____0__false_ {
    cv_Rect__int_ *__value_;
};
class std___1___compressed_pair_cv__Rect__int_____std____1__allocator_cv__Rect__int___ : public std___1___compressed_pair_elem_cv__Rect__int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Rect__int____1__true_ {
public:
};
class std___1___vector_base_cv__Rect__int___std____1__allocator_cv__Rect__int___ : public std___1___vector_base_common_true_ {
public:
    cv_Rect__int_ *__begin_;
    cv_Rect__int_ *__end_;
    std___1___compressed_pair_cv__Rect__int_____std____1__allocator_cv__Rect__int___ __end_cap_;
};
class  std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___  : public std___1___vector_base_cv__Rect__int___std____1__allocator_cv__Rect__int___ {
public:
};
class std___1_vector_std____1__vector_cv__DMatch___std____1__allocator_std____1__vector_cv__DMatch___;
class std___1_vector_std____1__vector_unsigned_char___std____1__allocator_std____1__vector_unsigned_char___;
class std___1_vector_std____1__vector_int___std____1__allocator_std____1__vector_int___;
class std___1_vector_std____1__pair_cv__dnn__dnn4_v20201117__Backend__cv__dnn__dnn4_v20201117__Target___std____1__allocator_std____1__pair_cv__dnn__dnn4_v20201117__Backend__cv__dnn__dnn4_v20201117__Target___;
class std___1_vector_cv__dnn__dnn4_v20201117__Target__std____1__allocator_cv__dnn__dnn4_v20201117__Target__;
class std___1_vector_cv__Mat____std____1__allocator_cv__Mat____;
class std___1_vector_cv__Ptr_cv__dnn__dnn4_v20201117__BackendWrapper___std____1__allocator_cv__Ptr_cv__dnn__dnn4_v20201117__BackendWrapper___;
class std___1_vector_cv__Ptr_cv__dnn__dnn4_v20201117__BackendNode___std____1__allocator_cv__Ptr_cv__dnn__dnn4_v20201117__BackendNode___;
class std___1_vector_cv__Ptr_cv__dnn__dnn4_v20201117__Layer___std____1__allocator_cv__Ptr_cv__dnn__dnn4_v20201117__Layer___;
class std___1_vector_std____1__vector_cv__Mat___std____1__allocator_std____1__vector_cv__Mat___;
class std___1_vector_std____1__vector_std____1__vector_int____std____1__allocator_std____1__vector_std____1__vector_int____;
class std___1_vector_cv__Rect__double___std____1__allocator_cv__Rect__double___;
class std___1_vector_cv__RotatedRect__std____1__allocator_cv__RotatedRect__;
class std___1_vector_cv__VideoCapture__std____1__allocator_cv__VideoCapture__;
class std___1_vector_cv__Vec_float__4___std____1__allocator_cv__Vec_float__4___;
class std___1_vector_cv__Vec_float__6___std____1__allocator_cv__Vec_float__6___;
class std___1_vector_std____1__vector_cv__Point__float____std____1__allocator_std____1__vector_cv__Point__float____;
class std___1_vector_cv__Point__double___std____1__allocator_cv__Point__double___;
class std___1_vector_cv__ml__DTrees__Node__std____1__allocator_cv__ml__DTrees__Node__;
class std___1_vector_cv__ml__DTrees__Split__std____1__allocator_cv__ml__DTrees__Split__;
class std___1_vector_cv__DetectionROI__std____1__allocator_cv__DetectionROI__;
class std___1_vector_std____1__pair_cv__Rect__int___int___std____1__allocator_std____1__pair_cv__Rect__int___int___;
class std___1_vector_cv__DetectionBasedTracker__ExtObject__std____1__allocator_cv__DetectionBasedTracker__ExtObject__;
struct std___1___compressed_pair_elem_std____1__allocator_cv__DetectionBasedTracker__TrackedObject___1__true_ : public std___1_allocator_cv__DetectionBasedTracker__TrackedObject_ {
};
struct cv_DetectionBasedTracker_TrackedObject;
struct std___1___compressed_pair_elem_cv__DetectionBasedTracker__TrackedObject____0__false_ {
    cv_DetectionBasedTracker_TrackedObject *__value_;
};
class std___1___compressed_pair_cv__DetectionBasedTracker__TrackedObject____std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ : public std___1___compressed_pair_elem_cv__DetectionBasedTracker__TrackedObject____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__DetectionBasedTracker__TrackedObject___1__true_ {
public:
};
class std___1___vector_base_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ : public std___1___vector_base_common_true_ {
public:
    cv_DetectionBasedTracker_TrackedObject *__begin_;
    cv_DetectionBasedTracker_TrackedObject *__end_;
    std___1___compressed_pair_cv__DetectionBasedTracker__TrackedObject____std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ __end_cap_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__() ;
};
class  std___1_vector_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__  : public std___1___vector_base_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__() ;
};
struct std___1___compressed_pair_elem_std____1__allocator_cv__detail__ImageFeatures___1__true_ : public std___1_allocator_cv__detail__ImageFeatures_ {
};
struct cv_detail_ImageFeatures;
struct std___1___compressed_pair_elem_cv__detail__ImageFeatures____0__false_ {
    cv_detail_ImageFeatures *__value_;
};
class std___1___compressed_pair_cv__detail__ImageFeatures____std____1__allocator_cv__detail__ImageFeatures__ : public std___1___compressed_pair_elem_cv__detail__ImageFeatures____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__detail__ImageFeatures___1__true_ {
public:
};
class std___1___vector_base_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures__ : public std___1___vector_base_common_true_ {
public:
    cv_detail_ImageFeatures *__begin_;
    cv_detail_ImageFeatures *__end_;
    std___1___compressed_pair_cv__detail__ImageFeatures____std____1__allocator_cv__detail__ImageFeatures__ __end_cap_;
};
class  std___1_vector_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures__  : public std___1___vector_base_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures__ {
public:
};
struct std___1___compressed_pair_elem_std____1__allocator_cv__detail__MatchesInfo___1__true_ : public std___1_allocator_cv__detail__MatchesInfo_ {
};
struct cv_detail_MatchesInfo;
struct std___1___compressed_pair_elem_cv__detail__MatchesInfo____0__false_ {
    cv_detail_MatchesInfo *__value_;
};
class std___1___compressed_pair_cv__detail__MatchesInfo____std____1__allocator_cv__detail__MatchesInfo__ : public std___1___compressed_pair_elem_cv__detail__MatchesInfo____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__detail__MatchesInfo___1__true_ {
public:
};
class std___1___vector_base_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo__ : public std___1___vector_base_common_true_ {
public:
    cv_detail_MatchesInfo *__begin_;
    cv_detail_MatchesInfo *__end_;
    std___1___compressed_pair_cv__detail__MatchesInfo____std____1__allocator_cv__detail__MatchesInfo__ __end_cap_;
};
class  std___1_vector_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo__  : public std___1___vector_base_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo__ {
public:
};
struct std___1___compressed_pair_elem_std____1__allocator_cv__Size__int____1__true_ : public std___1_allocator_cv__Size__int__ {
};
struct std___1___compressed_pair_elem_cv__Size__int_____0__false_ {
    cv_Size__int_ *__value_;
};
class std___1___compressed_pair_cv__Size__int_____std____1__allocator_cv__Size__int___ : public std___1___compressed_pair_elem_cv__Size__int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Size__int____1__true_ {
public:
};
class std___1___vector_base_cv__Size__int___std____1__allocator_cv__Size__int___ : public std___1___vector_base_common_true_ {
public:
    cv_Size__int_ *__begin_;
    cv_Size__int_ *__end_;
    std___1___compressed_pair_cv__Size__int_____std____1__allocator_cv__Size__int___ __end_cap_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_cv__Size__int___std____1__allocator_cv__Size__int___() noexcept ;
};
class  std___1_vector_cv__Size__int___std____1__allocator_cv__Size__int___  : public std___1___vector_base_cv__Size__int___std____1__allocator_cv__Size__int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_cv__Size__int___std____1__allocator_cv__Size__int___() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__allocator_cv__detail__CameraParams___1__true_ : public std___1_allocator_cv__detail__CameraParams_ {
};
struct cv_detail_CameraParams;
struct std___1___compressed_pair_elem_cv__detail__CameraParams____0__false_ {
    cv_detail_CameraParams *__value_;
};
class std___1___compressed_pair_cv__detail__CameraParams____std____1__allocator_cv__detail__CameraParams__ : public std___1___compressed_pair_elem_cv__detail__CameraParams____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__detail__CameraParams___1__true_ {
public:
};
class std___1___vector_base_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ : public std___1___vector_base_common_true_ {
public:
    cv_detail_CameraParams *__begin_;
    cv_detail_CameraParams *__end_;
    std___1___compressed_pair_cv__detail__CameraParams____std____1__allocator_cv__detail__CameraParams__ __end_cap_;
};
class  std___1_vector_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__  : public std___1___vector_base_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ {
public:
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1__pair_int__int____1__true_ : public std___1_allocator_std____1__pair_int__int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_int__int__ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__pair_int__int_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_int__int_ *const &__get() const noexcept ;
    std___1_pair_int__int_ *__value_;
};
class std___1___compressed_pair_std____1__pair_int__int_____std____1__allocator_std____1__pair_int__int___ : public std___1___compressed_pair_elem_std____1__pair_int__int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__pair_int__int____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_int__int_ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_int__int__ &second() noexcept ;
};
class std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___ : public std___1___vector_base_common_true_ {
public:
    std___1_pair_int__int_ *__begin_;
    std___1_pair_int__int_ *__end_;
    std___1___compressed_pair_std____1__pair_int__int_____std____1__allocator_std____1__pair_int__int___ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_int__int__ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_int__int_ *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(std___1_pair_int__int_ *__new_last) noexcept ;
};
class  std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___  : public std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_pair_int__int_ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::~std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::capacity() const noexcept {
    return this->std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_pair_int__int_ *std___1___to_address_std____1__pair_int__int__(std___1_pair_int__int_ *__p) noexcept ;

const std___1_pair_int__int_ *std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::data() const noexcept {
    return std___1___to_address_std____1__pair_int__int__(this->__begin_);
}
void std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
class std___1_vector_std____1__pair_cv__UMat__unsigned_char___std____1__allocator_std____1__pair_cv__UMat__unsigned_char___;
class std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____;
struct std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction {
     __attribute__((linkage("linkonce_odr"))) explicit std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__v, size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction() noexcept ;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__v_;
    ORB_SLAM2_MapPoint **__pos_;
    ORB_SLAM2_MapPoint *const *const __new_end_;
};
struct std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_(std___1_allocator_ORB_SLAM2__MapPoint___ &__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &__get() noexcept ;
    std___1_allocator_ORB_SLAM2__MapPoint___ &__value_;
};
struct std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **const &__get() const noexcept ;
    ORB_SLAM2_MapPoint **__value_;
};
class std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______ : public std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__MapPoint___ &__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &second() noexcept ;
};
struct std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ : public std___1___split_buffer_common_true_ {
    ORB_SLAM2_MapPoint **__first_;
    ORB_SLAM2_MapPoint **__begin_;
    ORB_SLAM2_MapPoint **__end_;
    std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______(size_t __cap, size_t __start, std___1_allocator_ORB_SLAM2__MapPoint___ &__a) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __destruct_at_end(ORB_SLAM2_MapPoint **__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(ORB_SLAM2_MapPoint **__new_last, std___1_false_type __p2) noexcept ;
};
struct std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_ : public std___1_allocator_ORB_SLAM2__MapPoint___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1_allocator_ORB_SLAM2__MapPoint___ &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__MapPoint___ &__get() const noexcept ;
};
class std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__MapPoint___ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &second() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__MapPoint___ &second() const noexcept ;
};
typedef std___1_integral_constant_bool__true_ std___1_true_type;

class std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1___vector_base_common_true_ {
public:
    ORB_SLAM2_MapPoint **__begin_;
    ORB_SLAM2_MapPoint **__end_;
    std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__MapPoint___ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__MapPoint___ &__alloc() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint **const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____(std___1_allocator_ORB_SLAM2__MapPoint___ &&__a) noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(ORB_SLAM2_MapPoint **__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __move_assign_alloc(std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c) noexcept(!std___1_integral_constant_bool__true_::value || std___1_integral_constant_bool__true_::value) ;
     [[noreturn]] __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __throw_length_error() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __move_assign_alloc(std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c, std___1_true_type __p2) noexcept(std___1_integral_constant_bool__true_::value) ;
};
class std___1___wrap_iter_ORB_SLAM2__MapPoint____;
class  std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____  : public std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &&__x) noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &operator=(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &&__x) noexcept((std___1_integral_constant_bool__true_::value)) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) void reserve(size_t __n) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline ORB_SLAM2_MapPoint *&operator[](size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline ORB_SLAM2_MapPoint *const &operator[](size_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint *const *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void push_back(ORB_SLAM2_MapPoint *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __invalidate_all_iterators() ;
     __attribute__((linkage("linkonce_odr"))) void __vdeallocate() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline size_t __recommend(size_t __new_size) const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ __make_iter(ORB_SLAM2_MapPoint **__p) noexcept ;
     __attribute__((linkage("linkonce_odr"))) void __swap_out_circular_buffer(std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ &__v) ;
     __attribute__((linkage("linkonce_odr"))) void __move_assign(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c, std___1_true_type __p2) noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) inline void __push_back_slow_path_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_new(size_t __current_size) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_shrink(size_t __old_size) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __construct_one_at_end_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__args) ;
};
std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::~std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept {
    this->__annotate_delete();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__MapPoint___ &&std___1_move_std____1__allocator_ORB_SLAM2__MapPoint______(std___1_allocator_ORB_SLAM2__MapPoint___ &__t) noexcept ;

inline std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &&__x) noexcept(std___1_integral_constant_bool__true_::value) : std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____(std___1_move_std____1__allocator_ORB_SLAM2__MapPoint______(__x.__alloc())) {
    this->__begin_ = __x.__begin_;
    this->__end_ = __x.__end_;
    this->__end_cap() = __x.__end_cap();
    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
}
inline std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::operator=(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &&__x) noexcept((std___1_integral_constant_bool__true_::value)) {
    this->__move_assign(__x, std___1_integral_constant_bool__true_());
    return *this;
}
class  std___1___wrap_iter_ORB_SLAM2__MapPoint____  {
public:
    ORB_SLAM2_MapPoint **__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_MapPoint *&operator*() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_ORB_SLAM2__MapPoint____ &operator++() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__MapPoint____ operator++(int __p1) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_MapPoint **base() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__MapPoint____(ORB_SLAM2_MapPoint **__x) noexcept ;
};
inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::begin() noexcept {
    return this->__make_iter(this->__begin_);
}
inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::end() noexcept {
    return this->__make_iter(this->__end_);
}
size_t std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::capacity() const noexcept {
    return this->std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::capacity();
}
size_t std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::max_size() const noexcept {
    return std___1_min_unsigned_long_(std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::max_size_std____1__allocator_ORB_SLAM2__MapPoint_____void_(this->__alloc()), std___1_numeric_limits_long_::max());
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::reserve(size_t __n) {
    if (__n > this->capacity()) {
        std___1_allocator_ORB_SLAM2__MapPoint___ &__a = this->__alloc();
        std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ __v(__n, this->size(), __a);
        this->__swap_out_circular_buffer(__v);
    }
}
inline ORB_SLAM2_MapPoint *&std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::operator[](size_t __n) noexcept {
    ((void)0);
    return this->__begin_[__n];
}
inline ORB_SLAM2_MapPoint *const &std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_MapPoint **std___1___to_address_ORB_SLAM2__MapPoint___(ORB_SLAM2_MapPoint **__p) noexcept ;

ORB_SLAM2_MapPoint *const *std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::data() const noexcept {
    return std___1___to_address_ORB_SLAM2__MapPoint___(this->__begin_);
}
inline void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::push_back(ORB_SLAM2_MapPoint *const &__x) {
    if (this->__end_ != this->__end_cap()) {
        this->__construct_one_at_end_ORB_SLAM2__MapPoint__const___(__x);
    } else {
        this->__push_back_slow_path_ORB_SLAM2__MapPoint__const___(__x);
    }
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear() noexcept {
    size_t __old_size = this->size();
    this->std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear();
    this->__annotate_shrink(__old_size);
    this->__invalidate_all_iterators();
}
inline void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__invalidate_all_iterators() {
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__vdeallocate() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::deallocate(this->__alloc(), this->__begin_, this->capacity());
        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
    }
}
inline size_t std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__recommend(size_t __new_size) const {
    const size_t __ms = this->max_size();
    if (__new_size > __ms) {
        this->__throw_length_error();
    }
    const size_t __cap = this->capacity();
    if (__cap >= __ms / 2) {
        return __ms;
    }
    return std___1_max_unsigned_long_(2 * __cap, __new_size);
}
inline std___1___wrap_iter_ORB_SLAM2__MapPoint____ std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__make_iter(ORB_SLAM2_MapPoint **__p) noexcept {
    return std___1___wrap_iter_ORB_SLAM2__MapPoint____(__p);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__MapPoint____(ORB_SLAM2_MapPoint **&__x, ORB_SLAM2_MapPoint **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__p1, ORB_SLAM2_MapPoint **__begin1, ORB_SLAM2_MapPoint **__end1, ORB_SLAM2_MapPoint **&__end2) ;

void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__swap_out_circular_buffer(std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ &__v) {
    this->__annotate_delete();
    std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint____void_(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
    std___1_swap_ORB_SLAM2__MapPoint____(this->__begin_, __v.__begin_);
    std___1_swap_ORB_SLAM2__MapPoint____(this->__end_, __v.__end_);
    std___1_swap_ORB_SLAM2__MapPoint____(this->__end_cap(), __v.__end_cap());
    __v.__first_ = __v.__begin_;
    this->__annotate_new(this->size());
    this->__invalidate_all_iterators();
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__move_assign(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c, std___1_true_type __p2) noexcept(std___1_integral_constant_bool__true_::value) {
    this->__vdeallocate();
    this->std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__move_assign_alloc(__c);
    this->__begin_ = __c.__begin_;
    this->__end_ = __c.__end_;
    this->__end_cap() = __c.__end_cap();
    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
}
inline void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__push_back_slow_path_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__x) {
    std___1_allocator_ORB_SLAM2__MapPoint___ &__a = this->__alloc();
    std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ __v(this->__recommend(this->size() + 1), this->size(), __a);
    std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(__a, std___1___to_address_ORB_SLAM2__MapPoint___(__v.__end_), std___1_forward_ORB_SLAM2__MapPoint__const___(__x));
    __v.__end_++;
    this->__swap_out_circular_buffer(__v);
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__annotate_new(size_t __current_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->capacity(), this->data() + __current_size);
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__annotate_shrink(size_t __old_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + __old_size, this->data() + this->size());
}
std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction::std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction(std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__v, size_t __n) : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
}
std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction::~std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction() noexcept {
    this->__v_.__end_ = this->__pos_;
}
void std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__construct_one_at_end_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__args) {
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______ConstructTransaction __tx(*this, 1);
    std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__MapPoint___(__tx.__pos_), std___1_forward_ORB_SLAM2__MapPoint__const___(__args));
    ++__tx.__pos_;
}
class std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____;
struct std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction {
     __attribute__((linkage("linkonce_odr"))) explicit std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction(std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ &__v, size_t __n) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction() noexcept ;
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ &__v_;
    ORB_SLAM2_KeyFrame **__pos_;
    ORB_SLAM2_KeyFrame *const *const __new_end_;
};
struct std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_ : public std___1_allocator_ORB_SLAM2__KeyFrame___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1_allocator_ORB_SLAM2__KeyFrame___ &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__KeyFrame___ &__get() const noexcept ;
};
struct std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **const &__get() const noexcept ;
    ORB_SLAM2_KeyFrame **__value_;
};
class std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ : public std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__KeyFrame___ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &second() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__KeyFrame___ &second() const noexcept ;
};
class std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ : public std___1___vector_base_common_true_ {
public:
    ORB_SLAM2_KeyFrame **__begin_;
    ORB_SLAM2_KeyFrame **__end_;
    std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_allocator_ORB_SLAM2__KeyFrame___ &__alloc() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_allocator_ORB_SLAM2__KeyFrame___ &&__a) noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(ORB_SLAM2_KeyFrame **__new_last) noexcept ;
     [[noreturn]] __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __throw_length_error() const ;
};
struct std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______;
class std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___;
class std___1___wrap_iter_ORB_SLAM2__KeyFrame____;
class  std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____  : public std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ &&__x) noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ begin() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ end() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) size_t max_size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline ORB_SLAM2_KeyFrame *const &operator[](size_t __n) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame *const *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void push_back(ORB_SLAM2_KeyFrame *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __invalidate_all_iterators() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline size_t __recommend(size_t __new_size) const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ __make_iter(ORB_SLAM2_KeyFrame **__p) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ __make_iter(ORB_SLAM2_KeyFrame *const *__p) const noexcept ;
     __attribute__((linkage("linkonce_odr"))) void __swap_out_circular_buffer(std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ &__v) ;
     __attribute__((linkage("linkonce_odr"))) inline void __push_back_slow_path_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_new(size_t __current_size) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __construct_one_at_end_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__args) ;
};
std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::~std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept {
    this->__annotate_delete();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__KeyFrame___ &&std___1_move_std____1__allocator_ORB_SLAM2__KeyFrame______(std___1_allocator_ORB_SLAM2__KeyFrame___ &__t) noexcept ;

inline std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ &&__x) noexcept(std___1_integral_constant_bool__true_::value) : std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_move_std____1__allocator_ORB_SLAM2__KeyFrame______(__x.__alloc())) {
    this->__begin_ = __x.__begin_;
    this->__end_ = __x.__end_;
    this->__end_cap() = __x.__end_cap();
    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
}
class  std___1___wrap_iter_ORB_SLAM2__KeyFrame____  {
public:
    ORB_SLAM2_KeyFrame **__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame *&operator*() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &operator++() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__KeyFrame____ operator++(int __p1) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame **base() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__KeyFrame____(ORB_SLAM2_KeyFrame **__x) noexcept ;
};
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::begin() noexcept {
    return this->__make_iter(this->__begin_);
}
class  std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___  {
public:
    ORB_SLAM2_KeyFrame *const *__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame *const &operator*() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &operator++() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ operator++(int __p1) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame *const *base() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const *__x) noexcept ;
};
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::begin() const noexcept {
    return this->__make_iter(this->__begin_);
}
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::end() noexcept {
    return this->__make_iter(this->__end_);
}
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::end() const noexcept {
    return this->__make_iter(this->__end_);
}
size_t std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::capacity() const noexcept {
    return this->std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::capacity();
}
size_t std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::max_size() const noexcept {
    return std___1_min_unsigned_long_(std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::max_size_std____1__allocator_ORB_SLAM2__KeyFrame_____void_(this->__alloc()), std___1_numeric_limits_long_::max());
}
inline ORB_SLAM2_KeyFrame *const &std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::operator[](size_t __n) const noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame **std___1___to_address_ORB_SLAM2__KeyFrame___(ORB_SLAM2_KeyFrame **__p) noexcept ;

ORB_SLAM2_KeyFrame *const *std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::data() const noexcept {
    return std___1___to_address_ORB_SLAM2__KeyFrame___(this->__begin_);
}
inline void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::push_back(ORB_SLAM2_KeyFrame *const &__x) {
    if (this->__end_ != this->__end_cap()) {
        this->__construct_one_at_end_ORB_SLAM2__KeyFrame__const___(__x);
    } else {
        this->__push_back_slow_path_ORB_SLAM2__KeyFrame__const___(__x);
    }
}
inline void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__invalidate_all_iterators() {
}
inline size_t std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__recommend(size_t __new_size) const {
    const size_t __ms = this->max_size();
    if (__new_size > __ms) {
        this->__throw_length_error();
    }
    const size_t __cap = this->capacity();
    if (__cap >= __ms / 2) {
        return __ms;
    }
    return std___1_max_unsigned_long_(2 * __cap, __new_size);
}
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame____ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__make_iter(ORB_SLAM2_KeyFrame **__p) noexcept {
    return std___1___wrap_iter_ORB_SLAM2__KeyFrame____(__p);
}
inline std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__make_iter(ORB_SLAM2_KeyFrame *const *__p) const noexcept {
    return std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___(__p);
}
struct std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &__get() noexcept ;
    std___1_allocator_ORB_SLAM2__KeyFrame___ &__value_;
};
class std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______ : public std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__KeyFrame___ &__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &second() noexcept ;
};
struct std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ : public std___1___split_buffer_common_true_ {
    ORB_SLAM2_KeyFrame **__first_;
    ORB_SLAM2_KeyFrame **__begin_;
    ORB_SLAM2_KeyFrame **__end_;
    std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_ORB_SLAM2__KeyFrame___ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **&__end_cap() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame **const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______(size_t __cap, size_t __start, std___1_allocator_ORB_SLAM2__KeyFrame___ &__a) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __destruct_at_end(ORB_SLAM2_KeyFrame **__new_last) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(ORB_SLAM2_KeyFrame **__new_last, std___1_false_type __p2) noexcept ;
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__KeyFrame____(ORB_SLAM2_KeyFrame **&__x, ORB_SLAM2_KeyFrame **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__p1, ORB_SLAM2_KeyFrame **__begin1, ORB_SLAM2_KeyFrame **__end1, ORB_SLAM2_KeyFrame **&__end2) ;

void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__swap_out_circular_buffer(std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ &__v) {
    this->__annotate_delete();
    std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame____void_(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
    std___1_swap_ORB_SLAM2__KeyFrame____(this->__begin_, __v.__begin_);
    std___1_swap_ORB_SLAM2__KeyFrame____(this->__end_, __v.__end_);
    std___1_swap_ORB_SLAM2__KeyFrame____(this->__end_cap(), __v.__end_cap());
    __v.__first_ = __v.__begin_;
    this->__annotate_new(this->size());
    this->__invalidate_all_iterators();
}
inline void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__push_back_slow_path_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__x) {
    std___1_allocator_ORB_SLAM2__KeyFrame___ &__a = this->__alloc();
    std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ __v(this->__recommend(this->size() + 1), this->size(), __a);
    std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(__a, std___1___to_address_ORB_SLAM2__KeyFrame___(__v.__end_), std___1_forward_ORB_SLAM2__KeyFrame__const___(__x));
    __v.__end_++;
    this->__swap_out_circular_buffer(__v);
}
void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__annotate_new(size_t __current_size) const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->capacity(), this->data() + __current_size);
}
void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction::std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction(std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ &__v, size_t __n) : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
}
std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction::~std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction() noexcept {
    this->__v_.__end_ = this->__pos_;
}
void std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__construct_one_at_end_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__args) {
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______ConstructTransaction __tx(*this, 1);
    std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__KeyFrame___(__tx.__pos_), std___1_forward_ORB_SLAM2__KeyFrame__const___(__args));
    ++__tx.__pos_;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame______1__true_ : public std___1_allocator_std____1__list_ORB_SLAM2__KeyFrame____ {
};
class std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____;
struct std___1___compressed_pair_elem_std____1__list_ORB_SLAM2__KeyFrame_______0__false_ {
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ *__value_;
};
class std___1___compressed_pair_std____1__list_ORB_SLAM2__KeyFrame_______std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ : public std___1___compressed_pair_elem_std____1__list_ORB_SLAM2__KeyFrame_______0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame______1__true_ {
public:
};
class std___1___vector_base_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ : public std___1___vector_base_common_true_ {
public:
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ *__begin_;
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ *__end_;
    std___1___compressed_pair_std____1__list_ORB_SLAM2__KeyFrame_______std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ __end_cap_;
};
class  std___1_vector_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____  : public std___1___vector_base_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ {
public:
};
std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::~std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::capacity() const noexcept {
    return this->std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *std___1___to_address_std____1__vector_unsigned_long__(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) noexcept ;

const std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::data() const noexcept {
    return std___1___to_address_std____1__vector_unsigned_long__(this->__begin_);
}
void std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____1__true_ : public std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__vector_std____1__vector_unsigned_long______0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &__get() const noexcept ;
    std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__value_;
};
class std___1___compressed_pair_std____1__vector_std____1__vector_unsigned_long______std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ : public std___1___compressed_pair_elem_std____1__vector_std____1__vector_unsigned_long______0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &second() noexcept ;
};
class std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ : public std___1___vector_base_common_true_ {
public:
    std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__begin_;
    std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__end_;
    std___1___compressed_pair_std____1__vector_std____1__vector_unsigned_long______std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &__end_cap() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__new_last) noexcept ;
};
class  std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____  : public std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::~std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::capacity() const noexcept {
    return this->std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::capacity();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *std___1___to_address_std____1__vector_std____1__vector_unsigned_long___(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) noexcept ;

const std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::data() const noexcept {
    return std___1___to_address_std____1__vector_std____1__vector_unsigned_long___(this->__begin_);
}
void std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
struct std___1___compressed_pair_elem_std____1__allocator_cv__Point3__float____1__true_ : public std___1_allocator_cv__Point3__float__ {
};
class cv_Point3__float_;
struct std___1___compressed_pair_elem_cv__Point3__float_____0__false_ {
    cv_Point3__float_ *__value_;
};
class std___1___compressed_pair_cv__Point3__float_____std____1__allocator_cv__Point3__float___ : public std___1___compressed_pair_elem_cv__Point3__float_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_cv__Point3__float____1__true_ {
public:
};
class std___1___vector_base_cv__Point3__float___std____1__allocator_cv__Point3__float___ : public std___1___vector_base_common_true_ {
public:
    cv_Point3__float_ *__begin_;
    cv_Point3__float_ *__end_;
    std___1___compressed_pair_cv__Point3__float_____std____1__allocator_cv__Point3__float___ __end_cap_;
};
class  std___1_vector_cv__Point3__float___std____1__allocator_cv__Point3__float___  : public std___1___vector_base_cv__Point3__float___std____1__allocator_cv__Point3__float___ {
public:
};
struct std___1___compressed_pair_elem_std____1__allocator_g2o__HyperGraph__Vertex_____1__true_ : public std___1_allocator_g2o__HyperGraph__Vertex___ {
};
struct std___1___compressed_pair_elem_g2o__HyperGraph__Vertex_____0__false_ {
    g2o_HyperGraph_Vertex **__value_;
};
class std___1___compressed_pair_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex____ : public std___1___compressed_pair_elem_g2o__HyperGraph__Vertex_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_g2o__HyperGraph__Vertex_____1__true_ {
public:
};
class std___1___vector_base_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____ : public std___1___vector_base_common_true_ {
public:
    g2o_HyperGraph_Vertex **__begin_;
    g2o_HyperGraph_Vertex **__end_;
    std___1___compressed_pair_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex____ __end_cap_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____() noexcept ;
};
class  std___1_vector_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____  : public std___1___vector_base_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____() noexcept ;
};
class std___1_vector_g2o__Parameter____std____1__allocator_g2o__Parameter____;
class std___1_vector_g2o__OptimizableGraph__Vertex____std____1__allocator_g2o__OptimizableGraph__Vertex____;
class std___1_vector_g2o__OptimizableGraph__Edge____std____1__allocator_g2o__OptimizableGraph__Edge____;
struct std___1___compressed_pair_elem_std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____1__true_ : public std___1_allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int__ {
};
struct std___1_pair_std____1__set_ORB_SLAM2__KeyFrame_____int_;
struct std___1___compressed_pair_elem_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____0__false_ {
    std___1_pair_std____1__set_ORB_SLAM2__KeyFrame_____int_ *__value_;
};
class std___1___compressed_pair_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ : public std___1___compressed_pair_elem_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____1__true_ {
public:
};
class std___1___vector_base_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ : public std___1___vector_base_common_true_ {
public:
    std___1_pair_std____1__set_ORB_SLAM2__KeyFrame_____int_ *__begin_;
    std___1_pair_std____1__set_ORB_SLAM2__KeyFrame_____int_ *__end_;
    std___1___compressed_pair_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ __end_cap_;
};
class  std___1_vector_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___  : public std___1___vector_base_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ {
public:
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_ : public std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__get() noexcept ;
};
struct std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_(std::nullptr_t &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_unsigned_long__unsigned_long_ *const &__get() const noexcept ;
    std___1_pair_unsigned_long__unsigned_long_ *__value_;
};
class std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ : public std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_unsigned_long__unsigned_long_ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &second() noexcept ;
};
class std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ : public std___1___vector_base_common_true_ {
public:
    std___1_pair_unsigned_long__unsigned_long_ *__begin_;
    std___1_pair_unsigned_long__unsigned_long_ *__end_;
    std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ __end_cap_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_unsigned_long__unsigned_long_ *const &__end_cap() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void __destruct_at_end(std___1_pair_unsigned_long__unsigned_long_ *__new_last) noexcept ;
};
class  std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___  : public std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t capacity() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_pair_unsigned_long__unsigned_long_ &operator[](size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_pair_unsigned_long__unsigned_long_ *data() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __annotate_delete() const noexcept ;
};
std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept(std___1_integral_constant_bool__true_::value) {
}
std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::~std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept {
    this->__annotate_delete();
}
size_t std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::size() const noexcept {
    return static_cast<size_t>(this->__end_ - this->__begin_);
}
size_t std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::capacity() const noexcept {
    return this->std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::capacity();
}
inline std___1_pair_unsigned_long__unsigned_long_ &std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::operator[](size_t __n) noexcept {
    ((void)0);
    return this->__begin_[__n];
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_pair_unsigned_long__unsigned_long_ *std___1___to_address_std____1__pair_unsigned_long__unsigned_long__(std___1_pair_unsigned_long__unsigned_long_ *__p) noexcept ;

const std___1_pair_unsigned_long__unsigned_long_ *std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::data() const noexcept {
    return std___1___to_address_std____1__pair_unsigned_long__unsigned_long__(this->__begin_);
}
void std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::__annotate_contiguous_container(const void *__p1, const void *__p2, const void *__p3, const void *__p4) const noexcept {
}
void std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::__annotate_delete() const noexcept {
    this->__annotate_contiguous_container(this->data(), this->data() + this->capacity(), this->data() + this->size(), this->data() + this->capacity());
}
class std___1___save_flags {
};
extern "C" {
     extern void *memset(void *dest, int ch, size_t count) ;

     extern void *memcpy(void *dest, const void *src, size_t count) ;

     extern void *memmove(void *dest, const void *src, size_t count) ;

}
struct std___1___equal_to {
};
struct std___1___less {
};
struct std___1___less_unsigned_long__unsigned_long_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator()(const unsigned long &__x, const unsigned long &__y) const ;
};
constexpr bool std___1___less_unsigned_long__unsigned_long_::operator()(const unsigned long &__x, const unsigned long &__y) const {
    return __x < __y;
}
struct std___1___less_unsigned_long_____unsigned_long____;
struct std___1___less_char__char_;
struct std___1___less_char_____char____;
struct std___1___less_wchar_t__wchar_t_;
struct std___1___less_wchar_t_____wchar_t____;
struct std___1___less_signed_char_____signed_char____;
struct std___1___less_unsigned_char__unsigned_char_;
struct std___1___less_unsigned_char_____unsigned_char____;
struct std___1___less_short_____short____;
struct std___1___less_unsigned_short__unsigned_short_;
struct std___1___less_unsigned_short_____unsigned_short____;
struct std___1___less_int__int_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator()(const int &__x, const int &__y) const ;
};
constexpr bool std___1___less_int__int_::operator()(const int &__x, const int &__y) const {
    return __x < __y;
}
struct std___1___less_int_____int____;
struct std___1___less_unsigned_int_____unsigned_int____;
struct std___1___less_long_____long____;
struct std___1___less_long_long__long_long_;
struct std___1___less_long_long_____long_long____;
struct std___1___less_unsigned_long_long__unsigned_long_long_;
struct std___1___less_unsigned_long_long_____unsigned_long_long____;
struct std___1___less_float__float_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator()(const float &__x, const float &__y) const ;
};
constexpr bool std___1___less_float__float_::operator()(const float &__x, const float &__y) const {
    return __x < __y;
}
struct std___1___less_float_____float____;
struct std___1___less_double_____double____;
struct std___1___less_long_double__long_double_;
struct std___1___less_long_double_____long_double____;
struct std___1___less_char____char___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator()(char *const &__x, char *const &__y) const ;
};
constexpr bool std___1___less_char____char___::operator()(char *const &__x, char *const &__y) const {
    return __x < __y;
}
struct std___1_binary_function {
};
struct std___1_binary_function_unsigned_int__unsigned_int__bool_ {
};
struct std___1_binary_function_std____1__string__std____1__string__bool_ {
};
struct std___1_binary_function_std____1__pair_int__int___std____1__pair_int__int___bool_ {
};
struct std___1_binary_function_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint____bool_ {
};
struct std___1_binary_function_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame____bool_ {
};
struct std___1_binary_function_g2o__HyperGraph__Edge____g2o__HyperGraph__Edge____bool_ {
};
struct std___1_binary_function_int__int__bool_ {
};
struct std___1_binary_function_g2o__HyperGraph__Vertex____g2o__HyperGraph__Vertex____bool_ {
};
struct std___1_unary_function {
};
struct std___1_unary_function_int__unsigned_long_ {
};
struct std___1_unary_function_unsigned_int__unsigned_long_ {
};
struct std___1_pair;
struct std___1_pair_const_unsigned_int__double_ {
    const unsigned int first;
    double second;
};
struct std___1_pair_unsigned_int_____double____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___;
struct std___1_pair_const_unsigned_int__std____1__vector_unsigned_int__ {
    const unsigned int first;
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ second;
};
struct std___1_pair_unsigned_int_____std____1__vector_unsigned_int_____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___;
struct std___1_pair_unsigned_int____double___;
class cv_AutoBuffer_std____1__string__1UL_;
class cv_AutoBuffer_double__1UL_;
class cv_AutoBuffer_long__1UL_;
union cv_dnn_dnn4_v20201117_DictValue___unnamed33 {
    cv_AutoBuffer_long__1UL_ *pi;
    cv_AutoBuffer_double__1UL_ *pd;
    cv_AutoBuffer_std____1__string__1UL_ *ps;
    void *pv;
};

enum struct cv_Param : int {
    INT = 0,
    BOOLEAN = 1,
    REAL = 2,
    STRING = 3,
    MAT = 4,
    MAT_VECTOR = 5,
    ALGORITHM = 6,
    FLOAT = 7,
    UNSIGNED_INT = 8,
    UINT64 = 9,
    UCHAR = 11,
    SCALAR = 12
};

struct cv_dnn_dnn4_v20201117_DictValue {
    cv_Param type;
    cv_dnn_dnn4_v20201117_DictValue___unnamed33 __unnamed33;
};

struct std___1_pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue_ {
    const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ first;
    cv_dnn_dnn4_v20201117_DictValue second;
};
struct std___1_pair_std____1__string_____cv__dnn__dnn4_v20201117__DictValue____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___;
struct std___1_pair_cv__dnn__dnn4_v20201117__Backend__cv__dnn__dnn4_v20201117__Target_;
struct std___1_pair_int__float_;
struct std___1_pair_std____1__string____cv__dnn__dnn4_v20201117__DictValue___;
struct cvflann_anyimpl_base_any_policy;
struct cvflann_any {
    cvflann_anyimpl_base_any_policy *policy;
    void *object;
};

struct std___1_pair_const_std____1__string__cvflann__any_ {
    const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ first;
    cvflann_any second;
};
struct std___1_pair_std____1__string_____cvflann__any____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___;
struct std___1_pair_std____1__string____cvflann__any___;
struct std___1_pair_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________bool_;
struct std___1_pair_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______;
struct std___1_pair_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______;
struct std___1_pair_std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________bool_;
struct std___1_pair_std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________;
struct std___1_pair_std____1____hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________std____1____hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________;
struct std___1_pair_unsigned_int____std____1__vector_unsigned_int____;
struct std___1_pair_float__unsigned_int_ {
    float first;
    unsigned int second;
};
struct std___1_pair_cv__Rect__int___int_;
struct std___1_pair_cv__UMat__unsigned_char_;
struct std___1_pair_std____1____tree_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long___std____1____tree_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long___std____1____tree_const_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long___std____1____tree_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long___std____1____tree_const_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long___std____1____tree_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long___std____1____tree_const_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long___bool_;
struct std___1_pair_ORB_SLAM2__KeyFrame______unsigned_long____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___;
struct std___1_pair_ORB_SLAM2__KeyFrame______int____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___;
struct std___1_pair_std____1____tree_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long___std____1____tree_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long___std____1____tree_const_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long___bool_;
struct std___1_pair_int_____g2o__HyperGraph__Vertex_____;
struct std___1_pair_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________bool_;
struct std___1_pair_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
struct std___1_pair_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
struct std___1_pair_std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________bool_;
struct std___1_pair_std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________std____1____hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________;
struct std___1_pair_std____1____hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________std____1____hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________;
struct std___1_pair_const_int__g2o__Parameter___;
struct std___1_pair_int_____g2o__Parameter_____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___;
struct std___1_pair_const_std____1__string__std____1__string_;
struct std___1_pair_std____1__string_____std____1__string____;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long__;
struct std___1_pair_std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long__;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long____bool_;
struct std___1_pair_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long____std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___;
struct std___1_pair_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long____std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___;
struct std___1_pair_std____1____tree_iterator_int__std____1____tree_node_int__void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_int__std____1____tree_node_int__void_______long___std____1____tree_iterator_int__std____1____tree_node_int__void_______long__;
struct std___1_pair_std____1____tree_const_iterator_int__std____1____tree_node_int__void_______long___std____1____tree_const_iterator_int__std____1____tree_node_int__void_______long__;
struct std___1_pair_std____1____tree_const_iterator_int__std____1____tree_node_int__void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long___bool_;
struct std___1_pair_std____1____tree_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long___std____1____tree_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long___std____1____tree_const_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long__;
struct std___1_pair_std____1____tree_const_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long___bool_;
struct std___1_pair_std____1__set_ORB_SLAM2__KeyFrame_____int_;
struct std___1_pair_ORB_SLAM2__KeyFrame__const__g2o__Sim3_;
struct std___1_pair_ORB_SLAM2__KeyFrame__const__std____1__set_ORB_SLAM2__KeyFrame____;
struct std___1_pair_ORB_SLAM2__KeyFrame_____unsigned_long___;
struct std___1_pair_int____g2o__HyperGraph__Vertex____;
struct std___1_pair_ORB_SLAM2__KeyFrame_____int___;
struct std___1_hash;
struct std___1_hash_std____1__vector_bool__;
struct std___1_integral_constant {
};
struct std___1__MetaBase;
struct std___1__MetaBase_true_ {
};
struct std___1___void_t {
};
struct std___1___identity {
};
struct std___1___identity_void_____void____;
struct std___1___identity_std____1__less_unsigned_int__ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_unsigned_int__double___ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____ {
};
struct std___1___identity_std____1__allocator_int__ {
};
struct std___1___identity_int_____TFILE____;
struct std___1___identity_std____1__less_std____1__string__ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_std____1__string__cvflann__any___ {
};
struct std___1___identity_std____1__hash_unsigned_int__ {
};
struct std___1___identity_std____1__equal_to_unsigned_int__ {
};
struct std___1___identity_std____1__allocator_std____1__pair_int__int___ {
};
struct std___1___identity_std____1__allocator_ORB_SLAM2__MapPoint____ {
};
struct std___1___identity_std____1__allocator_ORB_SLAM2__KeyFrame____ {
};
struct std___1___identity_std____1__less_ORB_SLAM2__KeyFrame____ {
};
struct std___1___identity_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ {
};
struct std___1___identity_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___ {
};
struct std___1___identity_std____1__allocator_g2o__HyperGraph__Edge____ {
};
struct std___1___identity_std____1__allocator_g2o__HyperGraph__Vertex____ {
};
struct std___1___identity_std____1__hash_int__ {
};
struct std___1___identity_std____1__equal_to_int__ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____ {
};
struct std___1___identity_std____1__less_int__ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_int__g2o__Parameter_____ {
};
struct std___1___identity_std____1__allocator_std____1__pair_const_std____1__string__std____1__string___ {
};
struct std___1___dependent_type {
};
struct std___1___unique_ptr_deleter_sfinae_void_____void____ {
};
struct std___1___dependent_type_std____1____unique_ptr_deleter_sfinae_void_____void______true_ : public std___1___unique_ptr_deleter_sfinae_void_____void____ {
};
struct std___1___unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1___dependent_type_std____1____unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void________true_ : public std___1___unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1___unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1___dependent_type_std____1____unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void________true_ : public std___1___unique_ptr_deleter_sfinae_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_conditional {
};
struct std___1_conditional_false__std____1__pointer_traits_char_______nat__char_ {
};
struct std___1_conditional_false__const_unsigned_long____unsigned_long___ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_base_void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_unsigned_int__double___void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______ {
};
struct std___1_conditional_true__std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
};
struct std___1_conditional_true__std____1____list_node_base_cv__detail__GraphEdge__void_______std____1____list_node_cv__detail__GraphEdge__void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1__pair_int__int___void______ {
};
struct std___1_conditional_true__std____1____list_node_base_ORB_SLAM2__ExtractorNode__void_______std____1____list_node_ORB_SLAM2__ExtractorNode__void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______ {
};
struct std___1_conditional_true__std____1____list_node_base_cv__Mat__void_______std____1____list_node_cv__Mat__void______ {
};
struct std___1_conditional_true__std____1____list_node_base_ORB_SLAM2__KeyFrame____void_______std____1____list_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1_conditional_false__std____1__pointer_traits_std____1____list_node_base_ORB_SLAM2__KeyFrame____void__________nat__std____1____list_node_base_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1_conditional_true__std____1____list_node_base_double__void_______std____1____list_node_double__void______ {
};
struct std___1_conditional_true__std____1____list_node_base_bool__void_______std____1____list_node_bool__void______ {
};
struct std___1_conditional_true__std____1____list_node_base_ORB_SLAM2__MapPoint____void_______std____1____list_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_conditional_false__std____1__pointer_traits_std____1____list_node_base_ORB_SLAM2__MapPoint____void__________nat__std____1____list_node_base_ORB_SLAM2__MapPoint____void____ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_g2o__HyperGraph__Edge____void______ {
};
struct std___1_conditional_true__std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ {
};
struct std___1_conditional_false__std____1__pointer_traits_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____________nat__std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_int__void______ {
};
struct std___1_conditional_true__std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_g2o__HyperGraph__Vertex____void______ {
};
struct std___1_conditional_false__std____1__pointer_traits_const_char_______nat__const_char_ {
};
struct std___1_conditional_false__std____1__pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_____________nat__std____1____tree_end_node_std____1____tree_node_base_void_______ {
};
struct std___1_conditional_false__std____1__pointer_traits_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long________nat__const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__ {
};
struct std___1_conditional_false__std____1__pointer_traits_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long________nat__const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ {
};
struct std___1_enable_if {
};
struct std___1_enable_if_true__void_ {
};
struct std___1_enable_if_true__char___ {
};
struct std___1_is_same {
};
struct std___1_is_same_char__char_ : std___1_integral_constant_bool__true_ {
};
struct std___1___two {
    char __lx[2];
};

struct std___1_remove_const {
};
struct std___1_remove_const_long_ {
};
struct std___1_remove_const_unsigned_long_ {
};
struct std___1_remove_const_unsigned_long_long_ {
};
struct std___1_remove_const_float_ {
};
struct std___1_remove_const_double_ {
};
struct std___1_remove_const_const_char_ {
};
struct std___1_remove_volatile {
};
struct std___1_remove_volatile_long_ {
};
struct std___1_remove_volatile_unsigned_long_ {
};
struct std___1_remove_volatile_unsigned_long_long_ {
};
struct std___1_remove_volatile_float_ {
};
struct std___1_remove_volatile_double_ {
};
struct std___1_remove_cv {
};
struct std___1_remove_cv_long_ {
};
struct std___1_remove_cv_unsigned_long_ {
};
struct std___1_remove_cv_unsigned_long_long_ {
};
struct std___1_remove_cv_float_ {
};
struct std___1_remove_cv_double_ {
};
struct std___1_is_void {
};
struct std___1_is_void_char_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_wchar_t_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_char16_t_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_char32_t_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_unsigned_int__double__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_unsigned_int__double__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_unsigned_int__double___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_unsigned_int__std____1__vector_unsigned_int___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_int_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_unsigned_char_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_unsigned_long_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Mat_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__UMat_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_bool_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__DMatch_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__KeyPoint_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_double_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_unsigned_int_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__vector_unsigned_int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_std____1__string__cvflann__any__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_std____1__string__cvflann__any__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Point__int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_float_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Rect__int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__DetectionBasedTracker__TrackedObject_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_int__int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Size__int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1__pair_int__int___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__detail__ImageFeatures_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__detail__MatchesInfo_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__detail__CameraParams_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_ORB_SLAM2__ExtractorNode_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_ORB_SLAM2__ExtractorNode__void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_ORB_SLAM2__MapPoint___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_ORB_SLAM2__KeyFrame___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_ORB_SLAM2__MapPoint____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__list_ORB_SLAM2__KeyFrame____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__vector_std____1__vector_unsigned_long___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_ORB_SLAM2__KeyFrame__const__int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_ORB_SLAM2__KeyFrame____int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__vector_unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Point__float__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_cv__Point3__float__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_cv__Mat__void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_ORB_SLAM2__KeyFrame____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_base_ORB_SLAM2__KeyFrame____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_double__void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_bool__void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_ORB_SLAM2__MapPoint____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____list_node_base_ORB_SLAM2__MapPoint____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_g2o__HyperGraph__Edge___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_g2o__HyperGraph__Edge____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_g2o__HyperGraph__Vertex___ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_int__g2o__HyperGraph__Vertex____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_int__g2o__Parameter____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_int__g2o__Parameter____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_const_std____1__string__std____1__string__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____value_type_std____1__string__std____1__string__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_int__void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_node_g2o__HyperGraph__Vertex____void____ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1__pair_unsigned_long__unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_const_char_ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_std____1____tree_end_node_std____1____tree_node_base_void_______ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_void_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ : std___1_integral_constant_bool__false_ {
};
struct std___1_is_integral {
};
struct std___1___libcpp_is_floating_point {
};
struct std___1_is_floating_point {
};
struct std___1_is_pointer {
};
struct std___1_is_pointer_std____1____tree_end_node_std____1____tree_node_base_void_________ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_unsigned_int__double___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_void___ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1__pair_int__int___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_ORB_SLAM2__MapPoint____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_ORB_SLAM2__KeyFrame____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_g2o__HyperGraph__Edge____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_int__void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_pointer_std____1____tree_node_g2o__HyperGraph__Vertex____void______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_enum {
};
struct std___1_is_enum_cv__AccessFlag_ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_enum_cv___InputArray__KindFlag_ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_enum_cv__UMatData__MemoryFlag_ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_arithmetic {
};
struct std___1___is_referenceable_impl {
};

struct std___1___is_referenceable {
};
struct std___1_add_const {
};
struct std___1_add_const_char_ {
};
struct std___1_remove_reference {
};
struct std___1_remove_reference_int_ {
};
struct std___1_remove_reference_std____1__allocator_ORB_SLAM2__MapPoint____ {
};
struct std___1_remove_reference_std____1__allocator_ORB_SLAM2__KeyFrame____ {
};
struct std___1_remove_reference_std____1____default_init_tag_ {
};
struct std___1_remove_reference_std____1____compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char_____ {
};
struct std___1_remove_reference_int___ {
};
struct std___1_remove_reference_std__nullptr_t_ {
};
struct std___1_remove_reference_std____1__allocator_int____ {
};
struct std___1_remove_reference_const_unsigned_int___ {
};
struct std___1_remove_reference_std____1__allocator_unsigned_int____ {
};
struct std___1_remove_reference_unsigned_int___ {
};
struct std___1_remove_reference_unsigned_int_ {
};
struct std___1_remove_reference_unsigned_int____ {
};
struct std___1_remove_reference_int____ {
};
struct std___1_remove_reference_float___ {
};
struct std___1_remove_reference_const_int___ {
};
struct std___1_remove_reference_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1_remove_reference_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void________ {
};
struct std___1_remove_reference_std____1____list_node_ORB_SLAM2__KeyFrame____void_______ {
};
struct std___1_remove_reference_std____1____list_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1_remove_reference_ORB_SLAM2__KeyFrame__const___ {
};
struct std___1_remove_reference_std____1__allocator_ORB_SLAM2__MapPoint______ {
};
struct std___1_remove_reference_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_remove_reference_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void________ {
};
struct std___1_remove_reference_std____1____list_node_ORB_SLAM2__MapPoint____void_______ {
};
struct std___1_remove_reference_std____1____list_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_remove_reference_ORB_SLAM2__MapPoint__const___ {
};
struct std___1_remove_reference_std____1__allocator_ORB_SLAM2__KeyFrame______ {
};
struct std___1_remove_reference_cv__Mat__float____ {
};
struct std___1_remove_reference_ORB_SLAM2__KeyFrame_____ {
};
struct std___1_remove_reference_ORB_SLAM2__MapPoint_____ {
};
struct std___1_remove_reference_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long______ {
};
struct std___1_remove_reference_std____1____tree_end_node_std____1____tree_node_base_void__________ {
};
struct std___1_remove_reference_std____1____compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void________ {
};
struct std___1_remove_reference_std____1____compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_____ {
};
struct std___1___add_lvalue_reference_impl {
};
struct std___1___add_lvalue_reference_impl_char__true_ {
};
struct std___1___add_lvalue_reference_impl_int____true_ {
};
struct std___1___add_lvalue_reference_impl_std____1__allocator_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___add_lvalue_reference_impl_const_char__true_ {
};
struct std___1___add_lvalue_reference_impl_unsigned_int____true_ {
};
struct std___1___add_lvalue_reference_impl_ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___add_lvalue_reference_impl_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1_add_lvalue_reference {
};
struct std___1_add_lvalue_reference_char_ {
};
struct std___1_add_lvalue_reference_int___ {
};
struct std___1_add_lvalue_reference_std____1__allocator_ORB_SLAM2__MapPoint____ {
};
struct std___1_add_lvalue_reference_const_char_ {
};
struct std___1_add_lvalue_reference_unsigned_int___ {
};
struct std___1_add_lvalue_reference_ORB_SLAM2__KeyFrame____ {
};
struct std___1_add_lvalue_reference_ORB_SLAM2__MapPoint____ {
};
struct std___1___add_rvalue_reference_impl {
};
struct std___1___add_rvalue_reference_impl_std____1__allocator_char___true_ {
};
struct std___1___add_rvalue_reference_impl_int____true_ {
};
struct std___1___add_rvalue_reference_impl_std____1__allocator_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___add_rvalue_reference_impl_std____1__allocator_ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___add_rvalue_reference_impl_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____true_ {
};
struct std___1___add_rvalue_reference_impl_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______true_ {
};
struct std___1___add_rvalue_reference_impl_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___true_ {
};
struct std___1___add_rvalue_reference_impl_unsigned_int____true_ {
};
struct std___1___add_rvalue_reference_impl_ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___add_rvalue_reference_impl_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1_add_rvalue_reference {
};
struct std___1_add_rvalue_reference_std____1__allocator_char__ {
};
struct std___1_add_rvalue_reference_int___ {
};
struct std___1_add_rvalue_reference_std____1__allocator_ORB_SLAM2__MapPoint____ {
};
struct std___1_add_rvalue_reference_std____1__allocator_ORB_SLAM2__KeyFrame____ {
};
struct std___1_add_rvalue_reference_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____ {
};
struct std___1_add_rvalue_reference_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ {
};
struct std___1_add_rvalue_reference_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ {
};
struct std___1_add_rvalue_reference_unsigned_int___ {
};
struct std___1_add_rvalue_reference_ORB_SLAM2__KeyFrame____ {
};
struct std___1_add_rvalue_reference_ORB_SLAM2__MapPoint____ {
};
 __attribute__((linkage("linkonce_odr"))) const char *&&std___1___declval_const_char___(int __p1) ;

 __attribute__((linkage("linkonce_odr"))) char *&&std___1___declval_char___(int __p1) ;

 __attribute__((linkage("linkonce_odr"))) decltype(std___1___declval_const_char___(0)) std___1_declval_const_char___() noexcept ;

 __attribute__((linkage("linkonce_odr"))) decltype(std___1___declval_char___(0)) std___1_declval_char___() noexcept ;

struct std___1___uncvref {
};
struct std___1___is_same_uncvref {
};
struct std___1_decay {
};
struct std___1___libcpp_is_final {
};
struct std___1_is_base_of {
};
struct std___1_is_convertible {
};
struct std___1_is_convertible_void__void_;
struct std___1_is_convertible_unsigned_int____const_unsigned_int___ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_convertible_double__void_;
struct std___1_is_convertible_std____1__random_access_iterator_tag__std____1__random_access_iterator_tag_ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_convertible_bool__void_;
struct std___1_is_convertible_std____1__string____std____1__string____;
struct std___1_is_convertible_std____1__tuple_std____1__string______std____1__string____;
struct std___1_is_convertible_const_std____1__tuple_std____1__string________std____1__string____;
struct std___1_is_convertible_std____1__string_____std____1__string____;
struct std___1_is_convertible_unsigned_long__void_;
struct std___1_is_empty {
};
struct std___1___numeric_type {
};
class std___1___promote_imp {
};
class std___1___promote {
};
struct std___1_make_unsigned {
};
struct std___1_common_type;
struct std___1_is_assignable {
};
struct std___1_is_assignable_int_____int_____ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_assignable_unsigned_int_____unsigned_int_____ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_assignable_ORB_SLAM2__KeyFrame______ORB_SLAM2__KeyFrame______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_assignable_ORB_SLAM2__MapPoint______ORB_SLAM2__MapPoint______ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_move_assignable {
};
struct std___1_is_move_assignable_int___ : public std___1_is_assignable_int_____int_____ {
};
struct std___1_is_move_assignable_unsigned_int___ : public std___1_is_assignable_unsigned_int_____unsigned_int_____ {
};
struct std___1_is_move_assignable_ORB_SLAM2__KeyFrame____ : public std___1_is_assignable_ORB_SLAM2__KeyFrame______ORB_SLAM2__KeyFrame______ {
};
struct std___1_is_move_assignable_ORB_SLAM2__MapPoint____ : public std___1_is_assignable_ORB_SLAM2__MapPoint______ORB_SLAM2__MapPoint______ {
};
struct std___1_is_constructible {
};
struct std___1_is_constructible_int____int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_constructible_std____1__string_____const_std____1____tuple_leaf_0__std____1__string_____false____;
struct std___1_is_constructible_std____1__string_____std____1____tuple_leaf_0__std____1__string_____false__;
struct std___1_is_constructible_std____1__string_____std____1__tuple_std____1__string_____;
struct std___1_is_constructible_std____1__string_____const_std____1__tuple_std____1__string_______;
struct std___1_is_constructible_std____1__string_____std____1__string____;
struct std___1_is_constructible_unsigned_int____unsigned_int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_constructible_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_constructible_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_copy_constructible {
};
struct std___1_is_move_constructible {
};
struct std___1_is_move_constructible_int___ : public std___1_is_constructible_int____int_____ {
};
struct std___1_is_move_constructible_std____1__string____;
struct std___1_is_move_constructible_unsigned_int___ : public std___1_is_constructible_unsigned_int____unsigned_int_____ {
};
struct std___1_is_move_constructible_ORB_SLAM2__KeyFrame____ : public std___1_is_constructible_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame______ {
};
struct std___1_is_move_constructible_ORB_SLAM2__MapPoint____ : public std___1_is_constructible_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint______ {
};
struct std___1_is_trivially_constructible {
};
struct std___1_is_trivially_copy_constructible {
};
struct std___1_is_trivially_move_constructible {
};
struct std___1_is_trivially_assignable {
};
struct std___1_is_trivially_assignable_char____const_char___ : std___1_integral_constant_bool__true_ {
};
struct std___1_is_trivially_copy_assignable {
};
struct std___1_is_trivially_copy_assignable_char_ : public std___1_is_trivially_assignable_char____const_char___ {
};
struct std___1_is_trivially_move_assignable {
};
struct std___1_is_nothrow_constructible {
};
struct std___1_is_nothrow_constructible_std____1__allocator_char___std____1__allocator_char_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_char__ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_int__ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_std____1__vector_unsigned_int___ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_unsigned_int__ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_int____int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint_______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame_______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__KeyFrame____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void________ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_unsigned_int____unsigned_int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_constructible_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_default_constructible {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_char__ : public std___1_is_nothrow_constructible_std____1__allocator_char__ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_int__ : public std___1_is_nothrow_constructible_std____1__allocator_int__ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_std____1__vector_unsigned_int___ : public std___1_is_nothrow_constructible_std____1__allocator_std____1__vector_unsigned_int___ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_unsigned_int__ : public std___1_is_nothrow_constructible_std____1__allocator_unsigned_int__ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ : public std___1_is_nothrow_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ : public std___1_is_nothrow_constructible_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ : public std___1_is_nothrow_constructible_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_ORB_SLAM2__KeyFrame____ : public std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__KeyFrame____ {
};
struct std___1_is_nothrow_default_constructible_std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__MapPoint____ {
};
struct std___1_is_nothrow_move_constructible {
};
struct std___1_is_nothrow_move_constructible_std____1__allocator_char__ : public std___1_is_nothrow_constructible_std____1__allocator_char___std____1__allocator_char_____ {
};
struct std___1_is_nothrow_move_constructible_int___ : public std___1_is_nothrow_constructible_int____int_____ {
};
struct std___1_is_nothrow_move_constructible_std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint_______ {
};
struct std___1_is_nothrow_move_constructible_std____1__allocator_ORB_SLAM2__KeyFrame____ : public std___1_is_nothrow_constructible_std____1__allocator_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame_______ {
};
struct std___1_is_nothrow_move_constructible_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____ : public std___1_is_nothrow_constructible_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_______ {
};
struct std___1_is_nothrow_move_constructible_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ : public std___1_is_nothrow_constructible_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void________ {
};
struct std___1_is_nothrow_move_constructible_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ : public std___1_is_nothrow_constructible_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_____ {
};
struct std___1_is_nothrow_move_constructible_unsigned_int___ : public std___1_is_nothrow_constructible_unsigned_int____unsigned_int_____ {
};
struct std___1_is_nothrow_move_constructible_ORB_SLAM2__KeyFrame____ : public std___1_is_nothrow_constructible_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame______ {
};
struct std___1_is_nothrow_move_constructible_ORB_SLAM2__MapPoint____ : public std___1_is_nothrow_constructible_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint______ {
};
struct std___1_is_nothrow_assignable {
};
struct std___1_is_nothrow_assignable_int_____int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_assignable_std____1__allocator_ORB_SLAM2__MapPoint_______std____1__allocator_ORB_SLAM2__MapPoint_______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_assignable_unsigned_int_____unsigned_int_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_assignable_ORB_SLAM2__KeyFrame______ORB_SLAM2__KeyFrame______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_assignable_ORB_SLAM2__MapPoint______ORB_SLAM2__MapPoint______ : public std___1_integral_constant_bool__true_ {
};
struct std___1_is_nothrow_move_assignable {
};
struct std___1_is_nothrow_move_assignable_int___ : public std___1_is_nothrow_assignable_int_____int_____ {
};
struct std___1_is_nothrow_move_assignable_std____1__allocator_ORB_SLAM2__MapPoint____ : public std___1_is_nothrow_assignable_std____1__allocator_ORB_SLAM2__MapPoint_______std____1__allocator_ORB_SLAM2__MapPoint_______ {
};
struct std___1_is_nothrow_move_assignable_unsigned_int___ : public std___1_is_nothrow_assignable_unsigned_int_____unsigned_int_____ {
};
struct std___1_is_nothrow_move_assignable_ORB_SLAM2__KeyFrame____ : public std___1_is_nothrow_assignable_ORB_SLAM2__KeyFrame______ORB_SLAM2__KeyFrame______ {
};
struct std___1_is_nothrow_move_assignable_ORB_SLAM2__MapPoint____ : public std___1_is_nothrow_assignable_ORB_SLAM2__MapPoint______ORB_SLAM2__MapPoint______ {
};
struct std___1___is_swappable;
struct std___1___is_nothrow_swappable;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_int___(int *&__x, int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_unsigned_int___(unsigned int *&__x, unsigned int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__KeyFrame____(ORB_SLAM2_KeyFrame **&__x, ORB_SLAM2_KeyFrame **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__MapPoint____(ORB_SLAM2_MapPoint **&__x, ORB_SLAM2_MapPoint **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;

struct std___1___detail___swappable_with {
};
struct std___1___detail___nothrow_swappable_with {
};
struct std___1___is_swappable1 {
};
struct std___1___is_nothrow_swappable1 {
};
struct std___1___underlying_type_impl;
struct std___1___underlying_type_impl_cv__AccessFlag__true_ {
};
struct std___1___underlying_type_impl_cv___InputArray__KindFlag__true_ {
};
struct std___1___underlying_type_impl_cv__UMatData__MemoryFlag__true_ {
};
struct std___1_underlying_type {
};
struct std___1_underlying_type_cv__AccessFlag_ : std___1___underlying_type_impl_cv__AccessFlag__true_ {
};
struct std___1_underlying_type_cv___InputArray__KindFlag_ : std___1___underlying_type_impl_cv___InputArray__KindFlag__true_ {
};
struct std___1_underlying_type_cv__UMatData__MemoryFlag_ : std___1___underlying_type_impl_cv__UMatData__MemoryFlag__true_ {
};
struct std___1___sfinae_underlying_type {
};
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr int std___1___convert_to_integral(int __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int std___1___convert_to_integral1(unsigned int __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr long std___1___convert_to_integral2(long __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned long std___1___convert_to_integral3(unsigned long __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr long long std___1___convert_to_integral4(long long __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned long long std___1___convert_to_integral5(unsigned long long __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr __int128_t std___1___convert_to_integral6(__int128_t __val)  {
    return __val;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr __uint128_t std___1___convert_to_integral7(__uint128_t __val)  {
    return __val;
}
 __attribute__((linkage("linkonce_odr"))) inline constexpr bool std___1___libcpp_is_constant_evaluated() noexcept  {
    return false;
}
constexpr bool std___1_integral_constant_bool__false_::value __attribute__((linkage("linkonce_odr"))) ;

constexpr bool std___1_integral_constant_bool__true_::value __attribute__((linkage("linkonce_odr"))) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___default_init_tag &&std___1_forward_std____1____default_init_tag_(std___1___default_init_tag &__t) noexcept  {
    return static_cast<std___1___default_init_tag &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr int &&std___1_forward_int_(int &__t) noexcept  {
    return static_cast<int &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std::nullptr_t &&std___1_forward_std__nullptr_t_(std::nullptr_t &__t) noexcept  {
    return static_cast<std::nullptr_t &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_int_ &std___1_forward_std____1__allocator_int____(std___1_allocator_int_ &__t) noexcept  {
    return static_cast<std___1_allocator_int_ &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int &&std___1_forward_unsigned_int_(unsigned int &__t) noexcept  {
    return static_cast<unsigned int &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_unsigned_int_ &std___1_forward_std____1__allocator_unsigned_int____(std___1_allocator_unsigned_int_ &__t) noexcept  {
    return static_cast<std___1_allocator_unsigned_int_ &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const unsigned int &std___1_forward_const_unsigned_int___(const unsigned int &__t) noexcept  {
    return static_cast<const unsigned int &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const int &std___1_forward_const_int___(const int &__t) noexcept  {
    return static_cast<const int &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void_______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__t) noexcept  {
    return static_cast<std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&>(__t);
}
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &__t) noexcept  {
    return static_cast<std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__t) noexcept  {
    return static_cast<std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_KeyFrame *const &std___1_forward_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const &__t) noexcept  {
    return static_cast<ORB_SLAM2_KeyFrame *const &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__MapPoint___ &&std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint____(std___1_allocator_ORB_SLAM2__MapPoint___ &__t) noexcept  {
    return static_cast<std___1_allocator_ORB_SLAM2__MapPoint___ &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___list_node_ORB_SLAM2__MapPoint____void___ *&std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void_______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__t) noexcept  {
    return static_cast<std___1___list_node_ORB_SLAM2__MapPoint____void___ *&>(__t);
}
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &__t) noexcept  {
    return static_cast<std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__t) noexcept  {
    return static_cast<std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_MapPoint *const &std___1_forward_ORB_SLAM2__MapPoint__const___(ORB_SLAM2_MapPoint *const &__t) noexcept  {
    return static_cast<ORB_SLAM2_MapPoint *const &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__KeyFrame___ &&std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_allocator_ORB_SLAM2__KeyFrame___ &__t) noexcept  {
    return static_cast<std___1_allocator_ORB_SLAM2__KeyFrame___ &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame______(std___1_allocator_ORB_SLAM2__KeyFrame___ &__t) noexcept  {
    return static_cast<std___1_allocator_ORB_SLAM2__KeyFrame___ &>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__MapPoint___ &std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint______(std___1_allocator_ORB_SLAM2__MapPoint___ &__t) noexcept  {
    return static_cast<std___1_allocator_ORB_SLAM2__MapPoint___ &>(__t);
}
struct std___1_equal_to {
};
struct std___1_equal_to_unsigned_int_ : std___1_binary_function_unsigned_int__unsigned_int__bool_ {
};
struct std___1_equal_to_int_ : std___1_binary_function_int__int__bool_ {
};
struct std___1_equal_to_long_;
struct std___1_equal_to_bool_;
struct std___1_less {
};
struct std___1_less_unsigned_int_ : std___1_binary_function_unsigned_int__unsigned_int__bool_ {
};
struct std___1_less_std____1__string_ : std___1_binary_function_std____1__string__std____1__string__bool_ {
};
struct std___1_less_std____1__pair_int__int__ : std___1_binary_function_std____1__pair_int__int___std____1__pair_int__int___bool_ {
};
struct std___1_less_ORB_SLAM2__MapPoint___ : std___1_binary_function_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint____bool_ {
};
struct std___1_less_ORB_SLAM2__KeyFrame___ : std___1_binary_function_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame____bool_ {
};
struct std___1_less_g2o__HyperGraph__Edge___ : std___1_binary_function_g2o__HyperGraph__Edge____g2o__HyperGraph__Edge____bool_ {
};
struct std___1_less_g2o__HyperGraph__Vertex___ : std___1_binary_function_g2o__HyperGraph__Vertex____g2o__HyperGraph__Vertex____bool_ {
};
struct std___1_less_int_ : std___1_binary_function_int__int__bool_ {
};
struct std___1_less_g2o__HyperGraphAction___;
struct __attribute__((type_visibility("default")))  std___1_less_void_  {
};
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1_addressof_char_(char &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const char *std___1_addressof_const_char_(const char &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___tree_end_node_std____1____tree_node_base_void______ *std___1_addressof_std____1____tree_end_node_std____1____tree_node_base_void_______(std___1___tree_end_node_std____1____tree_node_base_void______ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *std___1_addressof_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_pair_const_int__g2o__HyperGraph__Vertex___ *std___1_addressof_std____1__pair_const_int__g2o__HyperGraph__Vertex____(std___1_pair_const_int__g2o__HyperGraph__Vertex___ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline g2o_HyperGraph_Edge **std___1_addressof_g2o__HyperGraph__Edge___(g2o_HyperGraph_Edge *&__x) noexcept  {
    return __builtin_addressof(__x);
}
class std___1_mutex;
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_mutex *std___1_addressof_std____1__mutex_(std___1_mutex &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1_addressof_std____1____list_node_base_ORB_SLAM2__KeyFrame____void____(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1_addressof_std____1____list_node_base_ORB_SLAM2__MapPoint____void____(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline ORB_SLAM2_KeyFrame **std___1_addressof_ORB_SLAM2__KeyFrame___(ORB_SLAM2_KeyFrame *&__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline ORB_SLAM2_MapPoint **std___1_addressof_ORB_SLAM2__MapPoint___(ORB_SLAM2_MapPoint *&__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_pair_ORB_SLAM2__KeyFrame__const__int_ *std___1_addressof_std____1__pair_ORB_SLAM2__KeyFrame__const__int__(std___1_pair_ORB_SLAM2__KeyFrame__const__int_ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *std___1_addressof_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__(std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *std___1_addressof_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__(const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__x) noexcept  {
    return __builtin_addressof(__x);
}
 __attribute__((no_sanitize("cfi"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ *std___1_addressof_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__(const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ &__x) noexcept  {
    return __builtin_addressof(__x);
}
extern "C" {
}
class __attribute__((visibility("default")))  std_exception  {
public:
    virtual ~std_exception() noexcept;
    virtual const char *what() const noexcept;
};

 __attribute__((visibility("default"))) bool std_uncaught_exception() noexcept ;

struct __attribute__((visibility("default")))  std_nothrow_t  {
};

 [[noreturn]] __attribute__((visibility("default"))) void std___throw_bad_alloc() ;

enum class __attribute__((type_visibility("default")))  std_align_val_t : size_t {
};

 __attribute__((visibility("default"))) void operator delete(void *__p, const std_nothrow_t &__p2) noexcept ;

 __attribute__((visibility("default"))) void operator delete(void *__p, size_t __sz) noexcept ;

 __attribute__((visibility("default"))) void operator delete(void *__p, std_align_val_t __p2) noexcept ;

 __attribute__((visibility("default"))) void operator delete(void *__p, std_align_val_t __p2, const std_nothrow_t &__p3) noexcept ;

 __attribute__((visibility("default"))) void operator delete(void *__p, size_t __sz, std_align_val_t __p3) noexcept ;

 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void *operator new(size_t __p1, void *__p) noexcept  {
    return __p;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void operator delete(void *__p1, void *__p2) noexcept  {
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void *std___1___libcpp_operator_new_unsigned_long_(unsigned long __args)  {
    return __builtin_operator_new(__args);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___libcpp_operator_delete_void___(void *__args)  {
    __builtin_operator_delete(__args);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void *std___1___libcpp_allocate(size_t __size, size_t __align)  {
    (void)__align;
    return std___1___libcpp_operator_new_unsigned_long_(__size);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___do_deallocate_handle_size__(void *__ptr, size_t __size)  {
    (void)__size;
    return std___1___libcpp_operator_delete_void___(__ptr);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1___libcpp_deallocate(void *__ptr, size_t __size, size_t __align)  {
    (void)__align;
    return std___1___do_deallocate_handle_size__(__ptr, __size);
}
extern "C" {
}
extern "C" {
}
extern "C" {
    typedef unsigned long uint64_t;

}
struct std___type_info_implementations___string_impl_base {
};

struct std___type_info_implementations___unique_impl : std___type_info_implementations___string_impl_base {
};

struct std___type_info_implementations {
};

struct std___1___make_tuple_indices {
};
class std___1_tuple;
struct std___1_array;
struct std___1___all_dummy;
struct std___1___all_dummy_true__true_;
struct std___1___all_dummy_true_;
struct std___1___all_dummy__;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ &&std___1_move_std____1____compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char_____(std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ &__t) noexcept  {
    typedef std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr int &&std___1_move_int___(int &__t) noexcept  {
    typedef int _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int &&std___1_move_unsigned_int___(unsigned int &__t) noexcept  {
    typedef unsigned int _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr unsigned int *&&std___1_move_unsigned_int____(unsigned int *&__t) noexcept  {
    typedef unsigned int *_Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr int *&&std___1_move_int____(int *&__t) noexcept  {
    typedef int *_Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr float &&std___1_move_float___(float &__t) noexcept  {
    typedef float _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&std___1_move_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void________(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &__t) noexcept  {
    typedef std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__MapPoint___ &&std___1_move_std____1__allocator_ORB_SLAM2__MapPoint______(std___1_allocator_ORB_SLAM2__MapPoint___ &__t) noexcept  {
    typedef std___1_allocator_ORB_SLAM2__MapPoint___ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&std___1_move_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void________(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &__t) noexcept  {
    typedef std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1_allocator_ORB_SLAM2__KeyFrame___ &&std___1_move_std____1__allocator_ORB_SLAM2__KeyFrame______(std___1_allocator_ORB_SLAM2__KeyFrame___ &__t) noexcept  {
    typedef std___1_allocator_ORB_SLAM2__KeyFrame___ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
class cv_Mat__float_;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr cv_Mat__float_ &&std___1_move_cv__Mat__float____(cv_Mat__float_ &__t) noexcept  {
    typedef cv_Mat__float_ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_KeyFrame **&&std___1_move_ORB_SLAM2__KeyFrame_____(ORB_SLAM2_KeyFrame **&__t) noexcept  {
    typedef ORB_SLAM2_KeyFrame **_Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr ORB_SLAM2_MapPoint **&&std___1_move_ORB_SLAM2__MapPoint_____(ORB_SLAM2_MapPoint **&__t) noexcept  {
    typedef ORB_SLAM2_MapPoint **_Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
class std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ &&std___1_move_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long______(std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ &__t) noexcept  {
    typedef std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___tree_end_node_std____1____tree_node_base_void______ *&&std___1_move_std____1____tree_end_node_std____1____tree_node_base_void__________(std___1___tree_end_node_std____1____tree_node_base_void______ *&__t) noexcept  {
    typedef std___1___tree_end_node_std____1____tree_node_base_void______ *_Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ &&std___1_move_std____1____compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void________(std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ &__t) noexcept  {
    typedef std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ &&std___1_move_std____1____compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_____(std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ &__t) noexcept  {
    typedef std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ _Up __attribute__((nodebug)) ;
    return static_cast<_Up &&>(__t);
}
class std___1___libcpp_numeric_limits {
};
constexpr long std___1___libcpp_numeric_limits_long__true_::max() noexcept {
    return __max;
}
class std___1___libcpp_numeric_limits_unsigned_long__true_ {
public:
    static constexpr bool is_signed __attribute__((linkage("available_externally")))  = (unsigned long)-1 < (unsigned long)0;
    static constexpr int digits __attribute__((linkage("available_externally")))  = static_cast<int>(sizeof(unsigned long) * 8 - is_signed);
};
class std___1___libcpp_numeric_limits_unsigned_long_long__true_ {
public:
    static constexpr bool is_signed __attribute__((linkage("available_externally")))  = (unsigned long long)-1 < (unsigned long long)0;
    static constexpr int digits __attribute__((linkage("available_externally")))  = static_cast<int>(sizeof(unsigned long long) * 8 - is_signed);
};
struct std___1___libcpp_compute_min {
};
class std___1___libcpp_numeric_limits_float__true_ {
public:
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr float max() noexcept ;
};
constexpr float std___1___libcpp_numeric_limits_float__true_::max() noexcept {
    return 3.40282347E+38F;
}
class std___1___libcpp_numeric_limits_double__true_ {
public:
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr double max() noexcept ;
};
constexpr double std___1___libcpp_numeric_limits_double__true_::max() noexcept {
    return 1.7976931348623157E+308;
}
class std___1_numeric_limits {
};
constexpr long std___1_numeric_limits_long_::max() noexcept {
    return std___1___libcpp_numeric_limits_long__true_::max();
}
class std___1_numeric_limits_unsigned_long_ : public std___1___libcpp_numeric_limits_unsigned_long__true_ {
public:
    static constexpr int digits __attribute__((linkage("linkonce_odr")))  = std___1___libcpp_numeric_limits_unsigned_long__true_::digits;
};
class std___1_numeric_limits_unsigned_long_long_ : public std___1___libcpp_numeric_limits_unsigned_long_long__true_ {
public:
    static constexpr int digits __attribute__((linkage("linkonce_odr")))  = std___1___libcpp_numeric_limits_unsigned_long_long__true_::digits;
};
class std___1_numeric_limits_double_ : public std___1___libcpp_numeric_limits_double__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr double max() noexcept ;
};
constexpr double std___1_numeric_limits_double_::max() noexcept {
    return std___1___libcpp_numeric_limits_double__true_::max();
}
class std___1_numeric_limits_float_ : public std___1___libcpp_numeric_limits_float__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static constexpr float max() noexcept ;
};
constexpr float std___1_numeric_limits_float_::max() noexcept {
    return std___1___libcpp_numeric_limits_float__true_::max();
}
constexpr int std___1_numeric_limits_unsigned_long_::digits __attribute__((linkage("linkonce_odr"))) ;

constexpr int std___1_numeric_limits_unsigned_long_long_::digits __attribute__((linkage("linkonce_odr"))) ;

 __attribute__((linkage("linkonce_odr"))) const char *&&std___1___declval_const_char___(int __p1) ;

 __attribute__((linkage("linkonce_odr"))) char *&&std___1___declval_char___(int __p1) ;

 __attribute__((linkage("linkonce_odr"))) decltype(std___1___declval_const_char___(0)) std___1_declval_const_char___() noexcept ;

 __attribute__((linkage("linkonce_odr"))) decltype(std___1___declval_char___(0)) std___1_declval_char___() noexcept ;

struct std___1_decay1;
struct std___1_pair1 {
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_int___(int *&__x, int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value)  {
    int *__t(std___1_move_int____(__x));
    __x = std___1_move_int____(__y);
    __y = std___1_move_int____(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_unsigned_int___(unsigned int *&__x, unsigned int *&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value)  {
    unsigned int *__t(std___1_move_unsigned_int____(__x));
    __x = std___1_move_unsigned_int____(__y);
    __y = std___1_move_unsigned_int____(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__KeyFrame____(ORB_SLAM2_KeyFrame **&__x, ORB_SLAM2_KeyFrame **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value)  {
    ORB_SLAM2_KeyFrame **__t(std___1_move_ORB_SLAM2__KeyFrame_____(__x));
    __x = std___1_move_ORB_SLAM2__KeyFrame_____(__y);
    __y = std___1_move_ORB_SLAM2__KeyFrame_____(__t);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_swap_ORB_SLAM2__MapPoint____(ORB_SLAM2_MapPoint **&__x, ORB_SLAM2_MapPoint **&__y) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value)  {
    ORB_SLAM2_MapPoint **__t(std___1_move_ORB_SLAM2__MapPoint_____(__x));
    __x = std___1_move_ORB_SLAM2__MapPoint_____(__y);
    __y = std___1_move_ORB_SLAM2__MapPoint_____(__t);
}
class std_initializer_list {
};
class std_initializer_list_std____1__pair_const_unsigned_int__double__;
class std_initializer_list_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int___;
class std_initializer_list_cv__Mat_;
class std_initializer_list_cv__UMat_;
class std_initializer_list_cv__cuda__GpuMat_;
class std_initializer_list_std____1__vector_bool__;
class std_initializer_list_cv__Range_;
class std_initializer_list_std____1__vector_char__;
class std_initializer_list_std____1__string_;
class std_initializer_list_std____1__pair_float__unsigned_int__;
class std_initializer_list_cv__Subdiv2D__Vertex_;
class std_initializer_list_cv__Subdiv2D__QuadEdge_;
class std_initializer_list_cv__Point__int__;
class std_initializer_list_cv__Rect__int__;
class std_initializer_list_cv__DetectionBasedTracker__TrackedObject_;
class std_initializer_list_std____1__list_cv__detail__GraphEdge__;
class std_initializer_list_std____1__pair_int__int__;
class std_initializer_list_cv__Size__int__;
class std_initializer_list_cv__detail__DpSeamFinder__ComponentState_;
class std_initializer_list_std____1__vector_cv__Point__int___;
class std_initializer_list_cv__detail__ImageFeatures_;
class std_initializer_list_cv__detail__MatchesInfo_;
class std_initializer_list_ORB_SLAM2__ExtractorNode_;
class std_initializer_list_std____1__list_ORB_SLAM2__KeyFrame____;
class std_initializer_list_std____1__vector_std____1__vector_unsigned_long___;
class std_initializer_list_std____1__pair_ORB_SLAM2__KeyFrame__const__int__;
class std_initializer_list_std____1__vector_unsigned_long__;
class std_initializer_list_cv__Point__float__;
class std_initializer_list_cv__Point3__float__;
class std_initializer_list_g2o__HyperGraph__Edge___;
class std_initializer_list_g2o__HyperGraph__Vertex___;
class std_initializer_list_std____1__pair_const_int__g2o__HyperGraph__Vertex____;
class std_initializer_list_std____1__pair_const_int__g2o__Parameter____;
class std_initializer_list_Eigen__Matrix_double___1__1__0__;
class std_initializer_list_g2o__Parameter____;
class std_initializer_list_std____1__pair_const_std____1__string__std____1__string__;
class std_initializer_list_std____1__set_g2o__HyperGraphAction____;
class std_initializer_list_Eigen__Matrix_double__3__1__0__;
class std_initializer_list_g2o__SE3Quat_;
class std_initializer_list_g2o__Sim3_;
class std_initializer_list_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int__;
class std_initializer_list_std____1__pair_unsigned_long__unsigned_long__;
struct std___1_iterator_traits;
struct std___1_iterator_traits_const_char___ {
};
struct std___1_iterator_traits_const_unsigned_int___ {
};
struct std___1_iterator_traits_unsigned_int___ {
};
struct std___1_iterator_traits_double___ {
};
struct std___1_iterator_traits_ORB_SLAM2__KeyFrame__const___ {
};
struct std___1_iterator_traits_ORB_SLAM2__KeyFrame____ {
};
struct std___1_iterator_traits_ORB_SLAM2__MapPoint____ {
};
struct __attribute__((type_visibility("default")))  std___1_input_iterator_tag  {
};

struct __attribute__((type_visibility("default")))  std___1_output_iterator_tag  {
};

struct __attribute__((type_visibility("default")))  std___1_forward_iterator_tag  : public std___1_input_iterator_tag {
};

struct __attribute__((type_visibility("default")))  std___1_bidirectional_iterator_tag  : public std___1_forward_iterator_tag {
};

struct __attribute__((type_visibility("default")))  std___1_random_access_iterator_tag  : public std___1_bidirectional_iterator_tag {
};

struct std___1___has_iterator_typedefs {
};
struct std___1___has_iterator_category {
};
struct std___1___iterator_traits {
};
struct std___1_iterator_traits1 {
};
struct std___1___has_iterator_category_convertible_to {
};
struct std___1___has_iterator_category_convertible_to_const_char____std____1__random_access_iterator_tag__true_ : std___1_is_convertible_std____1__random_access_iterator_tag__std____1__random_access_iterator_tag_ {
};
struct std___1___is_cpp17_input_iterator {
};
struct std___1___is_cpp17_forward_iterator {
};
struct std___1___is_cpp17_random_access_iterator {
};
struct std___1___is_cpp17_random_access_iterator_const_char___ : public std___1___has_iterator_category_convertible_to_const_char____std____1__random_access_iterator_tag__true_ {
};
struct std___1___is_cpp17_contiguous_iterator {
};
struct std___1___is_exactly_cpp17_input_iterator {
};
class std___1___tuple_leaf;
class std___1___tuple_leaf1 {
};
struct std___1___tuple_impl;
class std___1_tuple1 {
};
struct std___1___tuple_equal {
};
struct std___1___tuple_less {
};
struct std___1_pointer_traits {
};
struct std___1_pointer_traits_char______nat;
char *std___1_pointer_traits_char___::pointer_to(char &__r) noexcept {
    return std___1_addressof_char_(__r);
}
struct std___1_pointer_traits_std____1____value_type_unsigned_int__double____ {
};
struct std___1_pointer_traits_void___ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_unsigned_int__double___void______ {
};
struct std___1_pointer_traits_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
};
struct std___1_pointer_traits_int___ {
};
struct std___1_pointer_traits_cv__Mat___ {
};
struct std___1_pointer_traits_bool___ {
};
struct std___1_pointer_traits_double___ {
};
struct std___1_pointer_traits_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______ {
};
struct std___1_pointer_traits_std____1____value_type_std____1__string__cvflann__any____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______ {
};
struct std___1_pointer_traits_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____ {
};
struct std___1_pointer_traits_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
};
struct std___1_pointer_traits_std____1__pair_int__int____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1__pair_int__int___void______ {
};
struct std___1_pointer_traits_ORB_SLAM2__ExtractorNode___ {
};
struct std___1_pointer_traits_ORB_SLAM2__MapPoint____ {
};
struct std___1_pointer_traits_ORB_SLAM2__KeyFrame____ {
};
struct std___1_pointer_traits_std____1____tree_node_ORB_SLAM2__MapPoint____void______ {
};
struct std___1_pointer_traits_std____1____tree_node_ORB_SLAM2__KeyFrame____void______ {
};
struct std___1_pointer_traits_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______ {
};
struct std___1_pointer_traits_std____1____value_type_ORB_SLAM2__KeyFrame____int____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______ {
};
struct std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__KeyFrame____void_________nat;
struct std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__KeyFrame____void______ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *pointer_to(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ &__r) noexcept ;
};
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__KeyFrame____void______::pointer_to(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ &__r) noexcept {
    return std___1_addressof_std____1____list_node_base_ORB_SLAM2__KeyFrame____void____(__r);
}
struct std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__MapPoint____void_________nat;
struct std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__MapPoint____void______ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *pointer_to(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ &__r) noexcept ;
};
std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__MapPoint____void______::pointer_to(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ &__r) noexcept {
    return std___1_addressof_std____1____list_node_base_ORB_SLAM2__MapPoint____void____(__r);
}
struct std___1_pointer_traits_g2o__HyperGraph__Edge____ {
};
struct std___1_pointer_traits_std____1____tree_node_g2o__HyperGraph__Edge____void______ {
};
struct std___1_pointer_traits_g2o__HyperGraph__Vertex____ {
};
struct std___1_pointer_traits_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______ {
};
struct std___1_pointer_traits_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ {
};
struct std___1_pointer_traits_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________nat;
struct std___1_pointer_traits_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *pointer_to(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &__r) noexcept ;
};
std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *std___1_pointer_traits_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________::pointer_to(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &__r) noexcept {
    return std___1_addressof_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______(__r);
}
struct std___1_pointer_traits_std____1____value_type_int__g2o__Parameter______ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______ {
};
struct std___1_pointer_traits_std____1____value_type_std____1__string__std____1__string____ {
};
struct std___1_pointer_traits_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______ {
};
struct std___1_pointer_traits_std____1____tree_node_int__void______ {
};
struct std___1_pointer_traits_std____1____tree_node_g2o__HyperGraph__Vertex____void______ {
};
struct std___1_pointer_traits_const_char______nat;
const char *std___1_pointer_traits_const_char___::pointer_to(const char &__r) noexcept {
    return std___1_addressof_const_char_(__r);
}
struct std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void____________nat;
struct std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___tree_end_node_std____1____tree_node_base_void______ *pointer_to(std___1___tree_end_node_std____1____tree_node_base_void______ &__r) noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(std___1___tree_end_node_std____1____tree_node_base_void______ &__r) noexcept {
    return std___1_addressof_std____1____tree_end_node_std____1____tree_node_base_void_______(__r);
}
struct std___1_pointer_traits_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long_______nat;
struct std___1_pointer_traits_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *pointer_to(const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__r) noexcept ;
};
const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *std___1_pointer_traits_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long____::pointer_to(const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &__r) noexcept {
    return std___1_addressof_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__(__r);
}
struct std___1_pointer_traits_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_______nat;
struct std___1_pointer_traits_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ *pointer_to(const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ &__r) noexcept ;
};
const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ *std___1_pointer_traits_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____::pointer_to(const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ &__r) noexcept {
    return std___1_addressof_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__(__r);
}
struct std___1___rebind_pointer {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_unsigned_int__double___void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_base_void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_end_node_std____1____tree_node_base_void_______ {
};
struct std___1___rebind_pointer_void____std____1__pair_const_unsigned_int__double__ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ {
};
struct std___1___rebind_pointer_void____std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1___rebind_pointer_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______ {
};
struct std___1___rebind_pointer_void____std____1____list_node_cv__detail__GraphEdge__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_cv__detail__GraphEdge__void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1__pair_int__int___void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_ORB_SLAM2__ExtractorNode__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_ORB_SLAM2__ExtractorNode__void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ {
};
struct std___1___rebind_pointer_void____const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__ {
};
struct std___1___rebind_pointer_void____const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_cv__Mat__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_cv__Mat__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_double__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_double__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_bool__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_bool__void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___rebind_pointer_void____std____1____list_node_base_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_g2o__HyperGraph__Edge____void____ {
};
struct std___1___rebind_pointer_void____std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ {
};
struct std___1___rebind_pointer_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_int__void____ {
};
struct std___1___rebind_pointer_void____std____1____tree_node_g2o__HyperGraph__Vertex____void____ {
};
struct std___1___to_address_helper;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr const char *std___1___to_address_const_char_(const char *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr char *std___1___to_address_char_(char *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_KeyPoint *std___1___to_address_cv__KeyPoint_(cv_KeyPoint *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr int *std___1___to_address_int_(int *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr unsigned long *std___1___to_address_unsigned_long_(unsigned long *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *std___1___to_address_std____1__vector_unsigned_int__(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr unsigned int *std___1___to_address_unsigned_int_(unsigned int *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr float *std___1___to_address_float_(float *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_pair_int__int_ *std___1___to_address_std____1__pair_int__int__(std___1_pair_int__int_ *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_Mat *std___1___to_address_cv__Mat_(cv_Mat *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_UMat *std___1___to_address_cv__UMat_(cv_UMat *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr cv_Point__int_ *std___1___to_address_cv__Point__int__(cv_Point__int_ *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_MapPoint **std___1___to_address_ORB_SLAM2__MapPoint___(ORB_SLAM2_MapPoint **__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr ORB_SLAM2_KeyFrame **std___1___to_address_ORB_SLAM2__KeyFrame___(ORB_SLAM2_KeyFrame **__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_pair_unsigned_long__unsigned_long_ *std___1___to_address_std____1__pair_unsigned_long__unsigned_long__(std___1_pair_unsigned_long__unsigned_long_ *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *std___1___to_address_std____1__vector_std____1__vector_unsigned_long___(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) noexcept  {
    return __p;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *std___1___to_address_std____1__vector_unsigned_long__(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) noexcept  {
    return __p;
}
struct std___1___to_address_helper1 {
};
struct std___1___has_pointer {
};
struct std___1___pointer {
};
struct std___1___pointer_char__std____1__allocator_char___std____1__allocator_char___true_ {
};
struct std___1___pointer_wchar_t__std____1__allocator_wchar_t___std____1__allocator_wchar_t___true_ {
};
struct std___1___pointer_char16_t__std____1__allocator_char16_t___std____1__allocator_char16_t___true_ {
};
struct std___1___pointer_char32_t__std____1__allocator_char32_t___std____1__allocator_char32_t___true_ {
};
struct std___1___pointer_char__void_____void_____void_____void_____false_ {
};
struct std___1___pointer_std____1__pair_const_unsigned_int__double___std____1__allocator_std____1__pair_const_unsigned_int__double____std____1__allocator_std____1__pair_const_unsigned_int__double____true_ {
};
struct std___1___pointer_std____1____value_type_unsigned_int__double___std____1__allocator_std____1____value_type_unsigned_int__double____std____1__allocator_std____1____value_type_unsigned_int__double____true_ {
};
struct std___1___pointer_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___pointer_int__std____1__allocator_int___std____1__allocator_int___true_ {
};
struct std___1___pointer_unsigned_char__std____1__allocator_unsigned_char___std____1__allocator_unsigned_char___true_ {
};
struct std___1___pointer_unsigned_long__std____1__allocator_unsigned_long___std____1__allocator_unsigned_long___true_ {
};
struct std___1___pointer_cv__Mat__std____1__allocator_cv__Mat___std____1__allocator_cv__Mat___true_ {
};
struct std___1___pointer_cv__UMat__std____1__allocator_cv__UMat___std____1__allocator_cv__UMat___true_ {
};
struct std___1___pointer_bool__std____1__allocator_bool___std____1__allocator_bool___true_ {
};
struct std___1___pointer_cv__DMatch__std____1__allocator_cv__DMatch___std____1__allocator_cv__DMatch___true_ {
};
struct std___1___pointer_cv__KeyPoint__std____1__allocator_cv__KeyPoint___std____1__allocator_cv__KeyPoint___true_ {
};
struct std___1___pointer_double__std____1__allocator_double___std____1__allocator_double___true_ {
};
struct std___1___pointer_unsigned_int__std____1__allocator_unsigned_int___std____1__allocator_unsigned_int___true_ {
};
struct std___1___pointer_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int____std____1__allocator_std____1__vector_unsigned_int____true_ {
};
struct std___1___pointer_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____true_ {
};
struct std___1___pointer_std____1____value_type_std____1__string__cvflann__any___std____1__allocator_std____1____value_type_std____1__string__cvflann__any____std____1__allocator_std____1____value_type_std____1__string__cvflann__any____true_ {
};
struct std___1___pointer_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___pointer_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________true_ {
};
struct std___1___pointer_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________true_ {
};
struct std___1___pointer_cv__Point__int___std____1__allocator_cv__Point__int____std____1__allocator_cv__Point__int____true_ {
};
struct std___1___pointer_float__std____1__allocator_float___std____1__allocator_float___true_ {
};
struct std___1___pointer_cv__Rect__int___std____1__allocator_cv__Rect__int____std____1__allocator_cv__Rect__int____true_ {
};
struct std___1___pointer_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject___std____1__allocator_cv__DetectionBasedTracker__TrackedObject___true_ {
};
struct std___1___pointer_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int____std____1__allocator_std____1__pair_int__int____true_ {
};
struct std___1___pointer_cv__Size__int___std____1__allocator_cv__Size__int____std____1__allocator_cv__Size__int____true_ {
};
struct std___1___pointer_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures___std____1__allocator_cv__detail__ImageFeatures___true_ {
};
struct std___1___pointer_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo___std____1__allocator_cv__detail__MatchesInfo___true_ {
};
struct std___1___pointer_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams___std____1__allocator_cv__detail__CameraParams___true_ {
};
struct std___1___pointer_ORB_SLAM2__ExtractorNode__std____1__allocator_ORB_SLAM2__ExtractorNode___std____1__allocator_ORB_SLAM2__ExtractorNode___true_ {
};
struct std___1___pointer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___pointer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___pointer_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______true_ {
};
struct std___1___pointer_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____true_ {
};
struct std___1___pointer_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______true_ {
};
struct std___1___pointer_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame______std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame______true_ {
};
struct std___1___pointer_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____true_ {
};
struct std___1___pointer_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____true_ {
};
struct std___1___pointer_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______true_ {
};
struct std___1___pointer_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_unsigned_long____true_ {
};
struct std___1___pointer_cv__Point__float___std____1__allocator_cv__Point__float____std____1__allocator_cv__Point__float____true_ {
};
struct std___1___pointer_cv__Point3__float___std____1__allocator_cv__Point3__float____std____1__allocator_cv__Point3__float____true_ {
};
struct std___1___pointer_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______true_ {
};
struct std___1___pointer_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______true_ {
};
struct std___1___pointer_g2o__HyperGraph__Edge____std____1__allocator_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge_____true_ {
};
struct std___1___pointer_std____1____tree_node_g2o__HyperGraph__Edge____void_____std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______true_ {
};
struct std___1___pointer_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex_____true_ {
};
struct std___1___pointer_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______true_ {
};
struct std___1___pointer_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______true_ {
};
struct std___1___pointer_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________true_ {
};
struct std___1___pointer_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________true_ {
};
struct std___1___pointer_std____1____value_type_int__g2o__Parameter_____std____1__allocator_std____1____value_type_int__g2o__Parameter______std____1__allocator_std____1____value_type_int__g2o__Parameter______true_ {
};
struct std___1___pointer_std____1____value_type_std____1__string__std____1__string___std____1__allocator_std____1____value_type_std____1__string__std____1__string____std____1__allocator_std____1____value_type_std____1__string__std____1__string____true_ {
};
struct std___1___pointer_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____true_ {
};
struct std___1___pointer_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long____std____1__allocator_std____1__pair_unsigned_long__unsigned_long____true_ {
};
struct std___1___pointer_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______true_ {
};
struct std___1___pointer_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______true_ {
};
struct std___1___has_const_pointer {
};
struct std___1___const_pointer {
};
struct std___1___const_pointer_char__char____std____1__allocator_char___true_ {
};
struct std___1___const_pointer_int__int____std____1__allocator_int___true_ {
};
struct std___1___const_pointer_unsigned_long__unsigned_long____std____1__allocator_unsigned_long___true_ {
};
struct std___1___const_pointer_unsigned_int__unsigned_int____std____1__allocator_unsigned_int___true_ {
};
struct std___1___const_pointer_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___const_pointer_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___has_void_pointer {
};
struct std___1___void_pointer {
};
struct std___1___void_pointer_std____1____value_type_unsigned_int__double_____std____1__allocator_std____1____value_type_unsigned_int__double____false_ {
};
struct std___1___void_pointer_std____1____value_type_unsigned_int__std____1__vector_unsigned_int______std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____false_ {
};
struct std___1___void_pointer_int____std____1__allocator_int___false_ {
};
struct std___1___void_pointer_cv__Mat____std____1__allocator_cv__Mat___false_ {
};
struct std___1___void_pointer_bool____std____1__allocator_bool___false_ {
};
struct std___1___void_pointer_double____std____1__allocator_double___false_ {
};
struct std___1___void_pointer_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue_____std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____false_ {
};
struct std___1___void_pointer_std____1____value_type_std____1__string__cvflann__any_____std____1__allocator_std____1____value_type_std____1__string__cvflann__any____false_ {
};
struct std___1___void_pointer_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int______std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____false_ {
};
struct std___1___void_pointer_std____1__pair_int__int_____std____1__allocator_std____1__pair_int__int____false_ {
};
struct std___1___void_pointer_ORB_SLAM2__ExtractorNode____std____1__allocator_ORB_SLAM2__ExtractorNode___false_ {
};
struct std___1___void_pointer_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint_____false_ {
};
struct std___1___void_pointer_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame_____false_ {
};
struct std___1___void_pointer_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____false_ {
};
struct std___1___void_pointer_std____1____value_type_ORB_SLAM2__KeyFrame____int_____std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____false_ {
};
struct std___1___void_pointer_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge_____false_ {
};
struct std___1___void_pointer_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex_____false_ {
};
struct std___1___void_pointer_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_______std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______false_ {
};
struct std___1___void_pointer_std____1____value_type_int__g2o__Parameter_______std____1__allocator_std____1____value_type_int__g2o__Parameter______false_ {
};
struct std___1___void_pointer_std____1____value_type_std____1__string__std____1__string_____std____1__allocator_std____1____value_type_std____1__string__std____1__string____false_ {
};
struct std___1___has_size_type {
};
struct std___1___size_type {
};
struct std___1___size_type_std____1__allocator_char___long__true_ {
};
struct std___1___size_type_std____1__allocator_wchar_t___long__true_ {
};
struct std___1___size_type_std____1__allocator_char16_t___long__true_ {
};
struct std___1___size_type_std____1__allocator_char32_t___long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__pair_const_unsigned_int__double____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_unsigned_int__double____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____long__true_ {
};
struct std___1___size_type_std____1__allocator_int___long__true_ {
};
struct std___1___size_type_std____1__allocator_unsigned_long___long__true_ {
};
struct std___1___size_type_std____1__allocator_cv__Mat___long__true_ {
};
struct std___1___size_type_std____1__allocator_cv__UMat___long__true_ {
};
struct std___1___size_type_std____1__allocator_bool___long__true_ {
};
struct std___1___size_type_std____1__allocator_cv__DMatch___long__true_ {
};
struct std___1___size_type_std____1__allocator_cv__KeyPoint___long__true_ {
};
struct std___1___size_type_std____1__allocator_double___long__true_ {
};
struct std___1___size_type_std____1__allocator_unsigned_int___long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__vector_unsigned_int____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_std____1__string__cvflann__any____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________long__true_ {
};
struct std___1___size_type_std____1__allocator_cv__Point__int____long__true_ {
};
struct std___1___size_type_std____1__allocator_float___long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__pair_int__int____long__true_ {
};
struct std___1___size_type_std____1__allocator_ORB_SLAM2__ExtractorNode___long__true_ {
};
struct std___1___size_type_std____1__allocator_ORB_SLAM2__MapPoint_____long__true_ {
};
struct std___1___size_type_std____1__allocator_ORB_SLAM2__KeyFrame_____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__vector_unsigned_long____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______long__true_ {
};
struct std___1___size_type_std____1__allocator_g2o__HyperGraph__Edge_____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______long__true_ {
};
struct std___1___size_type_std____1__allocator_g2o__HyperGraph__Vertex_____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_int__g2o__Parameter______long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1____value_type_std____1__string__std____1__string____long__true_ {
};
struct std___1___size_type_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____long__true_ {
};
struct std___1___has_alloc_traits_difference_type {
};
struct std___1___alloc_traits_difference_type {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_char___char____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_wchar_t___wchar_t____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_char16_t___char16_t____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_char32_t___char32_t____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__pair_const_unsigned_int__double____std____1__pair_const_unsigned_int__double_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_unsigned_int__double____std____1____value_type_unsigned_int__double_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____std____1____value_type_unsigned_int__std____1__vector_unsigned_int______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_int___int____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_unsigned_long___unsigned_long____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_cv__Mat___cv__Mat____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_cv__UMat___cv__UMat____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_bool___bool____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_cv__DMatch___cv__DMatch____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_cv__KeyPoint___cv__KeyPoint____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_double___double____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_unsigned_int___unsigned_int____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__vector_unsigned_int____std____1__vector_unsigned_int_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_std____1__string__cvflann__any____std____1____value_type_std____1__string__cvflann__any_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_cv__Point__int____cv__Point__int_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_float___float____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__pair_int__int____std____1__pair_int__int_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_ORB_SLAM2__ExtractorNode___ORB_SLAM2__ExtractorNode____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______std____1____tree_node_ORB_SLAM2__KeyFrame____void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____std____1__vector_std____1__vector_unsigned_long______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____std____1____value_type_ORB_SLAM2__KeyFrame____int_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__vector_unsigned_long____std____1__vector_unsigned_long_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______std____1____list_node_ORB_SLAM2__KeyFrame____void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______std____1____list_node_ORB_SLAM2__MapPoint____void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_g2o__HyperGraph__Edge_____g2o__HyperGraph__Edge_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______std____1____tree_node_g2o__HyperGraph__Edge____void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_g2o__HyperGraph__Vertex_____g2o__HyperGraph__Vertex_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______std____1____hash_value_type_int__g2o__HyperGraph__Vertex_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_int__g2o__Parameter______std____1____value_type_int__g2o__Parameter_______true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1____value_type_std____1__string__std____1__string____std____1____value_type_std____1__string__std____1__string_____true_ {
};
struct std___1___alloc_traits_difference_type_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____std____1__pair_unsigned_long__unsigned_long_____true_ {
};
struct std___1___has_propagate_on_container_move_assignment {
};
struct std___1___propagate_on_container_move_assignment {
};
struct std___1___propagate_on_container_move_assignment_std____1__allocator_ORB_SLAM2__MapPoint_____true_ {
};
struct std___1___has_rebind_other {
};
struct std___1___allocator_traits_rebind {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_unsigned_int__double____std____1____value_type_unsigned_int__double___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_unsigned_int__double____std____1____tree_node_std____1____value_type_unsigned_int__double___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int_____std____1____value_type_unsigned_int__std____1__vector_unsigned_int____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_bool___unsigned_long__true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue____std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_std____1__string__cvflann__any____std____1____value_type_std____1__string__cvflann__any___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_std____1__string__cvflann__any____std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int_____std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_int__int____std____1____tree_node_std____1__pair_int__int___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_ORB_SLAM2__ExtractorNode___std____1____list_node_ORB_SLAM2__ExtractorNode__void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_ORB_SLAM2__MapPoint_____std____1____tree_node_ORB_SLAM2__MapPoint____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_ORB_SLAM2__KeyFrame_____std____1____tree_node_ORB_SLAM2__KeyFrame____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int____std____1____value_type_ORB_SLAM2__KeyFrame____int___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_cv__Mat___std____1____list_node_cv__Mat__void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_ORB_SLAM2__KeyFrame_____std____1____list_node_ORB_SLAM2__KeyFrame____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_double___std____1____list_node_double__void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_bool___std____1____list_node_bool__void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_ORB_SLAM2__MapPoint_____std____1____list_node_ORB_SLAM2__MapPoint____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_g2o__HyperGraph__Edge_____std____1____tree_node_g2o__HyperGraph__Edge____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex______std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_int__g2o__Parameter______std____1____value_type_int__g2o__Parameter_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_int__g2o__Parameter______std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1__pair_const_std____1__string__std____1__string____std____1____value_type_std____1__string__std____1__string___true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_std____1____value_type_std____1__string__std____1__string____std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_int___std____1____tree_node_int__void_____true_ {
};
struct std___1___allocator_traits_rebind_std____1__allocator_g2o__HyperGraph__Vertex_____std____1____tree_node_g2o__HyperGraph__Vertex____void_____true_ {
};
struct std___1___has_construct_impl {
};
struct std___1___has_construct {
};
struct std___1___has_destroy {
};
struct std___1___has_max_size {
};
struct std___1_allocator_traits {
};
char *std___1_allocator_traits_std____1__allocator_char__::allocate(std___1_allocator_char_ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_char__::deallocate(std___1_allocator_char_ &__a, char *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
size_t std___1_allocator_traits_std____1__allocator_char__::max_size_std____1__allocator_char___void_(const std___1_allocator_char_ &__a) noexcept {
    return __a.max_size();
}
struct std___1_allocator_traits_std____1__allocator_wchar_t__ {
};
struct std___1_allocator_traits_std____1__allocator_char16_t__ {
};
struct std___1_allocator_traits_std____1__allocator_char32_t__ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_unsigned_int__double___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_unsigned_int__double___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____ {
};
int *std___1_allocator_traits_std____1__allocator_int__::allocate(std___1_allocator_int_ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_int__::deallocate(std___1_allocator_int_ &__a, int *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_int__::construct_int__void_(std___1_allocator_int_ &__a, int *__p) {
    __a.construct_int_(__p);
}
void std___1_allocator_traits_std____1__allocator_int__::construct_int__const_int____void_(std___1_allocator_int_ &__a, int *__p, const int &__args) {
    __a.construct_int__const_int___(__p, std___1_forward_const_int___(__args));
}
void std___1_allocator_traits_std____1__allocator_int__::destroy_int__void_(std___1_allocator_int_ &__a, int *__p) {
    __a.destroy(__p);
}
size_t std___1_allocator_traits_std____1__allocator_int__::max_size_std____1__allocator_int___void_(const std___1_allocator_int_ &__a) noexcept {
    return __a.max_size();
}
struct std___1_allocator_traits_std____1__allocator_unsigned_char__ {
};
struct std___1_allocator_traits_std____1__allocator_unsigned_long__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_unsigned_long_ &__a, unsigned long *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_unsigned_long__void_(std___1_allocator_unsigned_long_ &__a, unsigned long *__p) ;
};
void std___1_allocator_traits_std____1__allocator_unsigned_long__::deallocate(std___1_allocator_unsigned_long_ &__a, unsigned long *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_unsigned_long__::destroy_unsigned_long__void_(std___1_allocator_unsigned_long_ &__a, unsigned long *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_cv__Mat__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_cv__Mat_ &__a, cv_Mat *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_cv__Mat__void_(std___1_allocator_cv__Mat_ &__a, cv_Mat *__p) ;
};
void std___1_allocator_traits_std____1__allocator_cv__Mat__::deallocate(std___1_allocator_cv__Mat_ &__a, cv_Mat *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_cv__Mat__::destroy_cv__Mat__void_(std___1_allocator_cv__Mat_ &__a, cv_Mat *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_cv__UMat__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_cv__UMat_ &__a, cv_UMat *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_cv__UMat__void_(std___1_allocator_cv__UMat_ &__a, cv_UMat *__p) ;
};
void std___1_allocator_traits_std____1__allocator_cv__UMat__::deallocate(std___1_allocator_cv__UMat_ &__a, cv_UMat *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_cv__UMat__::destroy_cv__UMat__void_(std___1_allocator_cv__UMat_ &__a, cv_UMat *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_bool__ {
};
struct std___1_allocator_traits_std____1__allocator_cv__DMatch__ {
};
struct std___1_allocator_traits_std____1__allocator_cv__KeyPoint__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_cv__KeyPoint_ &__a, cv_KeyPoint *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_cv__KeyPoint__void_(std___1_allocator_cv__KeyPoint_ &__a, cv_KeyPoint *__p) ;
};
void std___1_allocator_traits_std____1__allocator_cv__KeyPoint__::deallocate(std___1_allocator_cv__KeyPoint_ &__a, cv_KeyPoint *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_cv__KeyPoint__::destroy_cv__KeyPoint__void_(std___1_allocator_cv__KeyPoint_ &__a, cv_KeyPoint *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_double__ {
};
unsigned int *std___1_allocator_traits_std____1__allocator_unsigned_int__::allocate(std___1_allocator_unsigned_int_ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_unsigned_int__::deallocate(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_unsigned_int__::construct_unsigned_int__unsigned_int__void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, unsigned int &&__args) {
    __a.construct_unsigned_int__unsigned_int_(__p, std___1_forward_unsigned_int_(__args));
}
void std___1_allocator_traits_std____1__allocator_unsigned_int__::construct_unsigned_int__const_unsigned_int____void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p, const unsigned int &__args) {
    __a.construct_unsigned_int__const_unsigned_int___(__p, std___1_forward_const_unsigned_int___(__args));
}
void std___1_allocator_traits_std____1__allocator_unsigned_int__::destroy_unsigned_int__void_(std___1_allocator_unsigned_int_ &__a, unsigned int *__p) {
    __a.destroy(__p);
}
size_t std___1_allocator_traits_std____1__allocator_unsigned_int__::max_size_std____1__allocator_unsigned_int___void_(const std___1_allocator_unsigned_int_ &__a) noexcept {
    return __a.max_size();
}
struct std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_int___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1__vector_unsigned_int__ &__a, std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__vector_unsigned_int___void_(std___1_allocator_std____1__vector_unsigned_int__ &__a, std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_int___::deallocate(std___1_allocator_std____1__vector_unsigned_int__ &__a, std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_int___::destroy_std____1__vector_unsigned_int___void_(std___1_allocator_std____1__vector_unsigned_int__ &__a, std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__cvflann__any___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_std____1__string__cvflann__any___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ {
};
struct std___1_allocator_traits_std____1__allocator_cv__Point__int___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_cv__Point__int__ &__a, cv_Point__int_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_cv__Point__int___void_(std___1_allocator_cv__Point__int__ &__a, cv_Point__int_ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_cv__Point__int___::deallocate(std___1_allocator_cv__Point__int__ &__a, cv_Point__int_ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_cv__Point__int___::destroy_cv__Point__int___void_(std___1_allocator_cv__Point__int__ &__a, cv_Point__int_ *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_float__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_float_ &__a, float *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_float__void_(std___1_allocator_float_ &__a, float *__p) ;
};
void std___1_allocator_traits_std____1__allocator_float__::deallocate(std___1_allocator_float_ &__a, float *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_float__::destroy_float__void_(std___1_allocator_float_ &__a, float *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_cv__Rect__int___ {
};
struct std___1_allocator_traits_std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_int__int___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1__pair_int__int__ &__a, std___1_pair_int__int_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__pair_int__int___void_(std___1_allocator_std____1__pair_int__int__ &__a, std___1_pair_int__int_ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1__pair_int__int___::deallocate(std___1_allocator_std____1__pair_int__int__ &__a, std___1_pair_int__int_ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1__pair_int__int___::destroy_std____1__pair_int__int___void_(std___1_allocator_std____1__pair_int__int__ &__a, std___1_pair_int__int_ *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_cv__Size__int___ {
};
struct std___1_allocator_traits_std____1__allocator_cv__detail__ImageFeatures__ {
};
struct std___1_allocator_traits_std____1__allocator_cv__detail__MatchesInfo__ {
};
struct std___1_allocator_traits_std____1__allocator_cv__detail__CameraParams__ {
};
struct std___1_allocator_traits_std____1__allocator_ORB_SLAM2__ExtractorNode__ {
};
ORB_SLAM2_MapPoint **std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::allocate(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::deallocate(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) {
    __a.construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(__p, std___1_forward_ORB_SLAM2__MapPoint__const___(__args));
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::destroy_ORB_SLAM2__MapPoint____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__a, ORB_SLAM2_MapPoint **__p) {
    __a.destroy(__p);
}
size_t std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::max_size_std____1__allocator_ORB_SLAM2__MapPoint_____void_(const std___1_allocator_ORB_SLAM2__MapPoint___ &__a) noexcept {
    return __a.max_size();
}
ORB_SLAM2_KeyFrame **std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::allocate(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::deallocate(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) {
    __a.construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(__p, std___1_forward_ORB_SLAM2__KeyFrame__const___(__args));
}
void std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::destroy_ORB_SLAM2__KeyFrame____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__a, ORB_SLAM2_KeyFrame **__p) {
    __a.destroy(__p);
}
size_t std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::max_size_std____1__allocator_ORB_SLAM2__KeyFrame_____void_(const std___1_allocator_ORB_SLAM2__KeyFrame___ &__a) noexcept {
    return __a.max_size();
}
struct std___1_allocator_traits_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__a, std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_ORB_SLAM2__KeyFrame____void__void_(std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__p1, ORB_SLAM2_KeyFrame **__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::deallocate(std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__a, std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::destroy_ORB_SLAM2__KeyFrame____void__void_(std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__p1, ORB_SLAM2_KeyFrame **__p) {
    __p;
}
struct std___1_allocator_traits_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__a, std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___void__void_(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__p1, std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::deallocate(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__a, std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___void__void_(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__p1, std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *__p) {
    __p->~std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_();
}
struct std___1_allocator_traits_std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__a, std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__vector_std____1__vector_unsigned_long____void_(std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__a, std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::deallocate(std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__a, std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::destroy_std____1__vector_std____1__vector_unsigned_long____void_(std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &__a, std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__a, std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__int___void__void_(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__p1, std___1_pair_ORB_SLAM2__KeyFrame__const__int_ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::deallocate(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__a, std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__int___void__void_(std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__p1, std___1_pair_ORB_SLAM2__KeyFrame__const__int_ *__p) {
    __p->~std___1_pair_ORB_SLAM2__KeyFrame__const__int_();
}
struct std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_long___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1__vector_unsigned_long__ &__a, std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__vector_unsigned_long___void_(std___1_allocator_std____1__vector_unsigned_long__ &__a, std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_long___::deallocate(std___1_allocator_std____1__vector_unsigned_long__ &__a, std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_long___::destroy_std____1__vector_unsigned_long___void_(std___1_allocator_std____1__vector_unsigned_long__ &__a, std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__p) {
    __a.destroy(__p);
}
struct std___1_allocator_traits_std____1__allocator_cv__Point__float___ {
};
struct std___1_allocator_traits_std____1__allocator_cv__Point3__float___ {
};
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::allocate(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::deallocate(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, ORB_SLAM2_KeyFrame **__p, ORB_SLAM2_KeyFrame *const &__args) {
    __a.construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const___(__p, std___1_forward_ORB_SLAM2__KeyFrame__const___(__args));
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::destroy_ORB_SLAM2__KeyFrame____void__void_(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__p1, ORB_SLAM2_KeyFrame **__p) {
    __p;
}
size_t std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______void_(const std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a) noexcept {
    return __a.max_size();
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::allocate(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, size_t __n) {
    return __a.allocate(__n);
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::deallocate(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, ORB_SLAM2_MapPoint **__p, ORB_SLAM2_MapPoint *const &__args) {
    __a.construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const___(__p, std___1_forward_ORB_SLAM2__MapPoint__const___(__args));
}
void std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::destroy_ORB_SLAM2__MapPoint____void__void_(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__p1, ORB_SLAM2_MapPoint **__p) {
    __p;
}
size_t std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::max_size_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______void_(const std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a) noexcept {
    return __a.max_size();
}
struct std___1_allocator_traits_std____1__allocator_g2o__HyperGraph__Edge____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__a, std___1___tree_node_g2o__HyperGraph__Edge____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_g2o__HyperGraph__Edge____void__void_(std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__p1, g2o_HyperGraph_Edge **__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::deallocate(std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__a, std___1___tree_node_g2o__HyperGraph__Edge____void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::destroy_g2o__HyperGraph__Edge____void__void_(std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__p1, g2o_HyperGraph_Edge **__p) {
    __p;
}
struct std___1_allocator_traits_std____1__allocator_g2o__HyperGraph__Vertex____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__a, std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__pair_const_int__g2o__HyperGraph__Vertex_____void__void_(std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__p1, std___1_pair_const_int__g2o__HyperGraph__Vertex___ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::deallocate(std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__a, std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::destroy_std____1__pair_const_int__g2o__HyperGraph__Vertex_____void__void_(std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__p1, std___1_pair_const_int__g2o__HyperGraph__Vertex___ *__p) {
    __p->~std___1_pair_const_int__g2o__HyperGraph__Vertex___();
}
struct std___1_allocator_traits_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &__a, std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p, size_t __n) noexcept ;
};
void std___1_allocator_traits_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::deallocate(std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &__a, std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_int__g2o__Parameter_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_int__g2o__Parameter_____ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__std____1__string___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1____value_type_std____1__string__std____1__string___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ {
};
struct std___1_allocator_traits_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void deallocate(std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__a, std___1_pair_unsigned_long__unsigned_long_ *__p, size_t __n) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static void destroy_std____1__pair_unsigned_long__unsigned_long___void_(std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__a, std___1_pair_unsigned_long__unsigned_long_ *__p) ;
};
void std___1_allocator_traits_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::deallocate(std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__a, std___1_pair_unsigned_long__unsigned_long_ *__p, size_t __n) noexcept {
    __a.deallocate(__p, __n);
}
void std___1_allocator_traits_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::destroy_std____1__pair_unsigned_long__unsigned_long___void_(std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &__a, std___1_pair_unsigned_long__unsigned_long_ *__p) {
    __a.destroy(__p);
}
struct std___1___rebind_alloc_helper {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_unsigned_int__double_____std____1____value_type_unsigned_int__double__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_unsigned_int__double_____std____1____tree_node_std____1____value_type_unsigned_int__double___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int______std____1____value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int______std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_bool____unsigned_long_ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue_____std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue_____std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__cvflann__any_____std____1____value_type_std____1__string__cvflann__any__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_std____1__string__cvflann__any_____std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int______std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int______std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_int__int_____std____1____tree_node_std____1__pair_int__int___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_ORB_SLAM2__ExtractorNode____std____1____list_node_ORB_SLAM2__ExtractorNode__void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint______std____1____tree_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame______std____1____tree_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long_____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long_____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int_____std____1____value_type_ORB_SLAM2__KeyFrame____int__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int_____std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_cv__Mat____std____1____list_node_cv__Mat__void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame______std____1____list_node_ORB_SLAM2__KeyFrame____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_double____std____1____list_node_double__void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_bool____std____1____list_node_bool__void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint______std____1____list_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_g2o__HyperGraph__Edge______std____1____tree_node_g2o__HyperGraph__Edge____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_______std____1____hash_value_type_int__g2o__HyperGraph__Vertex____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_______std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_int__g2o__Parameter_______std____1____value_type_int__g2o__Parameter____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_int__g2o__Parameter_______std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1__pair_const_std____1__string__std____1__string_____std____1____value_type_std____1__string__std____1__string__ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_std____1____value_type_std____1__string__std____1__string_____std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_int____std____1____tree_node_int__void____ {
};
struct std___1___rebind_alloc_helper_std____1__allocator_traits_std____1__allocator_g2o__HyperGraph__Vertex______std____1____tree_node_g2o__HyperGraph__Vertex____void____ {
};
struct std___1___is_default_allocator {
};
class std___1_allocator1;
struct std___1___compressed_pair_elem {
};
std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_::std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_(std___1___default_init_tag __p1) {
}
std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_::__get() noexcept {
    return this->__value_;
}
const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_char___1__true_::std___1___compressed_pair_elem_std____1__allocator_char___1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_char_ &std___1___compressed_pair_elem_std____1__allocator_char___1__true_::__get() noexcept {
    return *this;
}
const std___1_allocator_char_ &std___1___compressed_pair_elem_std____1__allocator_char___1__true_::__get() const noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_void_____void_____1__false_ {
    void (*__value_)(void *);
};
struct std___1___compressed_pair_elem_char____0__false_ {
    char *__value_;
};
std___1___compressed_pair_elem_unsigned_int____0__false_::std___1___compressed_pair_elem_unsigned_int____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
unsigned int *&std___1___compressed_pair_elem_unsigned_int____0__false_::__get() noexcept {
    return this->__value_;
}
unsigned int *const &std___1___compressed_pair_elem_unsigned_int____0__false_::__get() const noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ &__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___tree_end_node_std____1____tree_node_base_void______ &__get() const noexcept ;
    std___1___tree_end_node_std____1____tree_node_base_void______ __value_;
};
std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_::__get() noexcept {
    return this->__value_;
}
const std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_::__get() const noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void____ {
};
std___1___compressed_pair_elem_unsigned_long__0__false_::std___1___compressed_pair_elem_unsigned_long__0__false_(int &&__u) : __value_(std___1_forward_int_(__u)) {
}
unsigned long &std___1___compressed_pair_elem_unsigned_long__0__false_::__get() noexcept {
    return this->__value_;
}
const unsigned long &std___1___compressed_pair_elem_unsigned_long__0__false_::__get() const noexcept {
    return this->__value_;
}
class std___1___map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true_ : public std___1_less_unsigned_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true___1__true_ : public std___1___map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
class std___1___map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true_ : public std___1_less_unsigned_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true___1__true_ : public std___1___map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true_ {
};
std___1___compressed_pair_elem_int____0__false_::std___1___compressed_pair_elem_int____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
int *&std___1___compressed_pair_elem_int____0__false_::__get() noexcept {
    return this->__value_;
}
int *const &std___1___compressed_pair_elem_int____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_int___1__true_::std___1___compressed_pair_elem_std____1__allocator_int___1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_int_ &std___1___compressed_pair_elem_std____1__allocator_int___1__true_::__get() noexcept {
    return *this;
}
const std___1_allocator_int_ &std___1___compressed_pair_elem_std____1__allocator_int___1__true_::__get() const noexcept {
    return *this;
}
unsigned long *const &std___1___compressed_pair_elem_unsigned_long____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_unsigned_long_ &std___1___compressed_pair_elem_std____1__allocator_unsigned_long___1__true_::__get() noexcept {
    return *this;
}
cv_Mat *const &std___1___compressed_pair_elem_cv__Mat____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_cv__Mat_ &std___1___compressed_pair_elem_std____1__allocator_cv__Mat___1__true_::__get() noexcept {
    return *this;
}
cv_UMat *const &std___1___compressed_pair_elem_cv__UMat____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_cv__UMat_ &std___1___compressed_pair_elem_std____1__allocator_cv__UMat___1__true_::__get() noexcept {
    return *this;
}
cv_KeyPoint *const &std___1___compressed_pair_elem_cv__KeyPoint____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_cv__KeyPoint_ &std___1___compressed_pair_elem_std____1__allocator_cv__KeyPoint___1__true_::__get() noexcept {
    return *this;
}
std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_::std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_unsigned_int_ &std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_::__get() noexcept {
    return *this;
}
const std___1_allocator_unsigned_int_ &std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_::__get() const noexcept {
    return *this;
}
std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_::std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_::std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_std____1__vector_unsigned_int__ &std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ {
};
class std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true_ : public std___1_less_std____1__string_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true___1__true_ : public std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ {
};
class std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true_ : public std___1_less_std____1__string_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true___1__true_ : public std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________1__true_ : public std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_________ {
};
struct std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______;
struct std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________0__false_ {
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ **__value_;
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________1__true_ {
public:
};
class std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ {
public:
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ __data_;
};
struct std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________1__false_ {
    std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void__________ __value_;
};
struct std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ *__next_;
};
struct std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________0__false_ {
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ __value_;
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______1__true_ : public std___1_allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ {
};
struct __attribute__((type_visibility("default")))  std___1_hash_unsigned_int_  : public std___1_unary_function_unsigned_int__unsigned_long_ {
};
class std___1___unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true_ : public std___1_hash_unsigned_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true___1__true_ : public std___1___unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true_ {
};
struct std___1___compressed_pair_elem_float__0__false_ {
    float __value_;
};
class std___1___unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true_ : public std___1_equal_to_unsigned_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true___1__true_ : public std___1___unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true_ {
};
cv_Point__int_ *const &std___1___compressed_pair_elem_cv__Point__int_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_cv__Point__int__ &std___1___compressed_pair_elem_std____1__allocator_cv__Point__int____1__true_::__get() noexcept {
    return *this;
}
float *const &std___1___compressed_pair_elem_float____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_float_ &std___1___compressed_pair_elem_std____1__allocator_float___1__true_::__get() noexcept {
    return *this;
}
std___1_pair_int__int_ *const &std___1___compressed_pair_elem_std____1__pair_int__int_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_std____1__pair_int__int__ &std___1___compressed_pair_elem_std____1__allocator_std____1__pair_int__int____1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1__pair_int__int___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1__pair_int__int___void____ {
};
struct std___1___compressed_pair_elem_std____1__less_std____1__pair_int__int____1__true_ : public std___1_less_std____1__pair_int__int__ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void______1__true_ : public std___1_allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void____ {
};
std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_::std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
ORB_SLAM2_MapPoint **&std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_::__get() noexcept {
    return this->__value_;
}
ORB_SLAM2_MapPoint **const &std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1___default_init_tag __p1) {
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1_allocator_ORB_SLAM2__MapPoint___ &&__u) : std___1_allocator_ORB_SLAM2__MapPoint___(std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint____(__u)) {
}
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_::__get() noexcept {
    return *this;
}
const std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_::__get() const noexcept {
    return *this;
}
std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_::std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
ORB_SLAM2_KeyFrame **&std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_::__get() noexcept {
    return this->__value_;
}
ORB_SLAM2_KeyFrame **const &std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1___default_init_tag __p1) {
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1_allocator_ORB_SLAM2__KeyFrame___ &&__u) : std___1_allocator_ORB_SLAM2__KeyFrame___(std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame____(__u)) {
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_::__get() noexcept {
    return *this;
}
const std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_::__get() const noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void______1__true_ : public std___1_allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void____ {
};
struct std___1___compressed_pair_elem_std____1__less_ORB_SLAM2__MapPoint_____1__true_ : public std___1_less_ORB_SLAM2__MapPoint___ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______1__true_ : public std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__get() noexcept ;
};
std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__less_ORB_SLAM2__KeyFrame_____1__true_ : public std___1_less_ORB_SLAM2__KeyFrame___ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__get() noexcept ;
};
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______1__true_::__get() noexcept {
    return *this;
}
class std___1___map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_ : public std___1_less_ORB_SLAM2__KeyFrame___ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___1__true_ : public std___1___map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_ {
};
std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &std___1___compressed_pair_elem_std____1__vector_std____1__vector_unsigned_long______0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &std___1___compressed_pair_elem_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__get() noexcept ;
};
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______1__true_::__get() noexcept {
    return *this;
}
class std___1___map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true_ : public std___1_less_ORB_SLAM2__KeyFrame___ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___1__true_ : public std___1___map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true_ {
};
std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &std___1___compressed_pair_elem_std____1__vector_unsigned_long_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1_allocator_std____1__vector_unsigned_long__ &std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_long____1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_cv__Mat__void______1__true_ : public std___1_allocator_std____1____list_node_cv__Mat__void____ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_ : public std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__get() noexcept ;
};
std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_::std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_double__void______1__true_ : public std___1_allocator_std____1____list_node_double__void____ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_bool__void______1__true_ : public std___1_allocator_std____1____list_node_bool__void____ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_ : public std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_(std___1___default_init_tag __p1) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__get() noexcept ;
};
std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_::std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______1__true_ : public std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__get() noexcept ;
};
std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1__less_g2o__HyperGraph__Edge_____1__true_ : public std___1_less_g2o__HyperGraph__Edge___ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________1__true_ : public std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &__get() noexcept ;
};
std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________1__true_::__get() noexcept {
    return *this;
}
struct std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **&__get() noexcept ;
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__value_;
};
std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **&std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________0__false_::__get() noexcept {
    return this->__value_;
}
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &second() noexcept ;
};
class std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ {
public:
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ __data_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t &size() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &__alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void operator()(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p) noexcept ;
};
struct std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ &__get() noexcept ;
    std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ __value_;
};
std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ &std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________1__false_::__get() noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &__get() noexcept ;
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ __value_;
};
std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________0__false_::__get() noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______1__true_ : public std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__get() noexcept ;
};
std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______1__true_::__get() noexcept {
    return *this;
}
struct __attribute__((type_visibility("default")))  std___1_hash_int_  : public std___1_unary_function_int__unsigned_long_ {
};
class std___1___unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true_ : public std___1_hash_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___1__true_ : public std___1___unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true_ {
};
class std___1___unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true_ : public std___1_equal_to_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___1__true_ : public std___1___unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ {
};
class std___1___map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true_ : public std___1_less_int_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true___1__true_ : public std___1___map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______1__true_ : public std___1_allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ {
};
class std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true_ : public std___1_less_std____1__string_ {
public:
};
struct std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true___1__true_ : public std___1___map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_int__void______1__true_ : public std___1_allocator_std____1____tree_node_int__void____ {
};
struct std___1___compressed_pair_elem_std____1__less_int___1__true_ : public std___1_less_int_ {
};
struct std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void______1__true_ : public std___1_allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void____ {
};
struct std___1___compressed_pair_elem_std____1__less_g2o__HyperGraph__Vertex_____1__true_ : public std___1_less_g2o__HyperGraph__Vertex___ {
};
std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_::std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_(std::nullptr_t &&__u) : __value_(std___1_forward_std__nullptr_t_(__u)) {
}
std___1_pair_unsigned_long__unsigned_long_ *const &std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_::__get() const noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_::std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_(std___1___default_init_tag __p1) {
}
std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_::__get() noexcept {
    return *this;
}
std___1___compressed_pair_elem_std____1__allocator_int_____1__false_::std___1___compressed_pair_elem_std____1__allocator_int_____1__false_(std___1_allocator_int_ &__u) : __value_(std___1_forward_std____1__allocator_int____(__u)) {
}
std___1_allocator_int_ &std___1___compressed_pair_elem_std____1__allocator_int_____1__false_::__get() noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_::std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_(std___1_allocator_unsigned_int_ &__u) : __value_(std___1_forward_std____1__allocator_unsigned_int____(__u)) {
}
std___1_allocator_unsigned_int_ &std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_::__get() noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *const &__get() const noexcept ;
    std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__value_;
};
std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_::std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__u) : __value_(std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void_______(__u)) {
}
std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_::std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&__u) : __value_(std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__u)) {
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_::__get() noexcept {
    return this->__value_;
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *const &std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_::__get() const noexcept {
    return this->__value_;
}
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ {
public:
    std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__alloc_;
    size_t __s_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, size_t __s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void operator()(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p) noexcept ;
};
struct std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &__get() noexcept ;
    std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ __value_;
};
std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_::std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__u) : __value_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__u)) {
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_::__get() noexcept {
    return this->__value_;
}
struct std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__get() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *const &__get() const noexcept ;
    std___1___list_node_ORB_SLAM2__MapPoint____void___ *__value_;
};
std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_::std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__u) : __value_(std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void_______(__u)) {
}
std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_::std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&__u) : __value_(std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void______(__u)) {
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *&std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_::__get() noexcept {
    return this->__value_;
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *const &std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_::__get() const noexcept {
    return this->__value_;
}
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ {
public:
    std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__alloc_;
    size_t __s_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, size_t __s) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void operator()(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p) noexcept ;
};
struct std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__u) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &__get() noexcept ;
    std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ __value_;
};
std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_::std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_(std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__u) : __value_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(__u)) {
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_::__get() noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__u) : __value_(std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame______(__u)) {
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_::__get() noexcept {
    return this->__value_;
}
std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_::std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_(std___1_allocator_ORB_SLAM2__MapPoint___ &__u) : __value_(std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint______(__u)) {
}
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_::__get() noexcept {
    return this->__value_;
}
class std___1___compressed_pair {
};
std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__::std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__(std___1___default_init_tag &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_(std___1_forward_std____1____default_init_tag_(__t1)), std___1___compressed_pair_elem_std____1__allocator_char___1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_ &>(*this).__get();
}
const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char_____rep &std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__0__false_ &>(*this).__get();
}
std___1_allocator_char_ &std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_char___1__true_ &>(*this).__get();
}
const std___1_allocator_char_ &std___1___compressed_pair_std____1__basic_string_char__std____1__char_traits_char___std____1__allocator_char______rep__std____1__allocator_char__::second() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__allocator_char___1__true_ &>(*this).__get();
}
class std___1___compressed_pair_char____void_____void____ : public std___1___compressed_pair_elem_char____0__false_, public std___1___compressed_pair_elem_void_____void_____1__false_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true___1__true_ {
public:
};
std___1___compressed_pair_int____std____1__allocator_int__::std___1___compressed_pair_int____std____1__allocator_int__(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_int____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_int___1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
int *&std___1___compressed_pair_int____std____1__allocator_int__::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_int____0__false_ &>(*this).__get();
}
int *const &std___1___compressed_pair_int____std____1__allocator_int__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_int____0__false_ &>(*this).__get();
}
std___1_allocator_int_ &std___1___compressed_pair_int____std____1__allocator_int__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_int___1__true_ &>(*this).__get();
}
const std___1_allocator_int_ &std___1___compressed_pair_int____std____1__allocator_int__::second() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__allocator_int___1__true_ &>(*this).__get();
}
unsigned long *const &std___1___compressed_pair_unsigned_long____std____1__allocator_unsigned_long__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_unsigned_long____0__false_ &>(*this).__get();
}
std___1_allocator_unsigned_long_ &std___1___compressed_pair_unsigned_long____std____1__allocator_unsigned_long__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_unsigned_long___1__true_ &>(*this).__get();
}
cv_Mat *const &std___1___compressed_pair_cv__Mat____std____1__allocator_cv__Mat__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_cv__Mat____0__false_ &>(*this).__get();
}
std___1_allocator_cv__Mat_ &std___1___compressed_pair_cv__Mat____std____1__allocator_cv__Mat__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_cv__Mat___1__true_ &>(*this).__get();
}
cv_UMat *const &std___1___compressed_pair_cv__UMat____std____1__allocator_cv__UMat__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_cv__UMat____0__false_ &>(*this).__get();
}
std___1_allocator_cv__UMat_ &std___1___compressed_pair_cv__UMat____std____1__allocator_cv__UMat__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_cv__UMat___1__true_ &>(*this).__get();
}
cv_KeyPoint *const &std___1___compressed_pair_cv__KeyPoint____std____1__allocator_cv__KeyPoint__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_cv__KeyPoint____0__false_ &>(*this).__get();
}
std___1_allocator_cv__KeyPoint_ &std___1___compressed_pair_cv__KeyPoint____std____1__allocator_cv__KeyPoint__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_cv__KeyPoint___1__true_ &>(*this).__get();
}
std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__::std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_unsigned_int____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
unsigned int *&std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_int____0__false_ &>(*this).__get();
}
unsigned int *const &std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_unsigned_int____0__false_ &>(*this).__get();
}
std___1_allocator_unsigned_int_ &std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_ &>(*this).__get();
}
const std___1_allocator_unsigned_int_ &std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int__::second() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__allocator_unsigned_int___1__true_ &>(*this).__get();
}
std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___::std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__vector_unsigned_int_____0__false_ &>(*this).__get();
}
std___1_allocator_std____1__vector_unsigned_int__ &std___1___compressed_pair_std____1__vector_unsigned_int_____std____1__allocator_std____1__vector_unsigned_int___::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_int____1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________ : public std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________0__false_, public std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________1__false_ {
public:
};
class std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____ : public std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true___1__true_ {
public:
};
class std___1___compressed_pair_float__std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true__ : public std___1___compressed_pair_elem_float__0__false_, public std___1___compressed_pair_elem_std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true___1__true_ {
public:
};
cv_Point__int_ *const &std___1___compressed_pair_cv__Point__int_____std____1__allocator_cv__Point__int___::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_cv__Point__int_____0__false_ &>(*this).__get();
}
std___1_allocator_cv__Point__int__ &std___1___compressed_pair_cv__Point__int_____std____1__allocator_cv__Point__int___::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_cv__Point__int____1__true_ &>(*this).__get();
}
float *const &std___1___compressed_pair_float____std____1__allocator_float__::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_float____0__false_ &>(*this).__get();
}
std___1_allocator_float_ &std___1___compressed_pair_float____std____1__allocator_float__::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_float___1__true_ &>(*this).__get();
}
std___1_pair_int__int_ *const &std___1___compressed_pair_std____1__pair_int__int_____std____1__allocator_std____1__pair_int__int___::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__pair_int__int_____0__false_ &>(*this).__get();
}
std___1_allocator_std____1__pair_int__int__ &std___1___compressed_pair_std____1__pair_int__int_____std____1__allocator_std____1__pair_int__int___::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1__pair_int__int____1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1__pair_int__int___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1__pair_int__int___void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__less_std____1__pair_int__int___ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_std____1__pair_int__int____1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void______1__true_ {
public:
};
std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__MapPoint___ &&__t2) : std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint____(__t2)) {
}
std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
ORB_SLAM2_MapPoint **&std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_ &>(*this).__get();
}
ORB_SLAM2_MapPoint **const &std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_ &>(*this).__get();
}
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_ &>(*this).__get();
}
const std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____::second() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_____1__true_ &>(*this).__get();
}
std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__KeyFrame___ &&__t2) : std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame____(__t2)) {
}
std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
ORB_SLAM2_KeyFrame **&std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_ &>(*this).__get();
}
ORB_SLAM2_KeyFrame **const &std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_ &>(*this).__get();
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_ &>(*this).__get();
}
const std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::second() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_____1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__less_ORB_SLAM2__MapPoint____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_ORB_SLAM2__MapPoint_____1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___tree_end_node_std____1____tree_node_base_void______ &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &second() noexcept ;
};
const std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ &>(*this).__get();
}
std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1__less_ORB_SLAM2__KeyFrame____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_ORB_SLAM2__KeyFrame_____1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___tree_end_node_std____1____tree_node_base_void______ &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &second() noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ &>(*this).__get();
}
const std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ &>(*this).__get();
}
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long &first() noexcept ;
};
unsigned long &std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &std___1___compressed_pair_std____1__vector_std____1__vector_unsigned_long______std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__vector_std____1__vector_unsigned_long______0__false_ &>(*this).__get();
}
std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &std___1___compressed_pair_std____1__vector_std____1__vector_unsigned_long______std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1__vector_std____1__vector_unsigned_long_____1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___tree_end_node_std____1____tree_node_base_void______ &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &second() noexcept ;
};
const std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ &>(*this).__get();
}
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___1__true_ {
public:
};
std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &std___1___compressed_pair_std____1__vector_unsigned_long_____std____1__allocator_std____1__vector_unsigned_long___::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__vector_unsigned_long_____0__false_ &>(*this).__get();
}
std___1_allocator_std____1__vector_unsigned_long__ &std___1___compressed_pair_std____1__vector_unsigned_long_____std____1__allocator_std____1__vector_unsigned_long___::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1__vector_unsigned_long____1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_cv__Mat__void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_cv__Mat__void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____(int &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const unsigned long &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &second() noexcept ;
};
std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____(int &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_unsigned_long__0__false_(std___1_forward_int_(__t1)), std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
unsigned long &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
const unsigned long &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_double__void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_double__void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_bool__void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_bool__void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____(int &&__t1, std___1___default_init_tag &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) unsigned long &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const unsigned long &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &second() noexcept ;
};
std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____(int &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_unsigned_long__0__false_(std___1_forward_int_(__t1)), std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
unsigned long &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
const unsigned long &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___tree_end_node_std____1____tree_node_base_void______ &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &second() noexcept ;
};
const std___1___tree_end_node_std____1____tree_node_base_void______ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_ &>(*this).__get();
}
std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1__less_g2o__HyperGraph__Edge____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_g2o__HyperGraph__Edge_____1__true_ {
public:
};
unsigned long &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_long__0__false_ &>(*this).__get();
}
std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________1__true_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________ : public std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________0__false_, public std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ &second() noexcept ;
};
std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **&std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________0__false_ &>(*this).__get();
}
std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________ &std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________1__false_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____ : public std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______1__true_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &second() noexcept ;
};
std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ &std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________0__false_ &>(*this).__get();
}
std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______1__true_ &>(*this).__get();
}
class std___1___compressed_pair_unsigned_long__std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___1__true_ {
public:
};
class std___1___compressed_pair_float__std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true__ : public std___1___compressed_pair_elem_float__0__false_, public std___1___compressed_pair_elem_std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_int__void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_int__void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__less_int__ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_int___1__true_ {
public:
};
class std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void_____ : public std___1___compressed_pair_elem_std____1____tree_end_node_std____1____tree_node_base_void________0__false_, public std___1___compressed_pair_elem_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void______1__true_ {
public:
};
class std___1___compressed_pair_unsigned_long__std____1__less_g2o__HyperGraph__Vertex____ : public std___1___compressed_pair_elem_unsigned_long__0__false_, public std___1___compressed_pair_elem_std____1__less_g2o__HyperGraph__Vertex_____1__true_ {
public:
};
std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___(std::nullptr_t &&__t1, std___1___default_init_tag &&__t2) : std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_(std___1_forward_std____1____default_init_tag_(__t2)) {
}
std___1_pair_unsigned_long__unsigned_long_ *const &std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1__pair_unsigned_long__unsigned_long_____0__false_ &>(*this).__get();
}
std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &std___1___compressed_pair_std____1__pair_unsigned_long__unsigned_long_____std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_std____1__pair_unsigned_long__unsigned_long____1__true_ &>(*this).__get();
}
std___1___compressed_pair_int____std____1__allocator_int____::std___1___compressed_pair_int____std____1__allocator_int____(std::nullptr_t &&__t1, std___1_allocator_int_ &__t2) : std___1___compressed_pair_elem_int____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_int_____1__false_(std___1_forward_std____1__allocator_int____(__t2)) {
}
int *&std___1___compressed_pair_int____std____1__allocator_int____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_int____0__false_ &>(*this).__get();
}
int *const &std___1___compressed_pair_int____std____1__allocator_int____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_int____0__false_ &>(*this).__get();
}
std___1_allocator_int_ &std___1___compressed_pair_int____std____1__allocator_int____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_int_____1__false_ &>(*this).__get();
}
std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____::std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____(std::nullptr_t &&__t1, std___1_allocator_unsigned_int_ &__t2) : std___1___compressed_pair_elem_unsigned_int____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_(std___1_forward_std____1__allocator_unsigned_int____(__t2)) {
}
unsigned int *&std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_unsigned_int____0__false_ &>(*this).__get();
}
unsigned int *const &std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_unsigned_int____0__false_ &>(*this).__get();
}
std___1_allocator_unsigned_int_ &std___1___compressed_pair_unsigned_int____std____1__allocator_unsigned_int____::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_unsigned_int_____1__false_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ : public std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_, public std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &second() noexcept ;
};
std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__t2) : std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void_______(__t1)), std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__t2)) {
}
std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__t2) : std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_(std___1_forward_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__t1)), std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__t2)) {
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *&std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_ &>(*this).__get();
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *const &std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__KeyFrame____void_______0__false_ &>(*this).__get();
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_______1__false_ &>(*this).__get();
}
class std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ : public std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_, public std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__t2) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *&first() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *const &first() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &second() noexcept ;
};
std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__t2) : std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void_______(__t1)), std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(__t2)) {
}
std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *&&__t1, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__t2) : std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_(std___1_forward_std____1____list_node_ORB_SLAM2__MapPoint____void______(__t1)), std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_(std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(__t2)) {
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *&std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_ &>(*this).__get();
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *const &std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_std____1____list_node_ORB_SLAM2__MapPoint____void_______0__false_ &>(*this).__get();
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_______1__false_ &>(*this).__get();
}
std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______::std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__KeyFrame___ &__t2) : std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_(std___1_forward_std____1__allocator_ORB_SLAM2__KeyFrame______(__t2)) {
}
ORB_SLAM2_KeyFrame **&std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_ &>(*this).__get();
}
ORB_SLAM2_KeyFrame **const &std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_ORB_SLAM2__KeyFrame_____0__false_ &>(*this).__get();
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___compressed_pair_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame______::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__KeyFrame_______1__false_ &>(*this).__get();
}
std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______::std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______(std::nullptr_t &&__t1, std___1_allocator_ORB_SLAM2__MapPoint___ &__t2) : std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_(std___1_forward_std__nullptr_t_(__t1)), std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_(std___1_forward_std____1__allocator_ORB_SLAM2__MapPoint______(__t2)) {
}
ORB_SLAM2_MapPoint **&std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______::first() noexcept {
    return static_cast<std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_ &>(*this).__get();
}
ORB_SLAM2_MapPoint **const &std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______::first() const noexcept {
    return static_cast<const std___1___compressed_pair_elem_ORB_SLAM2__MapPoint_____0__false_ &>(*this).__get();
}
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___compressed_pair_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint______::second() noexcept {
    return static_cast<std___1___compressed_pair_elem_std____1__allocator_ORB_SLAM2__MapPoint_______1__false_ &>(*this).__get();
}
class __attribute__((visibility("hidden")))  std___1___libcpp_refstring  {
public:
    const char *__imp_;
    ~std___1___libcpp_refstring();
};

class __attribute__((visibility("default")))  std_logic_error  : public std_exception {
public:
    std___1___libcpp_refstring __imp_;
    explicit std_logic_error(const char *__p1);
    std_logic_error(const std_logic_error &__p1) noexcept;
    virtual ~std_logic_error() noexcept;
    virtual const char *what() const noexcept;
};

class __attribute__((visibility("default")))  std_runtime_error  : public std_exception {
public:
    std___1___libcpp_refstring __imp_;
    virtual ~std_runtime_error() noexcept;
    virtual const char *what() const noexcept;
};

class __attribute__((visibility("default")))  std_length_error  : public std_logic_error {
public:
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std_length_error(const char *__s) ;
     __attribute__((linkage("linkonce_odr"))) std_length_error(const std_length_error &__p1) noexcept  = default;    virtual ~std_length_error() noexcept;
};

std_length_error::std_length_error(const char *__s) : std_logic_error(__s) {
}
 [[noreturn]] __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1___throw_length_error(const char *__msg)  {
    throw std_length_error(__msg);
}
class std___1_allocator2;
struct std___1___non_trivial_if {
};
std___1___non_trivial_if_true__std____1__allocator_char__::std___1___non_trivial_if_true__std____1__allocator_char__() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_int__::std___1___non_trivial_if_true__std____1__allocator_int__() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_unsigned_int__::std___1___non_trivial_if_true__std____1__allocator_unsigned_int__() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_int___::std___1___non_trivial_if_true__std____1__allocator_std____1__vector_unsigned_int___() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__MapPoint____::std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__MapPoint____() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___non_trivial_if_true__std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::std___1___non_trivial_if_true__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____() noexcept {
}
std___1___non_trivial_if_true__std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::std___1___non_trivial_if_true__std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept {
}
class std___1_allocator3 {
};
struct std___1___enum_hash {
};
struct std___1_hash1 {
};
struct std___1_default_delete {
};
struct std___1_default_delete_void_;
struct std___1_default_delete_unsigned_char_;
struct std___1_default_delete_char_;
struct std___1_default_delete_unsigned_int_;
struct std___1_default_delete_TFILE_;
struct std___1_default_delete_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____;
struct std___1_default_delete_std____1____list_node_cv__detail__GraphEdge__void____;
struct std___1_default_delete_std____1____list_node_ORB_SLAM2__KeyFrame____void____;
struct std___1_default_delete_std____1____list_node_ORB_SLAM2__MapPoint____void____;
struct std___1___unique_ptr_deleter_sfinae {
};
struct std___1___unique_ptr_deleter_sfinae_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________;
struct std___1___unique_ptr_deleter_sfinae_std____1__default_delete_std____1____thread_struct__;
struct std___1___unique_ptr_deleter_sfinae_std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________;
class std___1_unique_ptr {
};
class  std___1_unique_ptr_char__void_____void____  {
public:
    std___1___compressed_pair_char____void_____void____ __ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_char__void_____void____(char *__p, void (*&&__d)(void *)) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unique_ptr_char__void_____void____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void reset(char *__p) noexcept ;
};
class std___1_unique_ptr_wchar_t__void_____void____;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void______;
class std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________ {
public:
    std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________ __ptr_;
};
class std___1_unique_ptr_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____std____1____hash_node_destructor_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______;
class std___1_unique_ptr_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____std____1____hash_map_node_destructor_std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______;
class std___1_unique_ptr_std____1____tree_node_std____1__pair_int__int___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1__pair_int__int___void______;
class std___1_unique_ptr_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void______;
class std___1_unique_ptr_std____1____tree_node_ORB_SLAM2__MapPoint____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void______;
class std___1_unique_ptr_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void______;
class std___1_unique_ptr_std____1____list_node_cv__Mat__void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_cv__Mat__void______;
class  std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______  {
public:
    std___1___compressed_pair_std____1____list_node_ORB_SLAM2__KeyFrame____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ __ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__d) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ &&__u) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *operator->() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *get() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &get_deleter() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__KeyFrame____void___ *release() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void reset(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p) noexcept ;
};
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &&__d) noexcept : __ptr_(__p, std___1_move_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void________(__d)) {
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ &&__u) noexcept : __ptr_(__u.release(), std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__u.get_deleter())) {
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::~std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______() noexcept {
    this->reset((std___1___list_node_ORB_SLAM2__KeyFrame____void___ *)0);
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::operator->() const noexcept {
    return this->__ptr_.first();
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::get() const noexcept {
    return this->__ptr_.first();
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ &std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::get_deleter() noexcept {
    return this->__ptr_.second();
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::release() noexcept {
    std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__t = this->__ptr_.first();
    this->__ptr_.first() = (std___1___list_node_ORB_SLAM2__KeyFrame____void___ *)0;
    return __t;
}
void std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______::reset(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p) noexcept {
    std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__tmp = this->__ptr_.first();
    this->__ptr_.first() = __p;
    if (__tmp) {
        this->__ptr_.second()(__tmp);
    }
}
class std___1_unique_ptr_std____1____list_node_double__void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_double__void______;
class std___1_unique_ptr_std____1____list_node_bool__void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_bool__void______;
class  std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______  {
public:
    std___1___compressed_pair_std____1____list_node_ORB_SLAM2__MapPoint____void_______std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ __ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__d) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ &&__u) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *operator->() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *get() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &get_deleter() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_ORB_SLAM2__MapPoint____void___ *release() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void reset(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p) noexcept ;
};
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &&__d) noexcept : __ptr_(__p, std___1_move_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void________(__d)) {
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ &&__u) noexcept : __ptr_(__u.release(), std___1_forward_std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(__u.get_deleter())) {
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::~std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______() noexcept {
    this->reset((std___1___list_node_ORB_SLAM2__MapPoint____void___ *)0);
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::operator->() const noexcept {
    return this->__ptr_.first();
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::get() const noexcept {
    return this->__ptr_.first();
}
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ &std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::get_deleter() noexcept {
    return this->__ptr_.second();
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::release() noexcept {
    std___1___list_node_ORB_SLAM2__MapPoint____void___ *__t = this->__ptr_.first();
    this->__ptr_.first() = (std___1___list_node_ORB_SLAM2__MapPoint____void___ *)0;
    return __t;
}
void std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______::reset(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p) noexcept {
    std___1___list_node_ORB_SLAM2__MapPoint____void___ *__tmp = this->__ptr_.first();
    this->__ptr_.first() = __p;
    if (__tmp) {
        this->__ptr_.second()(__tmp);
    }
}
class std___1_unique_ptr_std____1____tree_node_g2o__HyperGraph__Edge____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void______;
class std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________ {
public:
    std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________ __ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void reset(std_nullptr_t __p1) noexcept ;
};
std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________::~std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________() noexcept {
    this->reset(nullptr);
}
void std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________::reset(std_nullptr_t __p1) noexcept {
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__tmp = this->__ptr_.first();
    this->__ptr_.first() = nullptr;
    if (__tmp) {
        this->__ptr_.second()(__tmp);
    }
}
class std___1_unique_ptr_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____std____1____hash_node_destructor_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______;
class std___1_unique_ptr_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____std____1____hash_map_node_destructor_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______;
class std___1_unique_ptr_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____std____1____map_node_destructor_std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void______;
class std___1_unique_ptr_std____1____tree_node_int__void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_int__void______;
class std___1_unique_ptr_std____1____tree_node_g2o__HyperGraph__Vertex____void_____std____1____tree_node_destructor_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void______;
struct std___1_hash2;
extern "C" {
    struct __locale_t;

}
extern "C" {
    struct tm {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
    };

}
extern "C" {
    extern "C" {
        int usleep(useconds_t __useconds);

    }
}
typedef pthread_mutex_t std___1___libcpp_mutex_t;

typedef pthread_t std___1___libcpp_thread_t;

class __attribute__((visibility("default")))  std___1_thread ;

class std___1___allocator_destructor {
};
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____;
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_cv__Mat__void_____;
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__a, size_t __s) noexcept : __alloc_(__a), __s_(__s) {
}
void std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::operator()(std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p) noexcept {
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::deallocate(this->__alloc_, __p, this->__s_);
}
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_double__void_____;
class std___1___allocator_destructor_std____1__allocator_std____1____list_node_bool__void_____;
std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__a, size_t __s) noexcept : __alloc_(__a), __s_(__s) {
}
void std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::operator()(std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p) noexcept {
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::deallocate(this->__alloc_, __p, this->__s_);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long std___1___libcpp_atomic_refcount_decrement_long_(long &__t) noexcept  {
    return __atomic_add_fetch(&__t, -1, 4);
}
class std___1_weak_ptr;
class __attribute__((visibility("default")))  std___1___shared_count  {
public:
    long __shared_owners_;
    virtual ~std___1___shared_count() noexcept;
    virtual void __on_zero_shared() noexcept = 0;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __release_shared() noexcept ;
};

bool std___1___shared_count::__release_shared() noexcept {
    if (std___1___libcpp_atomic_refcount_decrement_long_(this->__shared_owners_) == -1) {
        this->__on_zero_shared();
        return true;
    }
    return false;
}
class __attribute__((visibility("default")))  std___1___shared_weak_count  : public std___1___shared_count {
public:
    long __shared_weak_owners_;
    virtual ~std___1___shared_weak_count() noexcept;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __release_shared() noexcept ;
    void __release_weak() noexcept;
    virtual const void *__get_deleter(const std_type_info &__p1) const noexcept;
    virtual void __on_zero_shared_weak() noexcept = 0;
};

void std___1___shared_weak_count::__release_shared() noexcept {
    if (this->std___1___shared_count::__release_shared()) {
        this->__release_weak();
    }
}
class std___1_shared_ptr {
};
class std___1_shared_ptr_void_ {
public:
    void *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_FileStorage_Impl;
class std___1_shared_ptr_cv__FileStorage__Impl_ {
public:
    cv_FileStorage_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
     __attribute__((linkage("linkonce_odr"))) ~std___1_shared_ptr_cv__FileStorage__Impl_() noexcept ;
};
class cv_Formatted;
class std___1_shared_ptr_cv__Formatted_ {
public:
    cv_Formatted *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_Formatter;
class std___1_shared_ptr_cv__Formatter_ {
public:
    cv_Formatter *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_MinProblemSolver_Function;
class std___1_shared_ptr_cv__MinProblemSolver__Function_ {
public:
    cv_MinProblemSolver_Function *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct std___1___fs_filesystem_filesystem_error__Storage;
class std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_ {
public:
    std___1___fs_filesystem_filesystem_error__Storage *__ptr_;
    std___1___shared_weak_count *__cntrl_;
     __attribute__((linkage("linkonce_odr"))) ~std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___fs_filesystem_filesystem_error__Storage *operator->() const noexcept ;
};
std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_::~std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_() noexcept {
    if (this->__cntrl_) {
        this->__cntrl_->__release_shared();
    }
}
std___1___fs_filesystem_filesystem_error__Storage *std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_::operator->() const noexcept {
    return this->__ptr_;
}
class std___1___fs_filesystem___dir_stream;
class std___1_shared_ptr_std____1____fs__filesystem____dir_stream_ {
public:
    std___1___fs_filesystem___dir_stream *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct std___1___fs_filesystem_recursive_directory_iterator___shared_imp;
class std___1_shared_ptr_std____1____fs__filesystem__recursive_directory_iterator____shared_imp_ {
public:
    std___1___fs_filesystem_recursive_directory_iterator___shared_imp *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_FileStorage;
class std___1_shared_ptr_cv__FileStorage_ {
public:
    cv_FileStorage *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_flann_IndexParams;
class std___1_shared_ptr_cv__flann__IndexParams_ {
public:
    cv_flann_IndexParams *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_flann_SearchParams;
class std___1_shared_ptr_cv__flann__SearchParams_ {
public:
    cv_flann_SearchParams *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_flann_Index;
class std___1_shared_ptr_cv__flann__Index_ {
public:
    cv_flann_Index *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_flann_KDTreeIndexParams;
class std___1_shared_ptr_cv__flann__KDTreeIndexParams_ {
public:
    cv_flann_KDTreeIndexParams *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_Feature2D;
class std___1_shared_ptr_cv__Feature2D_ {
public:
    cv_Feature2D *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_DescriptorMatcher;
class std___1_shared_ptr_cv__DescriptorMatcher_ {
public:
    cv_DescriptorMatcher *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_SimpleBlobDetector;
class std___1_shared_ptr_cv__SimpleBlobDetector_ {
public:
    cv_SimpleBlobDetector *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_dnn_dnn4_v20201117_Net_Impl;
class std___1_shared_ptr_cv__dnn__dnn4_v20201117__Net__Impl_ {
public:
    cv_dnn_dnn4_v20201117_Net_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_dnn_dnn4_v20201117_Model_Impl;
class std___1_shared_ptr_cv__dnn__dnn4_v20201117__Model__Impl_ {
public:
    cv_dnn_dnn4_v20201117_Model_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct CvCapture;
class std___1_shared_ptr_CvCapture_ {
public:
    CvCapture *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_IVideoCapture;
class std___1_shared_ptr_cv__IVideoCapture_ {
public:
    cv_IVideoCapture *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct CvVideoWriter;
class std___1_shared_ptr_CvVideoWriter_ {
public:
    CvVideoWriter *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_IVideoWriter;
class std___1_shared_ptr_cv__IVideoWriter_ {
public:
    cv_IVideoWriter *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class std___1_shared_ptr_float_ {
public:
    float *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_ml_ParamGrid;
class std___1_shared_ptr_cv__ml__ParamGrid_ {
public:
    cv_ml_ParamGrid *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_BaseCascadeClassifier;
class std___1_shared_ptr_cv__BaseCascadeClassifier_ {
public:
    cv_BaseCascadeClassifier *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
struct cv_QRCodeDetector_Impl;
class std___1_shared_ptr_cv__QRCodeDetector__Impl_ {
public:
    cv_QRCodeDetector_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_DetectionBasedTracker_SeparateDetectionWork;
class std___1_shared_ptr_cv__DetectionBasedTracker__SeparateDetectionWork_ {
public:
    cv_DetectionBasedTracker_SeparateDetectionWork *__ptr_;
    std___1___shared_weak_count *__cntrl_;
     __attribute__((linkage("linkonce_odr"))) ~std___1_shared_ptr_cv__DetectionBasedTracker__SeparateDetectionWork_() ;
};
class cv_DetectionBasedTracker_IDetector;
class std___1_shared_ptr_cv__DetectionBasedTracker__IDetector_ {
public:
    cv_DetectionBasedTracker_IDetector *__ptr_;
    std___1___shared_weak_count *__cntrl_;
     __attribute__((linkage("linkonce_odr"))) ~std___1_shared_ptr_cv__DetectionBasedTracker__IDetector_() ;
};
class cv_cuda_GpuMat_Allocator;
class std___1_shared_ptr_cv__cuda__GpuMat__Allocator_ {
public:
    cv_cuda_GpuMat_Allocator *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_cuda_Stream_Impl;
class std___1_shared_ptr_cv__cuda__Stream__Impl_ {
public:
    cv_cuda_Stream_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_cuda_Event_Impl;
class std___1_shared_ptr_cv__cuda__Event__Impl_ {
public:
    cv_cuda_Event_Impl *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_RotationWarper;
class std___1_shared_ptr_cv__detail__RotationWarper_ {
public:
    cv_detail_RotationWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_PlaneWarper;
class std___1_shared_ptr_cv__detail__PlaneWarper_ {
public:
    cv_detail_PlaneWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_AffineWarper;
class std___1_shared_ptr_cv__detail__AffineWarper_ {
public:
    cv_detail_AffineWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_CylindricalWarper;
class std___1_shared_ptr_cv__detail__CylindricalWarper_ {
public:
    cv_detail_CylindricalWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_SphericalWarper;
class std___1_shared_ptr_cv__detail__SphericalWarper_ {
public:
    cv_detail_SphericalWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_FisheyeWarper;
class std___1_shared_ptr_cv__detail__FisheyeWarper_ {
public:
    cv_detail_FisheyeWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_StereographicWarper;
class std___1_shared_ptr_cv__detail__StereographicWarper_ {
public:
    cv_detail_StereographicWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_CompressedRectilinearWarper;
class std___1_shared_ptr_cv__detail__CompressedRectilinearWarper_ {
public:
    cv_detail_CompressedRectilinearWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_CompressedRectilinearPortraitWarper;
class std___1_shared_ptr_cv__detail__CompressedRectilinearPortraitWarper_ {
public:
    cv_detail_CompressedRectilinearPortraitWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_PaniniWarper;
class std___1_shared_ptr_cv__detail__PaniniWarper_ {
public:
    cv_detail_PaniniWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_PaniniPortraitWarper;
class std___1_shared_ptr_cv__detail__PaniniPortraitWarper_ {
public:
    cv_detail_PaniniPortraitWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_MercatorWarper;
class std___1_shared_ptr_cv__detail__MercatorWarper_ {
public:
    cv_detail_MercatorWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_TransverseMercatorWarper;
class std___1_shared_ptr_cv__detail__TransverseMercatorWarper_ {
public:
    cv_detail_TransverseMercatorWarper *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_FeaturesMatcher;
class std___1_shared_ptr_cv__detail__FeaturesMatcher_ {
public:
    cv_detail_FeaturesMatcher *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_PairwiseSeamFinder;
class std___1_shared_ptr_cv__detail__PairwiseSeamFinder_ {
public:
    cv_detail_PairwiseSeamFinder *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_BundleAdjusterBase;
class std___1_shared_ptr_cv__detail__BundleAdjusterBase_ {
public:
    cv_detail_BundleAdjusterBase *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_Estimator;
class std___1_shared_ptr_cv__detail__Estimator_ {
public:
    cv_detail_Estimator *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_WarperCreator;
class std___1_shared_ptr_cv__WarperCreator_ {
public:
    cv_WarperCreator *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_ExposureCompensator;
class std___1_shared_ptr_cv__detail__ExposureCompensator_ {
public:
    cv_detail_ExposureCompensator *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_SeamFinder;
class std___1_shared_ptr_cv__detail__SeamFinder_ {
public:
    cv_detail_SeamFinder *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class cv_detail_Blender;
class std___1_shared_ptr_cv__detail__Blender_ {
public:
    cv_detail_Blender *__ptr_;
    std___1___shared_weak_count *__cntrl_;
};
class std___1_shared_ptr_g2o__RobustKernel_;
class std___1_shared_ptr1;
class std___1_shared_ptr2;
class std___1_shared_ptr3;
class std___1_shared_ptr4;
class std___1_shared_ptr5;
class std___1_shared_ptr6;
class std___1_shared_ptr7;
class std___1_shared_ptr8;
class std___1_shared_ptr9;
class std___1_shared_ptr10;
class std___1_shared_ptr11;
class std___1_shared_ptr12;
class std___1_shared_ptr13;
class std___1_shared_ptr14;
class std___1_shared_ptr15;
class std___1_shared_ptr16;
class std___1_shared_ptr17;
class std___1_shared_ptr18;
class std___1_shared_ptr19;
class std___1_shared_ptr20;
class std___1_shared_ptr21;
class std___1_shared_ptr22;
class std___1_shared_ptr23;
class std___1_shared_ptr24;
class std___1_shared_ptr25;
class std___1_shared_ptr26;
class std___1_shared_ptr27;
class std___1_shared_ptr28;
class std___1_shared_ptr29;
class std___1_shared_ptr30;
class std___1_shared_ptr31;
class std___1_shared_ptr32;
class std___1_shared_ptr33;
class std___1_shared_ptr34;
class std___1_shared_ptr35;
class std___1_shared_ptr36;
class std___1_shared_ptr37;
class std___1_shared_ptr38;
class std___1_shared_ptr39;
class std___1_shared_ptr40;
class std___1_shared_ptr41;
class std___1_shared_ptr42;
class std___1_shared_ptr43;
class std___1_shared_ptr44;
class std___1_shared_ptr45;
class std___1_shared_ptr46;
class std___1_shared_ptr47;
class std___1_shared_ptr48;
class std___1_shared_ptr49;
class std___1_shared_ptr50;
class std___1_shared_ptr51;
class std___1_shared_ptr52;
class std___1_weak_ptr1 {
};
struct std___1_hash3;
extern "C" {
}
struct std___1_iterator {
};
class std___1_istreambuf_iterator1 {
};
class std___1_istream_iterator {
};
class std___1_move_iterator {
};
class std___1_ostreambuf_iterator1 {
};
class std___1_reverse_iterator {
};
class std___1_reverse_iterator_const_char___;
class std___1_reverse_iterator_const_wchar_t___;
class std___1_reverse_iterator_const_char16_t___;
class std___1_reverse_iterator_const_char32_t___;
class std___1_reverse_iterator_std____1____wrap_iter_char____;
class std___1_reverse_iterator_std____1____wrap_iter_const_char____;
class std___1_reverse_iterator_std____1____wrap_iter_wchar_t____;
class std___1_reverse_iterator_std____1____wrap_iter_const_wchar_t____;
class std___1_reverse_iterator_std____1____wrap_iter_char16_t____;
class std___1_reverse_iterator_std____1____wrap_iter_const_char16_t____;
class std___1_reverse_iterator_std____1____wrap_iter_char32_t____;
class std___1_reverse_iterator_std____1____wrap_iter_const_char32_t____;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long___;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_int____;
class std___1_reverse_iterator_std____1____wrap_iter_const_int____;
class std___1_reverse_iterator_std____1____wrap_iter_unsigned_char____;
class std___1_reverse_iterator_std____1____wrap_iter_const_unsigned_char____;
class std___1_reverse_iterator_std____1____wrap_iter_unsigned_long____;
class std___1_reverse_iterator_std____1____wrap_iter_const_unsigned_long____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Mat____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Mat____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__UMat____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__UMat____;
class std___1_reverse_iterator_std____1____bit_iterator_std____1__vector_bool___false__0__;
class std___1_reverse_iterator_std____1____bit_iterator_std____1__vector_bool___true__0__;
class std___1_reverse_iterator_std____1____wrap_iter_cv__cuda__GpuMat____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__cuda__GpuMat____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_bool_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_bool_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Range____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Range____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__DMatch____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__DMatch____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__KeyPoint____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__KeyPoint____;
class std___1_reverse_iterator_std____1____wrap_iter_double____;
class std___1_reverse_iterator_std____1____wrap_iter_const_double____;
class std___1_reverse_iterator_std____1____wrap_iter_unsigned_int____;
class std___1_reverse_iterator_std____1____wrap_iter_const_unsigned_int____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_unsigned_int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_unsigned_int_____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_char_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_char_____;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__string____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__string____;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__pair_float__unsigned_int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__pair_float__unsigned_int_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Subdiv2D__Vertex____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Subdiv2D__Vertex____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Subdiv2D__QuadEdge____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Subdiv2D__QuadEdge____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Point__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Point__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_float____;
class std___1_reverse_iterator_std____1____wrap_iter_const_float____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Rect__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Rect__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__DetectionBasedTracker__TrackedObject____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__DetectionBasedTracker__TrackedObject____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__list_cv__detail__GraphEdge_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__list_cv__detail__GraphEdge_____;
class std___1_reverse_iterator_std____1____list_iterator_cv__detail__GraphEdge__void____;
class std___1_reverse_iterator_std____1____list_const_iterator_cv__detail__GraphEdge__void____;
class std___1_reverse_iterator_std____1____deque_iterator_int__int____int____int_____long__1024__;
class std___1_reverse_iterator_std____1____deque_iterator_int__const_int____const_int____const_int__const____long__1024__;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__pair_int__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__pair_int__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Scalar__double_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Scalar__double_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Size__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Size__int_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__detail__DpSeamFinder__ComponentState____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__detail__DpSeamFinder__ComponentState____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_cv__Point__int______;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_cv__Point__int______;
class std___1_reverse_iterator_std____1____tree_const_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long__;
class std___1_reverse_iterator_std____1____wrap_iter_cv__detail__ImageFeatures____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__detail__ImageFeatures____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__detail__MatchesInfo____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__detail__MatchesInfo____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__detail__CameraParams____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__detail__CameraParams____;
class std___1_reverse_iterator_std____1____list_iterator_ORB_SLAM2__ExtractorNode__void____;
class std___1_reverse_iterator_std____1____list_const_iterator_ORB_SLAM2__ExtractorNode__void____;
class std___1_reverse_iterator_std____1____wrap_iter_ORB_SLAM2__MapPoint_____;
class std___1_reverse_iterator_std____1____wrap_iter_ORB_SLAM2__MapPoint__const____;
class std___1_reverse_iterator_std____1____wrap_iter_ORB_SLAM2__KeyFrame_____;
class std___1_reverse_iterator_std____1____wrap_iter_ORB_SLAM2__KeyFrame__const____;
class std___1_reverse_iterator_std____1____tree_const_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long__;
class std___1_reverse_iterator_std____1____tree_const_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long__;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__list_ORB_SLAM2__KeyFrame_______;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__list_ORB_SLAM2__KeyFrame_______;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_std____1__vector_unsigned_long______;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_std____1__vector_unsigned_long______;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__vector_unsigned_long_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__vector_unsigned_long_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Point__float_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Point__float_____;
class std___1_reverse_iterator_std____1____wrap_iter_cv__Point3__float_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_cv__Point3__float_____;
class std___1_reverse_iterator_std____1____list_iterator_cv__Mat__void____;
class std___1_reverse_iterator_std____1____list_const_iterator_cv__Mat__void____;
class std___1_reverse_iterator_std____1____list_iterator_ORB_SLAM2__KeyFrame____void____;
class std___1_reverse_iterator_std____1____list_const_iterator_ORB_SLAM2__KeyFrame____void____;
class std___1_reverse_iterator_std____1____list_iterator_double__void____;
class std___1_reverse_iterator_std____1____list_const_iterator_double__void____;
class std___1_reverse_iterator_std____1____list_iterator_bool__void____;
class std___1_reverse_iterator_std____1____list_const_iterator_bool__void____;
class std___1_reverse_iterator_std____1____list_iterator_ORB_SLAM2__MapPoint____void____;
class std___1_reverse_iterator_std____1____list_const_iterator_ORB_SLAM2__MapPoint____void____;
class std___1_reverse_iterator_std____1____tree_const_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long__;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__HyperGraph__Vertex_____;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__HyperGraph__Vertex__const____;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_Eigen__Matrix_double___1__1__0_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_Eigen__Matrix_double___1__1__0_____;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__Parameter______;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__Parameter___const____;
class std___1_reverse_iterator_std____1____map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___;
class std___1_reverse_iterator_std____1____map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long___;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__set_g2o__HyperGraphAction_______;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__set_g2o__HyperGraphAction_______;
class std___1_reverse_iterator_std____1____tree_const_iterator_int__std____1____tree_node_int__void_______long__;
class std___1_reverse_iterator_std____1____wrap_iter_Eigen__Matrix_double__3__1__0_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_Eigen__Matrix_double__3__1__0_____;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__SE3Quat____;
class std___1_reverse_iterator_std____1____wrap_iter_const_g2o__SE3Quat____;
class std___1_reverse_iterator_std____1____wrap_iter_g2o__Sim3____;
class std___1_reverse_iterator_std____1____wrap_iter_const_g2o__Sim3____;
class std___1_reverse_iterator_std____1____tree_const_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long__;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____;
class std___1_reverse_iterator_std____1____wrap_iter_std____1__pair_unsigned_long__unsigned_long_____;
class std___1_reverse_iterator_std____1____wrap_iter_const_std____1__pair_unsigned_long__unsigned_long_____;
class std___1___wrap_iter {
};
class  std___1___wrap_iter_char___  {
public:
    char *__i;
};
class  std___1___wrap_iter_const_char___  {
public:
    const char *__i;
};
class std___1___wrap_iter_wchar_t___;
class std___1___wrap_iter_const_wchar_t___;
class std___1___wrap_iter_char16_t___;
class std___1___wrap_iter_const_char16_t___;
class std___1___wrap_iter_char32_t___;
class std___1___wrap_iter_const_char32_t___;
class std___1___wrap_iter_int___;
class std___1___wrap_iter_const_int___;
class std___1___wrap_iter_unsigned_char___;
class std___1___wrap_iter_const_unsigned_char___;
class  std___1___wrap_iter_unsigned_long___  {
public:
    unsigned long *__i;
};
class std___1___wrap_iter_const_unsigned_long___;
class std___1___wrap_iter_cv__Mat___;
class std___1___wrap_iter_const_cv__Mat___;
class std___1___wrap_iter_cv__UMat___;
class std___1___wrap_iter_const_cv__UMat___;
class std___1___wrap_iter_cv__cuda__GpuMat___;
class std___1___wrap_iter_const_cv__cuda__GpuMat___;
class std___1___wrap_iter_std____1__vector_bool____;
class std___1___wrap_iter_const_std____1__vector_bool____;
class std___1___wrap_iter_cv__Range___;
class std___1___wrap_iter_const_cv__Range___;
class std___1___wrap_iter_cv__DMatch___;
class std___1___wrap_iter_const_cv__DMatch___;
class std___1___wrap_iter_cv__KeyPoint___;
class std___1___wrap_iter_const_cv__KeyPoint___;
class  std___1___wrap_iter_double___  {
public:
    double *__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_double___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr double &operator*() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_double___ &operator++() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr double *base() const noexcept ;
};
std___1___wrap_iter_double___::std___1___wrap_iter_double___() noexcept : __i(0) {
}
constexpr double &std___1___wrap_iter_double___::operator*() const noexcept {
    return *this->__i;
}
constexpr std___1___wrap_iter_double___ &std___1___wrap_iter_double___::operator++() noexcept {
    ++this->__i;
    return *this;
}
constexpr double *std___1___wrap_iter_double___::base() const noexcept {
    return this->__i;
}
class std___1___wrap_iter_const_double___;
std___1___wrap_iter_unsigned_int___ std___1___wrap_iter_unsigned_int___::operator+(ptrdiff_t __n) const noexcept {
    std___1___wrap_iter_unsigned_int___ __w(*this);
    __w += __n;
    return __w;
}
constexpr std___1___wrap_iter_unsigned_int___ &std___1___wrap_iter_unsigned_int___::operator+=(ptrdiff_t __n) noexcept {
    this->__i += __n;
    return *this;
}
constexpr unsigned int *std___1___wrap_iter_unsigned_int___::base() const noexcept {
    return this->__i;
}
std___1___wrap_iter_unsigned_int___::std___1___wrap_iter_unsigned_int___(unsigned int *__x) noexcept : __i(__x) {
}
class  std___1___wrap_iter_const_unsigned_int___  {
public:
    const unsigned int *__i;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_const_unsigned_int___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_const_unsigned_int___(const std___1___wrap_iter_unsigned_int___ &__u, void *__p2) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr const unsigned int &operator*() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr std___1___wrap_iter_const_unsigned_int___ &operator++() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___wrap_iter_const_unsigned_int___ operator++(int __p1) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr const unsigned int *base() const noexcept ;
};
std___1___wrap_iter_const_unsigned_int___::std___1___wrap_iter_const_unsigned_int___() noexcept : __i(0) {
}
std___1___wrap_iter_const_unsigned_int___::std___1___wrap_iter_const_unsigned_int___(const std___1___wrap_iter_unsigned_int___ &__u, void *__p2) noexcept : __i(__u.base()) {
}
constexpr const unsigned int &std___1___wrap_iter_const_unsigned_int___::operator*() const noexcept {
    return *this->__i;
}
constexpr std___1___wrap_iter_const_unsigned_int___ &std___1___wrap_iter_const_unsigned_int___::operator++() noexcept {
    ++this->__i;
    return *this;
}
std___1___wrap_iter_const_unsigned_int___ std___1___wrap_iter_const_unsigned_int___::operator++(int __p1) noexcept {
    std___1___wrap_iter_const_unsigned_int___ __tmp(*this);
    ++ (*this);
    return __tmp;
}
constexpr const unsigned int *std___1___wrap_iter_const_unsigned_int___::base() const noexcept {
    return this->__i;
}
class std___1___wrap_iter_std____1__vector_unsigned_int____;
class  std___1___wrap_iter_const_std____1__vector_unsigned_int____  {
public:
    const std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__i;
};
class std___1___wrap_iter_std____1__vector_char____;
class std___1___wrap_iter_const_std____1__vector_char____;
class std___1___wrap_iter_std____1__string___;
class std___1___wrap_iter_const_std____1__string___;
class  std___1___wrap_iter_std____1__pair_float__unsigned_int____  {
public:
    std___1_pair_float__unsigned_int_ *__i;
};
class std___1___wrap_iter_const_std____1__pair_float__unsigned_int____;
class std___1___wrap_iter_cv__Subdiv2D__Vertex___;
class std___1___wrap_iter_const_cv__Subdiv2D__Vertex___;
class std___1___wrap_iter_cv__Subdiv2D__QuadEdge___;
class std___1___wrap_iter_const_cv__Subdiv2D__QuadEdge___;
class std___1___wrap_iter_cv__Point__int____;
class std___1___wrap_iter_const_cv__Point__int____;
class std___1___wrap_iter_float___;
class std___1___wrap_iter_const_float___;
class std___1___wrap_iter_cv__Rect__int____;
class std___1___wrap_iter_const_cv__Rect__int____;
class std___1___wrap_iter_cv__DetectionBasedTracker__TrackedObject___;
class std___1___wrap_iter_const_cv__DetectionBasedTracker__TrackedObject___;
class std___1___wrap_iter_std____1__list_cv__detail__GraphEdge____;
class std___1___wrap_iter_const_std____1__list_cv__detail__GraphEdge____;
class std___1___wrap_iter_std____1__pair_int__int____;
class std___1___wrap_iter_const_std____1__pair_int__int____;
class std___1___wrap_iter_cv__Scalar__double____;
class std___1___wrap_iter_const_cv__Scalar__double____;
class std___1___wrap_iter_cv__Size__int____;
class std___1___wrap_iter_const_cv__Size__int____;
class std___1___wrap_iter_cv__detail__DpSeamFinder__ComponentState___;
class std___1___wrap_iter_const_cv__detail__DpSeamFinder__ComponentState___;
class std___1___wrap_iter_std____1__vector_cv__Point__int_____;
class std___1___wrap_iter_const_std____1__vector_cv__Point__int_____;
class std___1___wrap_iter_cv__detail__ImageFeatures___;
class std___1___wrap_iter_const_cv__detail__ImageFeatures___;
class std___1___wrap_iter_cv__detail__MatchesInfo___;
class std___1___wrap_iter_const_cv__detail__MatchesInfo___;
class std___1___wrap_iter_cv__detail__CameraParams___;
class std___1___wrap_iter_const_cv__detail__CameraParams___;
constexpr ORB_SLAM2_MapPoint *&std___1___wrap_iter_ORB_SLAM2__MapPoint____::operator*() const noexcept {
    return *this->__i;
}
constexpr std___1___wrap_iter_ORB_SLAM2__MapPoint____ &std___1___wrap_iter_ORB_SLAM2__MapPoint____::operator++() noexcept {
    ++this->__i;
    return *this;
}
std___1___wrap_iter_ORB_SLAM2__MapPoint____ std___1___wrap_iter_ORB_SLAM2__MapPoint____::operator++(int __p1) noexcept {
    std___1___wrap_iter_ORB_SLAM2__MapPoint____ __tmp(*this);
    ++ (*this);
    return __tmp;
}
constexpr ORB_SLAM2_MapPoint **std___1___wrap_iter_ORB_SLAM2__MapPoint____::base() const noexcept {
    return this->__i;
}
std___1___wrap_iter_ORB_SLAM2__MapPoint____::std___1___wrap_iter_ORB_SLAM2__MapPoint____(ORB_SLAM2_MapPoint **__x) noexcept : __i(__x) {
}
class std___1___wrap_iter_ORB_SLAM2__MapPoint__const___;
constexpr ORB_SLAM2_KeyFrame *&std___1___wrap_iter_ORB_SLAM2__KeyFrame____::operator*() const noexcept {
    return *this->__i;
}
constexpr std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &std___1___wrap_iter_ORB_SLAM2__KeyFrame____::operator++() noexcept {
    ++this->__i;
    return *this;
}
std___1___wrap_iter_ORB_SLAM2__KeyFrame____ std___1___wrap_iter_ORB_SLAM2__KeyFrame____::operator++(int __p1) noexcept {
    std___1___wrap_iter_ORB_SLAM2__KeyFrame____ __tmp(*this);
    ++ (*this);
    return __tmp;
}
constexpr ORB_SLAM2_KeyFrame **std___1___wrap_iter_ORB_SLAM2__KeyFrame____::base() const noexcept {
    return this->__i;
}
std___1___wrap_iter_ORB_SLAM2__KeyFrame____::std___1___wrap_iter_ORB_SLAM2__KeyFrame____(ORB_SLAM2_KeyFrame **__x) noexcept : __i(__x) {
}
constexpr ORB_SLAM2_KeyFrame *const &std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___::operator*() const noexcept {
    return *this->__i;
}
constexpr std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___::operator++() noexcept {
    ++this->__i;
    return *this;
}
std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___::operator++(int __p1) noexcept {
    std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ __tmp(*this);
    ++ (*this);
    return __tmp;
}
constexpr ORB_SLAM2_KeyFrame *const *std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___::base() const noexcept {
    return this->__i;
}
std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___::std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___(ORB_SLAM2_KeyFrame *const *__x) noexcept : __i(__x) {
}
class std___1___wrap_iter_std____1__list_ORB_SLAM2__KeyFrame______;
class std___1___wrap_iter_const_std____1__list_ORB_SLAM2__KeyFrame______;
class std___1___wrap_iter_std____1__vector_std____1__vector_unsigned_long_____;
class std___1___wrap_iter_const_std____1__vector_std____1__vector_unsigned_long_____;
class std___1___wrap_iter_std____1__vector_unsigned_long____;
class std___1___wrap_iter_const_std____1__vector_unsigned_long____;
class std___1___wrap_iter_cv__Point__float____;
class std___1___wrap_iter_const_cv__Point__float____;
class std___1___wrap_iter_cv__Point3__float____;
class std___1___wrap_iter_const_cv__Point3__float____;
class std___1___wrap_iter_g2o__HyperGraph__Vertex____;
class std___1___wrap_iter_g2o__HyperGraph__Vertex__const___;
class std___1___wrap_iter_Eigen__Matrix_double___1__1__0____;
class std___1___wrap_iter_const_Eigen__Matrix_double___1__1__0____;
class std___1___wrap_iter_g2o__Parameter_____;
class std___1___wrap_iter_g2o__Parameter___const___;
class std___1___wrap_iter_std____1__set_g2o__HyperGraphAction______;
class std___1___wrap_iter_const_std____1__set_g2o__HyperGraphAction______;
class std___1___wrap_iter_Eigen__Matrix_double__3__1__0____;
class std___1___wrap_iter_const_Eigen__Matrix_double__3__1__0____;
class std___1___wrap_iter_g2o__SE3Quat___;
class std___1___wrap_iter_const_g2o__SE3Quat___;
class std___1___wrap_iter_g2o__Sim3___;
class std___1___wrap_iter_const_g2o__Sim3___;
class std___1___wrap_iter_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____;
class std___1___wrap_iter_const_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int____;
class std___1___wrap_iter_std____1__pair_unsigned_long__unsigned_long____;
class std___1___wrap_iter_const_std____1__pair_unsigned_long__unsigned_long____;
class std___1___wrap_iter1;
class std___1_basic_string2;
class std___1_vector1;
class std___1___wrap_iter2;
class std___1_basic_string3;
class std___1_vector2;
class std___1___wrap_iter3;
class std___1_basic_string4;
class std___1_vector3;
class std___1___wrap_iter4;
class std___1_basic_string5;
class std___1_vector4;
class std___1___wrap_iter5;
class std___1_basic_string6;
class std___1_vector5;
class std___1___wrap_iter6;
class std___1_basic_string7;
class std___1_vector6;
class std___1___wrap_iter7;
class std___1_basic_string8;
class std___1_vector7;
class std___1___wrap_iter8;
class std___1_basic_string9;
class std___1_vector8;
class std___1___wrap_iter9;
class std___1_basic_string10;
class std___1_vector9;
class std___1___wrap_iter10;
class std___1_basic_string11;
class std___1_vector10;
class std___1___wrap_iter11;
class std___1_basic_string12;
class std___1_vector11;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator==(const std___1___wrap_iter_double___ &__x, const std___1___wrap_iter_double___ &__y) noexcept  {
    return __x.base() == __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator==(const std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &__x, const std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &__y) noexcept  {
    return __x.base() == __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator==(const std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &__x, const std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &__y) noexcept  {
    return __x.base() == __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator==(const std___1___wrap_iter_ORB_SLAM2__MapPoint____ &__x, const std___1___wrap_iter_ORB_SLAM2__MapPoint____ &__y) noexcept  {
    return __x.base() == __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator==(const std___1___wrap_iter_const_unsigned_int___ &__x, const std___1___wrap_iter_unsigned_int___ &__y) noexcept  {
    return __x.base() == __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator!=(const std___1___wrap_iter_double___ &__x, const std___1___wrap_iter_double___ &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator!=(const std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &__x, const std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator!=(const std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &__x, const std___1___wrap_iter_ORB_SLAM2__KeyFrame____ &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator!=(const std___1___wrap_iter_ORB_SLAM2__MapPoint____ &__x, const std___1___wrap_iter_ORB_SLAM2__MapPoint____ &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr bool operator!=(const std___1___wrap_iter_const_unsigned_int___ &__x, const std___1___wrap_iter_unsigned_int___ &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) constexpr auto operator-(const std___1___wrap_iter_double___ &__x, const std___1___wrap_iter_double___ &__y) noexcept -> decltype(__x.base() - __y.base())  {
    return __x.base() - __y.base();
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_int___int__void_(std___1_allocator_int_ &__p1, int *__begin1, int *__end1, int *&__end2)  {
    ptrdiff_t _Np = __end1 - __begin1;
    __end2 -= _Np;
    if (_Np > 0) {
        memcpy(static_cast<void *>(__end2), static_cast<const void *>(__begin1), _Np * sizeof(int));
    }
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_unsigned_int___unsigned_int__void_(std___1_allocator_unsigned_int_ &__p1, unsigned int *__begin1, unsigned int *__end1, unsigned int *&__end2)  {
    ptrdiff_t _Np = __end1 - __begin1;
    __end2 -= _Np;
    if (_Np > 0) {
        memcpy(static_cast<void *>(__end2), static_cast<const void *>(__begin1), _Np * sizeof(unsigned int));
    }
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__KeyFrame_____ORB_SLAM2__KeyFrame____void_(std___1_allocator_ORB_SLAM2__KeyFrame___ &__p1, ORB_SLAM2_KeyFrame **__begin1, ORB_SLAM2_KeyFrame **__end1, ORB_SLAM2_KeyFrame **&__end2)  {
    ptrdiff_t _Np = __end1 - __begin1;
    __end2 -= _Np;
    if (_Np > 0) {
        memcpy(static_cast<void *>(__end2), static_cast<const void *>(__begin1), _Np * sizeof(ORB_SLAM2_KeyFrame *));
    }
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void std___1___construct_backward_with_exception_guarantees_std____1__allocator_ORB_SLAM2__MapPoint_____ORB_SLAM2__MapPoint____void_(std___1_allocator_ORB_SLAM2__MapPoint___ &__p1, ORB_SLAM2_MapPoint **__begin1, ORB_SLAM2_MapPoint **__end1, ORB_SLAM2_MapPoint **&__end2)  {
    ptrdiff_t _Np = __end1 - __begin1;
    __end2 -= _Np;
    if (_Np > 0) {
        memcpy(static_cast<void *>(__end2), static_cast<const void *>(__begin1), _Np * sizeof(ORB_SLAM2_MapPoint *));
    }
}
struct std___1___noexcept_move_assign_container {
};
struct std___1___noexcept_move_assign_container_std____1__allocator_ORB_SLAM2__MapPoint_____std____1__allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint_____ : public std___1_integral_constant_bool__true_ {
};
struct std___1___is_allocator {
};
struct std___1___is_allocator_std____1__allocator_char___void__void_ : std___1_integral_constant_bool__true_ {
};
class std___1_function;
struct std___1___comp_ref_type {
};
struct std___1___unwrap_iter_impl {
};
struct std___1___unwrap_iter_impl_const_char____true_ {
     __attribute__((linkage("linkonce_odr"))) static decltype(std___1___to_address_const_char_(std___1_declval_const_char___())) __apply(const char *__i) noexcept ;
};
decltype(std___1___to_address_const_char_(std___1_declval_const_char___())) std___1___unwrap_iter_impl_const_char____true_::__apply(const char *__i) noexcept {
    return std___1___to_address_const_char_(__i);
}
struct std___1___unwrap_iter_impl_char____true_ {
     __attribute__((linkage("linkonce_odr"))) static decltype(std___1___to_address_char_(std___1_declval_char___())) __apply(char *__i) noexcept ;
};
decltype(std___1___to_address_char_(std___1_declval_char___())) std___1___unwrap_iter_impl_char____true_::__apply(char *__i) noexcept {
    return std___1___to_address_char_(__i);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline decltype(std___1___unwrap_iter_impl_const_char____true_::__apply(std___1_declval_const_char___())) std___1___unwrap_iter_const_char____std____1____unwrap_iter_impl_const_char____true__(const char *__i) noexcept  {
    return std___1___unwrap_iter_impl_const_char____true_::__apply(__i);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline decltype(std___1___unwrap_iter_impl_char____true_::__apply(std___1_declval_char___())) std___1___unwrap_iter_char____std____1____unwrap_iter_impl_char____true__(char *__i) noexcept  {
    return std___1___unwrap_iter_impl_char____true_::__apply(__i);
}
 __attribute__((linkage("linkonce_odr"))) char *std___1___rewrap_iter_char___(char *__p1, char *__result)  {
    return __result;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1___copy_constexpr_const_char____char___(const char *__first, const char *__last, char *__result)  {
    for (; __first != __last; ++__first , (void)++__result) {
        *__result = *__first;
    }
    return __result;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1___copy_const_char__char_(const char *__first, const char *__last, char *__result)  {
    const size_t __n = static_cast<size_t>(__last - __first);
    if (__n > 0) {
        memmove(__result, __first, __n * sizeof(char));
    }
    return __result + __n;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1_copy_const_char____char___(const char *__first, const char *__last, char *__result)  {
    if (std___1___libcpp_is_constant_evaluated()) {
        return std___1___copy_constexpr_const_char____char___(__first, __last, __result);
    } else {
        return std___1___rewrap_iter_char___(__result, std___1___copy_const_char__char_(std___1___unwrap_iter_const_char____std____1____unwrap_iter_impl_const_char____true__(__first), std___1___unwrap_iter_const_char____std____1____unwrap_iter_impl_const_char____true__(__last), std___1___unwrap_iter_char____std____1____unwrap_iter_impl_char____true__(__result)));
    }
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1_copy_n_const_char____unsigned_long__char___(const char *__first, unsigned long __orig_n, char *__result)  {
    typedef decltype(std___1___convert_to_integral3(__orig_n)) _IntegralSize;
    _IntegralSize __n = __orig_n;
    return std___1_copy_const_char____char___(__first, __first + __n, __result);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1___fill_n_char____unsigned_long__char_(char *__first, unsigned long __n, const char &__value_)  {
    for (; __n > 0; ++__first , (void)--__n) {
        *__first = __value_;
    }
    return __first;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *std___1_fill_n_char____unsigned_long__char_(char *__first, unsigned long __n, const char &__value_)  {
    return std___1___fill_n_char____unsigned_long__char_(__first, std___1___convert_to_integral3(__n), __value_);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const unsigned long &std___1_min_unsigned_long__std____1____less_unsigned_long__(const unsigned long &__a, const unsigned long &__b, std___1___less_unsigned_long__unsigned_long_ __comp)  {
    return __comp(__b, __a) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const int &std___1_min_int__std____1____less_int__(const int &__a, const int &__b, std___1___less_int__int_ __comp)  {
    return __comp(__b, __a) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const float &std___1_min_float__std____1____less_float__(const float &__a, const float &__b, std___1___less_float__float_ __comp)  {
    return __comp(__b, __a) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const unsigned long &std___1_min_unsigned_long_(const unsigned long &__a, const unsigned long &__b)  {
    return std___1_min_unsigned_long__std____1____less_unsigned_long__(__a, __b, std___1___less_unsigned_long__unsigned_long_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const int &std___1_min_int_(const int &__a, const int &__b)  {
    return std___1_min_int__std____1____less_int__(__a, __b, std___1___less_int__int_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const float &std___1_min_float_(const float &__a, const float &__b)  {
    return std___1_min_float__std____1____less_float__(__a, __b, std___1___less_float__float_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const int &std___1_max_int__std____1____less_int__(const int &__a, const int &__b, std___1___less_int__int_ __comp)  {
    return __comp(__a, __b) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const unsigned long &std___1_max_unsigned_long__std____1____less_unsigned_long__(const unsigned long &__a, const unsigned long &__b, std___1___less_unsigned_long__unsigned_long_ __comp)  {
    return __comp(__a, __b) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr const float &std___1_max_float__std____1____less_float__(const float &__a, const float &__b, std___1___less_float__float_ __comp)  {
    return __comp(__a, __b) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline constexpr char *const &std___1_max_char____std____1____less_char____(char *const &__a, char *const &__b, std___1___less_char____char___ __comp)  {
    return __comp(__a, __b) ? __b : __a;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const int &std___1_max_int_(const int &__a, const int &__b)  {
    return std___1_max_int__std____1____less_int__(__a, __b, std___1___less_int__int_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const unsigned long &std___1_max_unsigned_long_(const unsigned long &__a, const unsigned long &__b)  {
    return std___1_max_unsigned_long__std____1____less_unsigned_long__(__a, __b, std___1___less_unsigned_long__unsigned_long_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const float &std___1_max_float_(const float &__a, const float &__b)  {
    return std___1_max_float__std____1____less_float__(__a, __b, std___1___less_float__float_());
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline char *const &std___1_max_char___(char *const &__a, char *const &__b)  {
    return std___1_max_char____std____1____less_char____(__a, __b, std___1___less_char____char___());
}
class std___1_uniform_int_distribution {
};
class std___1___bit_iterator;
class  std___1___bit_iterator_std____1__vector_bool___false__0UL_  {
public:
    unsigned long *__seg_;
    unsigned int __ctz_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bit_iterator_std____1__vector_bool___false__0UL_(const std___1___bit_iterator_std____1__vector_bool___false__0UL_ &__it) noexcept ;
};
class std___1___bit_iterator_std____1__vector_bool___true__0UL_;
class std___1___bit_const_reference;
class std___1___bit_const_reference_std____1__vector_bool__;
struct std___1___has_storage_type {
};
class std___1___bit_reference {
};
class std___1___bit_reference_std____1__vector_bool___true_ {
public:
    unsigned long *__seg_;
    size_t __mask_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) operator bool() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___bit_reference_std____1__vector_bool___true_ &operator=(bool __x) noexcept ;
};
class std___1___bit_const_reference1 {
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_fill_std____1__vector_bool__(std___1___bit_iterator_std____1__vector_bool___false__0UL_ __first, std___1___bit_iterator_std____1__vector_bool___false__0UL_ __last, bool __value_) ;

class std___1___bit_iterator1 {
};
class std___1___split_buffer_common {
};
struct std___1___split_buffer {
};
struct std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction {
     __attribute__((linkage("linkonce_odr"))) explicit std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction(int **__p, size_t __n) noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction() noexcept ;
    int *__pos_;
    int *const __end_;
    int **__dest_;
};
std___1_allocator_int_ &std___1___split_buffer_int__std____1__allocator_int____::__alloc() noexcept {
    return this->__end_cap_.second();
}
int *&std___1___split_buffer_int__std____1__allocator_int____::__end_cap() noexcept {
    return this->__end_cap_.first();
}
int *const &std___1___split_buffer_int__std____1__allocator_int____::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___split_buffer_int__std____1__allocator_int____::std___1___split_buffer_int__std____1__allocator_int____(size_t __cap, size_t __start, std___1_allocator_int_ &__a) : __end_cap_(nullptr, __a) {
    this->__first_ = __cap != 0 ? std___1_allocator_traits_std____1__allocator_int__::allocate(this->__alloc(), __cap) : nullptr;
    this->__begin_ = this->__end_ = this->__first_ + __start;
    this->__end_cap() = this->__first_ + __cap;
}
std___1___split_buffer_int__std____1__allocator_int____::~std___1___split_buffer_int__std____1__allocator_int____() noexcept {
    this->clear();
    if (this->__first_) {
        std___1_allocator_traits_std____1__allocator_int__::deallocate(this->__alloc(), this->__first_, this->capacity());
    }
}
void std___1___split_buffer_int__std____1__allocator_int____::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___split_buffer_int__std____1__allocator_int____::capacity() const {
    return static_cast<size_t>(this->__end_cap() - this->__first_);
}
void std___1___split_buffer_int__std____1__allocator_int____::__construct_at_end(size_t __n) {
    std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction __tx(&this->__end_, __n);
    for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
        std___1_allocator_traits_std____1__allocator_int__::construct_int__void_(this->__alloc(), std___1___to_address_int_(__tx.__pos_));
    }
}
void std___1___split_buffer_int__std____1__allocator_int____::__construct_at_end(size_t __n, const int &__x) {
    std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction __tx(&this->__end_, __n);
    for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
        std___1_allocator_traits_std____1__allocator_int__::construct_int__const_int____void_(this->__alloc(), std___1___to_address_int_(__tx.__pos_), __x);
    }
}
void std___1___split_buffer_int__std____1__allocator_int____::__destruct_at_end(int *__new_last) noexcept {
    this->__destruct_at_end(__new_last, std___1_false_type());
}
inline void std___1___split_buffer_int__std____1__allocator_int____::__destruct_at_end(int *__new_last, std___1_false_type __p2) noexcept {
    while (__new_last != this->__end_)
        {
            std___1_allocator_traits_std____1__allocator_int__::destroy_int__void_(this->__alloc(), std___1___to_address_int_(--this->__end_));
        }
}
std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction::std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction(int **__p, size_t __n) noexcept : __pos_(*__p), __end_(*__p + __n), __dest_(__p) {
}
std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction::~std___1___split_buffer_int__std____1__allocator_int______ConstructTransaction() noexcept {
    *this->__dest_ = this->__pos_;
}
struct std___1___split_buffer_unsigned_char__std____1__allocator_unsigned_char____;
struct std___1___split_buffer_cv__Mat__std____1__allocator_cv__Mat____;
struct std___1___split_buffer_cv__UMat__std____1__allocator_cv__UMat____;
struct std___1___split_buffer_cv__cuda__GpuMat__std____1__allocator_cv__cuda__GpuMat____;
struct std___1___split_buffer_std____1__vector_bool___std____1__allocator_std____1__vector_bool_____;
struct std___1___split_buffer_cv__Range__std____1__allocator_cv__Range____;
struct std___1___split_buffer_cv__DMatch__std____1__allocator_cv__DMatch____;
struct std___1___split_buffer_cv__KeyPoint__std____1__allocator_cv__KeyPoint____;
std___1_allocator_unsigned_int_ &std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::__alloc() noexcept {
    return this->__end_cap_.second();
}
unsigned int *&std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::__end_cap() noexcept {
    return this->__end_cap_.first();
}
unsigned int *const &std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____(size_t __cap, size_t __start, std___1_allocator_unsigned_int_ &__a) : __end_cap_(nullptr, __a) {
    this->__first_ = __cap != 0 ? std___1_allocator_traits_std____1__allocator_unsigned_int__::allocate(this->__alloc(), __cap) : nullptr;
    this->__begin_ = this->__end_ = this->__first_ + __start;
    this->__end_cap() = this->__first_ + __cap;
}
std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::~std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____() noexcept {
    this->clear();
    if (this->__first_) {
        std___1_allocator_traits_std____1__allocator_unsigned_int__::deallocate(this->__alloc(), this->__first_, this->capacity());
    }
}
void std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::capacity() const {
    return static_cast<size_t>(this->__end_cap() - this->__first_);
}
void std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::__destruct_at_end(unsigned int *__new_last) noexcept {
    this->__destruct_at_end(__new_last, std___1_false_type());
}
inline void std___1___split_buffer_unsigned_int__std____1__allocator_unsigned_int____::__destruct_at_end(unsigned int *__new_last, std___1_false_type __p2) noexcept {
    while (__new_last != this->__end_)
        {
            std___1_allocator_traits_std____1__allocator_unsigned_int__::destroy_unsigned_int__void_(this->__alloc(), std___1___to_address_unsigned_int_(--this->__end_));
        }
}
struct std___1___split_buffer_char__std____1__allocator_char____;
struct std___1___split_buffer_std____1__vector_char___std____1__allocator_std____1__vector_char_____;
struct std___1___split_buffer_std____1__pair_float__unsigned_int___std____1__allocator_std____1__pair_float__unsigned_int_____;
struct std___1___split_buffer_cv__Subdiv2D__Vertex__std____1__allocator_cv__Subdiv2D__Vertex____;
struct std___1___split_buffer_cv__Subdiv2D__QuadEdge__std____1__allocator_cv__Subdiv2D__QuadEdge____;
struct std___1___split_buffer_cv__Point__int___std____1__allocator_cv__Point__int_____;
struct std___1___split_buffer_float__std____1__allocator_float____;
struct std___1___split_buffer_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject____;
struct std___1___split_buffer_std____1__list_cv__detail__GraphEdge___std____1__allocator_std____1__list_cv__detail__GraphEdge_____;
struct std___1___split_buffer_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int_____;
struct std___1___split_buffer_cv__Scalar__double___std____1__allocator_cv__Scalar__double_____;
struct std___1___split_buffer_cv__Size__int___std____1__allocator_cv__Size__int_____;
struct std___1___split_buffer_cv__detail__DpSeamFinder__ComponentState__std____1__allocator_cv__detail__DpSeamFinder__ComponentState____;
struct std___1___split_buffer_std____1__vector_cv__Point__int____std____1__allocator_std____1__vector_cv__Point__int______;
struct std___1___split_buffer_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures____;
struct std___1___split_buffer_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo____;
struct std___1___split_buffer_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams____;
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::__alloc() noexcept {
    return this->__end_cap_.second();
}
ORB_SLAM2_MapPoint **&std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::__end_cap() noexcept {
    return this->__end_cap_.first();
}
ORB_SLAM2_MapPoint **const &std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______(size_t __cap, size_t __start, std___1_allocator_ORB_SLAM2__MapPoint___ &__a) : __end_cap_(nullptr, __a) {
    this->__first_ = __cap != 0 ? std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::allocate(this->__alloc(), __cap) : nullptr;
    this->__begin_ = this->__end_ = this->__first_ + __start;
    this->__end_cap() = this->__first_ + __cap;
}
std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::~std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______() noexcept {
    this->clear();
    if (this->__first_) {
        std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::deallocate(this->__alloc(), this->__first_, this->capacity());
    }
}
void std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::capacity() const {
    return static_cast<size_t>(this->__end_cap() - this->__first_);
}
void std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::__destruct_at_end(ORB_SLAM2_MapPoint **__new_last) noexcept {
    this->__destruct_at_end(__new_last, std___1_false_type());
}
inline void std___1___split_buffer_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint______::__destruct_at_end(ORB_SLAM2_MapPoint **__new_last, std___1_false_type __p2) noexcept {
    while (__new_last != this->__end_)
        {
            std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::destroy_ORB_SLAM2__MapPoint____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__MapPoint___(--this->__end_));
        }
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::__alloc() noexcept {
    return this->__end_cap_.second();
}
ORB_SLAM2_KeyFrame **&std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::__end_cap() noexcept {
    return this->__end_cap_.first();
}
ORB_SLAM2_KeyFrame **const &std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______(size_t __cap, size_t __start, std___1_allocator_ORB_SLAM2__KeyFrame___ &__a) : __end_cap_(nullptr, __a) {
    this->__first_ = __cap != 0 ? std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::allocate(this->__alloc(), __cap) : nullptr;
    this->__begin_ = this->__end_ = this->__first_ + __start;
    this->__end_cap() = this->__first_ + __cap;
}
std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::~std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______() noexcept {
    this->clear();
    if (this->__first_) {
        std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::deallocate(this->__alloc(), this->__first_, this->capacity());
    }
}
void std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::capacity() const {
    return static_cast<size_t>(this->__end_cap() - this->__first_);
}
void std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::__destruct_at_end(ORB_SLAM2_KeyFrame **__new_last) noexcept {
    this->__destruct_at_end(__new_last, std___1_false_type());
}
inline void std___1___split_buffer_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame______::__destruct_at_end(ORB_SLAM2_KeyFrame **__new_last, std___1_false_type __p2) noexcept {
    while (__new_last != this->__end_)
        {
            std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::destroy_ORB_SLAM2__KeyFrame____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__KeyFrame___(--this->__end_));
        }
}
struct std___1___split_buffer_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_______;
struct std___1___split_buffer_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long______;
struct std___1___split_buffer_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long_____;
struct std___1___split_buffer_cv__Point__float___std____1__allocator_cv__Point__float_____;
struct std___1___split_buffer_cv__Point3__float___std____1__allocator_cv__Point3__float_____;
struct std___1___split_buffer_Eigen__Matrix_double___1__1__0___Eigen__aligned_allocator_Eigen__Matrix_double___1__1__0_____;
struct std___1___split_buffer_std____1__set_g2o__HyperGraphAction_____std____1__allocator_std____1__set_g2o__HyperGraphAction_______;
struct std___1___split_buffer_Eigen__Matrix_double__3__1__0___Eigen__aligned_allocator_Eigen__Matrix_double__3__1__0_____;
struct std___1___split_buffer_g2o__Sim3__Eigen__aligned_allocator_g2o__Sim3____;
struct std___1___split_buffer_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int_____;
struct std___1___split_buffer_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long_____;
class std___1___vector_base_common {
};
std___1___vector_base_common_true_::std___1___vector_base_common_true_() {
}
class std___1___vector_base {
};
std___1_allocator_int_ &std___1___vector_base_int__std____1__allocator_int__::__alloc() noexcept {
    return this->__end_cap_.second();
}
const std___1_allocator_int_ &std___1___vector_base_int__std____1__allocator_int__::__alloc() const noexcept {
    return this->__end_cap_.second();
}
int *&std___1___vector_base_int__std____1__allocator_int__::__end_cap() noexcept {
    return this->__end_cap_.first();
}
int *const &std___1___vector_base_int__std____1__allocator_int__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_int__std____1__allocator_int__::std___1___vector_base_int__std____1__allocator_int__() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
std___1___vector_base_int__std____1__allocator_int__::~std___1___vector_base_int__std____1__allocator_int__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_int__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_int__std____1__allocator_int__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_int__std____1__allocator_int__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_int__std____1__allocator_int__::__destruct_at_end(int *__new_last) noexcept {
    int *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_int__::destroy_int__void_(this->__alloc(), std___1___to_address_int_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
void std___1___vector_base_int__std____1__allocator_int__::__throw_length_error() const {
    this->std___1___vector_base_common_true_::__throw_length_error();
}
std___1_allocator_unsigned_long_ &std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::__alloc() noexcept {
    return this->__end_cap_.second();
}
unsigned long *const &std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::~std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_unsigned_long__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_unsigned_long__std____1__allocator_unsigned_long__::__destruct_at_end(unsigned long *__new_last) noexcept {
    unsigned long *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_unsigned_long__::destroy_unsigned_long__void_(this->__alloc(), std___1___to_address_unsigned_long_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_cv__Mat_ &std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::__alloc() noexcept {
    return this->__end_cap_.second();
}
cv_Mat *const &std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::~std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_cv__Mat__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_cv__Mat__std____1__allocator_cv__Mat__::__destruct_at_end(cv_Mat *__new_last) noexcept {
    cv_Mat *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_cv__Mat__::destroy_cv__Mat__void_(this->__alloc(), std___1___to_address_cv__Mat_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_cv__UMat_ &std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::__alloc() noexcept {
    return this->__end_cap_.second();
}
cv_UMat *const &std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::~std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_cv__UMat__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_cv__UMat__std____1__allocator_cv__UMat__::__destruct_at_end(cv_UMat *__new_last) noexcept {
    cv_UMat *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_cv__UMat__::destroy_cv__UMat__void_(this->__alloc(), std___1___to_address_cv__UMat_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_cv__KeyPoint_ &std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::__alloc() noexcept {
    return this->__end_cap_.second();
}
cv_KeyPoint *const &std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::~std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_cv__KeyPoint__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_cv__KeyPoint__std____1__allocator_cv__KeyPoint__::__destruct_at_end(cv_KeyPoint *__new_last) noexcept {
    cv_KeyPoint *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_cv__KeyPoint__::destroy_cv__KeyPoint__void_(this->__alloc(), std___1___to_address_cv__KeyPoint_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_unsigned_int_ &std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__alloc() noexcept {
    return this->__end_cap_.second();
}
const std___1_allocator_unsigned_int_ &std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__alloc() const noexcept {
    return this->__end_cap_.second();
}
unsigned int *&std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__end_cap() noexcept {
    return this->__end_cap_.first();
}
unsigned int *const &std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::~std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_unsigned_int__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__destruct_at_end(unsigned int *__new_last) noexcept {
    unsigned int *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_unsigned_int__::destroy_unsigned_int__void_(this->__alloc(), std___1___to_address_unsigned_int_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
void std___1___vector_base_unsigned_int__std____1__allocator_unsigned_int__::__throw_length_error() const {
    this->std___1___vector_base_common_true_::__throw_length_error();
}
std___1_allocator_std____1__vector_unsigned_int__ &std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::__alloc() noexcept {
    return this->__end_cap_.second();
}
std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *const &std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::~std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_int___::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_std____1__vector_unsigned_int___std____1__allocator_std____1__vector_unsigned_int___::__destruct_at_end(std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__new_last) noexcept {
    std___1_vector_unsigned_int__std____1__allocator_unsigned_int__ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_int___::destroy_std____1__vector_unsigned_int___void_(this->__alloc(), std___1___to_address_std____1__vector_unsigned_int__(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_cv__Point__int__ &std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::__alloc() noexcept {
    return this->__end_cap_.second();
}
cv_Point__int_ *const &std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::~std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_cv__Point__int___::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_cv__Point__int___std____1__allocator_cv__Point__int___::__destruct_at_end(cv_Point__int_ *__new_last) noexcept {
    cv_Point__int_ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_cv__Point__int___::destroy_cv__Point__int___void_(this->__alloc(), std___1___to_address_cv__Point__int__(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_float_ &std___1___vector_base_float__std____1__allocator_float__::__alloc() noexcept {
    return this->__end_cap_.second();
}
float *const &std___1___vector_base_float__std____1__allocator_float__::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_float__std____1__allocator_float__::~std___1___vector_base_float__std____1__allocator_float__() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_float__::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_float__std____1__allocator_float__::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_float__std____1__allocator_float__::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_float__std____1__allocator_float__::__destruct_at_end(float *__new_last) noexcept {
    float *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_float__::destroy_float__void_(this->__alloc(), std___1___to_address_float_(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_std____1__pair_int__int__ &std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::__alloc() noexcept {
    return this->__end_cap_.second();
}
std___1_pair_int__int_ *const &std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::~std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_std____1__pair_int__int___::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___::__destruct_at_end(std___1_pair_int__int_ *__new_last) noexcept {
    std___1_pair_int__int_ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_std____1__pair_int__int___::destroy_std____1__pair_int__int___void_(this->__alloc(), std___1___to_address_std____1__pair_int__int__(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__alloc() noexcept {
    return this->__end_cap_.second();
}
const std___1_allocator_ORB_SLAM2__MapPoint___ &std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__alloc() const noexcept {
    return this->__end_cap_.second();
}
ORB_SLAM2_MapPoint **&std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_cap() noexcept {
    return this->__end_cap_.first();
}
ORB_SLAM2_MapPoint **const &std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
inline std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____(std___1_allocator_ORB_SLAM2__MapPoint___ &&__a) noexcept : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1_move_std____1__allocator_ORB_SLAM2__MapPoint______(__a)) {
}
std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::~std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__destruct_at_end(ORB_SLAM2_MapPoint **__new_last) noexcept {
    ORB_SLAM2_MapPoint **__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_ORB_SLAM2__MapPoint____::destroy_ORB_SLAM2__MapPoint____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__MapPoint___(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
void std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__move_assign_alloc(std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c) noexcept(!std___1_integral_constant_bool__true_::value || std___1_integral_constant_bool__true_::value) {
    this->__move_assign_alloc(__c, std___1_integral_constant_bool__true_());
}
void std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__throw_length_error() const {
    this->std___1___vector_base_common_true_::__throw_length_error();
}
void std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__move_assign_alloc(std___1___vector_base_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &__c, std___1_true_type __p2) noexcept(std___1_integral_constant_bool__true_::value) {
    this->__alloc() = std___1_move_std____1__allocator_ORB_SLAM2__MapPoint______(__c.__alloc());
}
std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__alloc() noexcept {
    return this->__end_cap_.second();
}
const std___1_allocator_ORB_SLAM2__KeyFrame___ &std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__alloc() const noexcept {
    return this->__end_cap_.second();
}
ORB_SLAM2_KeyFrame **&std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_cap() noexcept {
    return this->__end_cap_.first();
}
ORB_SLAM2_KeyFrame **const &std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
inline std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____(std___1_allocator_ORB_SLAM2__KeyFrame___ &&__a) noexcept : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1_move_std____1__allocator_ORB_SLAM2__KeyFrame______(__a)) {
}
std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::~std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__destruct_at_end(ORB_SLAM2_KeyFrame **__new_last) noexcept {
    ORB_SLAM2_KeyFrame **__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_ORB_SLAM2__KeyFrame____::destroy_ORB_SLAM2__KeyFrame____void_(this->__alloc(), std___1___to_address_ORB_SLAM2__KeyFrame___(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
void std___1___vector_base_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__throw_length_error() const {
    this->std___1___vector_base_common_true_::__throw_length_error();
}
std___1_allocator_std____1__vector_std____1__vector_unsigned_long___ &std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::__alloc() noexcept {
    return this->__end_cap_.second();
}
std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *const &std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::~std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::__destruct_at_end(std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__new_last) noexcept {
    std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_std____1__vector_std____1__vector_unsigned_long____::destroy_std____1__vector_std____1__vector_unsigned_long____void_(this->__alloc(), std___1___to_address_std____1__vector_std____1__vector_unsigned_long___(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_std____1__vector_unsigned_long__ &std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::__alloc() noexcept {
    return this->__end_cap_.second();
}
std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *const &std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::~std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_long___::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___::__destruct_at_end(std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__new_last) noexcept {
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_std____1__vector_unsigned_long___::destroy_std____1__vector_unsigned_long___void_(this->__alloc(), std___1___to_address_std____1__vector_unsigned_long__(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
std___1_allocator_std____1__pair_unsigned_long__unsigned_long__ &std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::__alloc() noexcept {
    return this->__end_cap_.second();
}
std___1_pair_unsigned_long__unsigned_long_ *const &std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::__end_cap() const noexcept {
    return this->__end_cap_.first();
}
inline std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept(std___1_integral_constant_bool__true_::value) : __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, std___1___default_init_tag()) {
}
std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::~std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___() noexcept {
    if (this->__begin_ != nullptr) {
        this->clear();
        std___1_allocator_traits_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::deallocate(this->__alloc(), this->__begin_, this->capacity());
    }
}
void std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::clear() noexcept {
    this->__destruct_at_end(this->__begin_);
}
size_t std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::capacity() const noexcept {
    return static_cast<size_t>(this->__end_cap() - this->__begin_);
}
inline void std___1___vector_base_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::__destruct_at_end(std___1_pair_unsigned_long__unsigned_long_ *__new_last) noexcept {
    std___1_pair_unsigned_long__unsigned_long_ *__soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
        {
            std___1_allocator_traits_std____1__allocator_std____1__pair_unsigned_long__unsigned_long___::destroy_std____1__pair_unsigned_long__unsigned_long___void_(this->__alloc(), std___1___to_address_std____1__pair_unsigned_long__unsigned_long__(--__soon_to_be_end));
        }
    this->__end_ = __new_last;
}
class std___1_vector12 {
};
struct std___1_char_traits1 {
};
static inline char *std___1___copy_constexpr_char_(char *__s1, const char *__s2, size_t __n) noexcept {
    std___1_copy_n_const_char____unsigned_long__char___(__s2, __n, __s1);
    return __s1;
}
static inline char *std___1___assign_constexpr_char_(char *__s, size_t __n, char __a) noexcept {
    std___1_fill_n_char____unsigned_long__char_(__s, __n, __a);
    return __s;
}
inline void std___1_char_traits_char_1::assign(char &__c1, const char &__c2) noexcept {
    __c1 = __c2;
}
inline constexpr bool std___1_char_traits_char_1::eq(char __c1, char __c2) noexcept {
    return __c1 == __c2;
}
inline size_t std___1_char_traits_char_1::length(const char *__s) noexcept {
    return __builtin_strlen(__s);
}
inline char *std___1_char_traits_char_1::copy(char *__s1, const char *__s2, size_t __n) noexcept {
    ((void)0);
    return std___1___libcpp_is_constant_evaluated() ? std___1___copy_constexpr_char_(__s1, __s2, __n) : __n == 0 ? __s1 : (char *)memcpy(__s1, __s2, __n);
}
inline char *std___1_char_traits_char_1::assign(char *__s, size_t __n, char __a) noexcept {
    return std___1___libcpp_is_constant_evaluated() ? std___1___assign_constexpr_char_(__s, __n, __a) : __n == 0 ? __s : (char *)memset(__s, to_int_type(__a), __n);
}
inline constexpr int std___1_char_traits_char_1::not_eof(int __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
}
inline constexpr char std___1_char_traits_char_1::to_char_type(int __c) noexcept {
    return (char(__c));
}
inline constexpr int std___1_char_traits_char_1::to_int_type(char __c) noexcept {
    return (int((unsigned char)__c));
}
inline constexpr bool std___1_char_traits_char_1::eq_int_type(int __c1, int __c2) noexcept {
    return __c1 == __c2;
}
inline constexpr int std___1_char_traits_char_1::eof() noexcept {
    return (int((-1)));
}
 __attribute__((linkage("linkonce_odr"))) inline int std___1_char_traits_char_1::compare(const char *__s1, const char *__s2, size_t __n) noexcept  {
    if (__n == 0) {
        return 0;
    }
    return __builtin_memcmp(__s1, __s2, __n);
}
struct __attribute__((type_visibility("default")))  std___1_char_traits_wchar_t_1  {
};
struct __attribute__((type_visibility("default")))  std___1_char_traits_char16_t_1  {
};
struct __attribute__((type_visibility("default")))  std___1_char_traits_char32_t_1  {
};
struct std___1___quoted_output_proxy {
};
extern "C" {
}
extern "C" {
}
class std___1_basic_string_view;
class  std___1_basic_string_view_char__std____1__char_traits_char__  {
public:
    const char *__data;
    size_t __size;
};
class  std___1_basic_string_view_char16_t__std____1__char_traits_char16_t__  {
public:
    const char16_t *__data;
    size_t __size;
};
class  std___1_basic_string_view_char32_t__std____1__char_traits_char32_t__  {
public:
    const char32_t *__data;
    size_t __size;
};
class  std___1_basic_string_view_wchar_t__std____1__char_traits_wchar_t__  {
public:
    const wchar_t *__data;
    size_t __size;
};
typedef std___1_basic_string_view_char__std____1__char_traits_char__ std___1_string_view;

typedef std___1_basic_string_view_char16_t__std____1__char_traits_char16_t__ std___1_u16string_view;

typedef std___1_basic_string_view_char32_t__std____1__char_traits_char32_t__ std___1_u32string_view;

typedef std___1_basic_string_view_wchar_t__std____1__char_traits_wchar_t__ std___1_wstring_view;

class std___1_basic_string_view1 {
};
class std___1_fpos1 {
};
 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("available_externally"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const char *__p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((visibility("default"))) __attribute__((linkage("available_externally"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const char *__x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const wchar_t *__p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const wchar_t *__x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const char16_t *__p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const char16_t *__x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const char32_t *__p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const char32_t *__x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(char __p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(char __x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(wchar_t __p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(wchar_t __x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(char16_t __p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(char16_t __x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(char32_t __p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(char32_t __x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, const char *__p2) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, const char *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, const wchar_t *__p2) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, const wchar_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, const char16_t *__p2) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, const char16_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, const char32_t *__p2) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, const char32_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, char __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, char __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, wchar_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, wchar_t __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, char16_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, char16_t __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, char32_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, char32_t __y) ;

class std___1___basic_string_common {
};
struct std___1___string_is_trivial_iterator {
};
struct std___1___can_be_converted_to_string_view {
};
typedef std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ std___1_u16string;

typedef std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ std___1_u32string;

class std___1_basic_string13 {
};
 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("available_externally"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const char *__p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((visibility("default"))) __attribute__((linkage("available_externally"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const char *__x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const wchar_t *__p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const wchar_t *__x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const char16_t *__p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const char16_t *__x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const char32_t *__p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const char32_t *__x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(char __p1, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(char __x, const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(wchar_t __p1, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(wchar_t __x, const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(char16_t __p1, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(char16_t __x, const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(char32_t __p1, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(char32_t __x, const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, const char *__p2) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, const char *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, const wchar_t *__p2) ;

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, const wchar_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, const char16_t *__p2) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, const char16_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, const char32_t *__p2) ;

 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, const char32_t *__y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__p1, char __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ operator+(const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ &__x, char __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__p1, wchar_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ operator+(const std___1_basic_string_wchar_t__std____1__char_traits_wchar_t___std____1__allocator_wchar_t__ &__x, wchar_t __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__p1, char16_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ operator+(const std___1_basic_string_char16_t__std____1__char_traits_char16_t___std____1__allocator_char16_t__ &__x, char16_t __y) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__p1, char32_t __p2) ;

 __attribute__((linkage("linkonce_odr"))) std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ operator+(const std___1_basic_string_char32_t__std____1__char_traits_char32_t___std____1__allocator_char32_t__ &__x, char32_t __y) ;

class __attribute__((visibility("default")))  std___1_error_condition ;

class __attribute__((visibility("default")))  std___1_error_code ;

class __attribute__((visibility("default")))  std___1_error_category  {
public:
    virtual ~std___1_error_category() noexcept;
    virtual const char *name() const noexcept = 0;
    virtual std___1_error_condition default_error_condition(int __ev) const noexcept;
    virtual bool equivalent(int __code, const std___1_error_condition &__condition) const noexcept;
    virtual bool equivalent(const std___1_error_code &__code, int __condition) const noexcept;
    virtual std___1_string message(int __ev) const = 0;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator==(const std___1_error_category &__rhs) const noexcept ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator<(const std___1_error_category &__rhs) const noexcept ;
};

bool std___1_error_category::operator==(const std___1_error_category &__rhs) const noexcept {
    return this == &__rhs;
}
bool std___1_error_category::operator<(const std___1_error_category &__rhs) const noexcept {
    return this < &__rhs;
}
class __attribute__((visibility("default")))  std___1_error_condition  {
public:
    int __val_;
    const std___1_error_category *__cat_;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int value() const noexcept ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_error_category &category() const noexcept ;
};

int std___1_error_condition::value() const noexcept {
    return this->__val_;
}
const std___1_error_category &std___1_error_condition::category() const noexcept {
    return *this->__cat_;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator<(const std___1_error_condition &__x, const std___1_error_condition &__y) noexcept  {
    return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
class __attribute__((visibility("default")))  std___1_error_code  {
public:
    int __val_;
    const std___1_error_category *__cat_;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) int value() const noexcept ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_error_category &category() const noexcept ;
};

int std___1_error_code::value() const noexcept {
    return this->__val_;
}
const std___1_error_category &std___1_error_code::category() const noexcept {
    return *this->__cat_;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator<(const std___1_error_code &__x, const std___1_error_code &__y) noexcept  {
    return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator==(const std___1_error_code &__x, const std___1_error_code &__y) noexcept  {
    return __x.category() == __y.category() && __x.value() == __y.value();
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator==(const std___1_error_code &__x, const std___1_error_condition &__y) noexcept  {
    return __x.category().equivalent(__x.value(), __y) || __y.category().equivalent(__x, __y.value());
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator==(const std___1_error_condition &__x, const std___1_error_code &__y) noexcept  {
    return __y == __x;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator==(const std___1_error_condition &__x, const std___1_error_condition &__y) noexcept  {
    return __x.category() == __y.category() && __x.value() == __y.value();
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator!=(const std___1_error_code &__x, const std___1_error_code &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator!=(const std___1_error_code &__x, const std___1_error_condition &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator!=(const std___1_error_condition &__x, const std___1_error_code &__y) noexcept  {
    return !(__x == __y);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool operator!=(const std___1_error_condition &__x, const std___1_error_condition &__y) noexcept  {
    return !(__x == __y);
}
class __attribute__((visibility("default")))  std___1_system_error  : public std_runtime_error {
public:
    std___1_error_code __ec_;
    ~std___1_system_error() noexcept;
};

class __attribute__((visibility("default")))  std___1_mutex  {
public:
    std___1___libcpp_mutex_t __m_ = ((pthread_mutex_t)4294967295U);
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_mutex() noexcept  = default;    ~std___1_mutex() noexcept;
    void lock();
    void unlock() noexcept;
};

class std___1_unique_lock {
};
class std___1_unique_lock_std____1__mutex_ {
public:
    std___1_mutex *__m_;
    bool __owns_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1_unique_lock_std____1__mutex_(std___1_mutex &__m) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unique_lock_std____1__mutex_() noexcept ;
};
std___1_unique_lock_std____1__mutex_::std___1_unique_lock_std____1__mutex_(std___1_mutex &__m) : __m_(std___1_addressof_std____1__mutex_(__m)), __owns_(true) {
    this->__m_->lock();
}
std___1_unique_lock_std____1__mutex_::~std___1_unique_lock_std____1__mutex_() noexcept {
    if (this->__owns_) {
        this->__m_->unlock();
    }
}
struct __attribute__((type_visibility("default")))  std___1_once_flag ;

struct __attribute__((type_visibility("default")))  std___1_once_flag  {
    unsigned long __state_;
};

extern "C" {
    locale_t uselocale(locale_t newloc);

}
struct std___1___libcpp_locale_guard {
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___libcpp_locale_guard(locale_t &__loc) ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1___libcpp_locale_guard() noexcept ;
    locale_t __old_loc_;
};

std___1___libcpp_locale_guard::std___1___libcpp_locale_guard(locale_t &__loc) : __old_loc_(uselocale(__loc)) {
}
std___1___libcpp_locale_guard::~std___1___libcpp_locale_guard() noexcept {
    if (this->__old_loc_) {
        uselocale(this->__old_loc_);
    }
}
class __attribute__((visibility("default")))  std___1_locale ;

class std___1_ctype_char_;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const std___1_ctype_char_ &std___1_use_facet_std____1__ctype_char__(const std___1_locale &__l) ;

class std___1_locale___imp;

class __attribute__((visibility("default")))  std___1_locale_id ;

class __attribute__((visibility("default")))  std___1_locale_facet ;

class __attribute__((visibility("default")))  std___1_locale_facet  : public std___1___shared_count {
public:
    virtual ~std___1_locale_facet() noexcept;
    virtual void __on_zero_shared() noexcept;
};

class __attribute__((visibility("default")))  std___1_locale_id  {
public:
    std___1_once_flag __flag_;
    int32_t __id_;
};

class __attribute__((visibility("default")))  std___1_ctype_base  {
public:
};

class __attribute__((visibility("default")))  std___1_ctype_char_  : public std___1_locale_facet, public std___1_ctype_base {
public:
    const unsigned long *__tab_;
    bool __del_;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) char widen(char __c) const ;
    static std___1_locale_id id;
    ~std___1_ctype_char_() noexcept;
    virtual char do_toupper(char __c) const;
    virtual const char *do_toupper(char *__low, const char *__high) const;
    virtual char do_tolower(char __c) const;
    virtual const char *do_tolower(char *__low, const char *__high) const;
    virtual char do_widen(char __c) const;
    virtual const char *do_widen(const char *__low, const char *__high, char *__to) const;
    virtual char do_narrow(char __c, char __dfault) const;
    virtual const char *do_narrow(const char *__low, const char *__high, char __dfault, char *__to) const;
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline const std___1_ctype_char_ &std___1_use_facet_std____1__ctype_char__(const std___1_locale &__l)  {
    return static_cast<const std___1_ctype_char_ &>(*__l.use_facet(std___1_ctype_char_::id));
}
class std___1_ctype;
char std___1_ctype_char_::widen(char __c) const {
    return this->do_widen(__c);
}
class std___1_numpunct;
void *std___1_ios_base::rdbuf() const {
    return this->__rdbuf_;
}
void std___1_ios_base::rdbuf(void *__sb) {
    this->__rdbuf_ = __sb;
    this->clear(goodbit);
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline unsigned int std___1_ios_base::flags() const  {
    return this->__fmtflags_;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline unsigned int std___1_ios_base::flags(unsigned int __fmtfl)  {
    unsigned int __r = this->__fmtflags_;
    this->__fmtflags_ = __fmtfl;
    return __r;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_streamsize std___1_ios_base::precision() const  {
    return this->__precision_;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_streamsize std___1_ios_base::width() const  {
    return this->__width_;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1_streamsize std___1_ios_base::width(std___1_streamsize __wide)  {
    std___1_streamsize __r = this->__width_;
    this->__width_ = __wide;
    return __r;
}
 __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline void std___1_ios_base::setstate(unsigned int __state)  {
    this->clear(this->__rdstate_ | __state);
}
class std___1_basic_ios2 {
};
class std___1___bitset;
class std___1___bitset1 {
};
class std___1_bitset;
class std___1_bitset_5UL_;
class std___1_bitset1 {
};
class std___1_basic_streambuf2 {
};
inline int std___1_basic_streambuf_char__std____1__char_traits_char__::sputc(char __c) {
    if (this->__nout_ == this->__eout_) {
        return this->overflow(std___1_char_traits_char_1::to_int_type(__c));
    }
    *this->__nout_++ = __c;
    return std___1_char_traits_char_1::to_int_type(__c);
}
inline std___1_streamsize std___1_basic_streambuf_char__std____1__char_traits_char__::sputn(const char *__s, std___1_streamsize __n) {
    return this->xsputn(__s, __n);
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::eback() const {
    return this->__binp_;
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::gptr() const {
    return this->__ninp_;
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::egptr() const {
    return this->__einp_;
}
inline void std___1_basic_streambuf_char__std____1__char_traits_char__::setg(char *__gbeg, char *__gnext, char *__gend) {
    this->__binp_ = __gbeg;
    this->__ninp_ = __gnext;
    this->__einp_ = __gend;
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::pbase() const {
    return this->__bout_;
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::pptr() const {
    return this->__nout_;
}
char *std___1_basic_streambuf_char__std____1__char_traits_char__::epptr() const {
    return this->__eout_;
}
inline void std___1_basic_streambuf_char__std____1__char_traits_char__::pbump(int __n) {
    this->__nout_ += __n;
}
void std___1_basic_streambuf_char__std____1__char_traits_char__::__pbump(std___1_streamsize __n) {
    this->__nout_ += __n;
}
inline void std___1_basic_streambuf_char__std____1__char_traits_char__::setp(char *__pbeg, char *__pend) {
    this->__bout_ = this->__nout_ = __pbeg;
    this->__eout_ = __pend;
}
class __attribute__((visibility("default")))  std___1_basic_streambuf_wchar_t__std____1__char_traits_wchar_t__  {
public:
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_streambuf_wchar_t__std____1__char_traits_wchar_t__() ;
     __attribute__((linkage("available_externally"))) virtual void imbue(const std___1_locale &__loc) ;
     __attribute__((linkage("available_externally"))) virtual std___1_basic_streambuf_wchar_t__std____1__char_traits_wchar_t__ *setbuf(wchar_t *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streampos seekoff(std___1_streamoff __off, std___1_ios_base::seekdir __way, unsigned int __which) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streampos seekpos(std___1_streampos __sp, unsigned int __which) ;
     __attribute__((linkage("available_externally"))) virtual int sync() ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize showmanyc() ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize xsgetn(wchar_t *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual wint_t underflow() ;
     __attribute__((linkage("available_externally"))) virtual wint_t uflow() ;
     __attribute__((linkage("available_externally"))) virtual wint_t pbackfail(wint_t __c) ;
     __attribute__((linkage("available_externally"))) virtual std___1_streamsize xsputn(const wchar_t *__s, std___1_streamsize __n) ;
     __attribute__((linkage("available_externally"))) virtual wint_t overflow(wint_t __c) ;
    std___1_locale __loc_;
    wchar_t *__binp_;
    wchar_t *__ninp_;
    wchar_t *__einp_;
    wchar_t *__bout_;
    wchar_t *__nout_;
    wchar_t *__eout_;
};
void std___1_basic_ios_char__std____1__char_traits_char__::setstate(unsigned int __state) {
    this->std___1_ios_base::setstate(__state);
}
inline std___1_basic_streambuf_char__std____1__char_traits_char__ *std___1_basic_ios_char__std____1__char_traits_char__::rdbuf() const {
    return static_cast<std___1_basic_streambuf_char__std____1__char_traits_char__ *>(this->std___1_ios_base::rdbuf());
}
inline char std___1_basic_ios_char__std____1__char_traits_char__::fill() const {
    if (std___1_char_traits_char_1::eq_int_type(std___1_char_traits_char_1::eof(), this->__fill_)) {
        this->__fill_ = this->widen(' ');
    }
    return this->__fill_;
}
inline char std___1_basic_ios_char__std____1__char_traits_char__::widen(char __c) const {
    return std___1_use_facet_std____1__ctype_char__(this->getloc()).widen(__c);
}
class __attribute__((visibility("default")))  std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__  : public std___1_ios_base {
public:
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__() noexcept ;
    std___1_basic_ostream_wchar_t__std____1__char_traits_wchar_t__ *__tie_;
    mutable wint_t __fill_;
};
 __attribute__((linkage("linkonce_odr"))) inline int std___1___libcpp_snprintf_l(char *__s, size_t __n, locale_t __l, const char *__format, ...)  {
    va_list __va;
    __va = (char *)&__format + sizeof (__format);
    std___1___libcpp_locale_guard __current(__l);
    int __res = vsnprintf(__s, __n, __format, __va);
    __va = ((va_list)0);
    return __res;
}
 __attribute__((linkage("linkonce_odr"))) inline int std___1___libcpp_asprintf_l(char **__s, locale_t __l, const char *__format, ...)  {
    va_list __va;
    __va = (char *)&__format + sizeof (__format);
    std___1___libcpp_locale_guard __current(__l);
    int __res = vasprintf(__s, __format, __va);
    __va = ((va_list)0);
    return __res;
}
 __attribute__((visibility("default"))) locale_t std___1___cloc() ;

struct __attribute__((visibility("default")))  std___1___num_put_base  {
};

struct std___1___num_put {
};
class std___1_num_put {
};
 __attribute__((linkage("linkonce_odr"))) std___1_ostreambuf_iterator_char__std____1__char_traits_char__ std___1___pad_and_output_char__std____1__char_traits_char__(std___1_ostreambuf_iterator_char__std____1__char_traits_char__ __s, const char *__ob, const char *__op, const char *__oe, std___1_ios_base &__iob, char __fl)  {
    if (__s.__sbuf_ == nullptr) {
        return __s;
    }
    std___1_streamsize __sz = __oe - __ob;
    std___1_streamsize __ns = __iob.width();
    if (__ns > __sz) {
        __ns -= __sz;
    } else {
        __ns = 0;
    }
    std___1_streamsize __np = __op - __ob;
    if (__np > 0) {
        if (__s.__sbuf_->sputn(__ob, __np) != __np) {
            __s.__sbuf_ = nullptr;
            return __s;
        }
    }
    if (__ns > 0) {
        std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ __sp(__ns, __fl);
        if (__s.__sbuf_->sputn(__sp.data(), __ns) != __ns) {
            __s.__sbuf_ = nullptr;
            return __s;
        }
    }
    __np = __oe - __op;
    if (__np > 0) {
        if (__s.__sbuf_->sputn(__op, __np) != __np) {
            __s.__sbuf_ = nullptr;
            return __s;
        }
    }
    __iob.width(0);
    return __s;
}
class __attribute__((visibility("default")))  std___1___time_put  {
public:
    locale_t __loc_;
    ~std___1___time_put() noexcept;
    void __do_put(char *__nb, char *&__ne, const tm *__tm, char __fmt, char __mod) const;
    void __do_put(wchar_t *__wb, wchar_t *&__we, const tm *__tm, char __fmt, char __mod) const;
};

class std___1_time_put {
};
struct std___1_money_base_pattern {
    char field[4];
};

class __attribute__((visibility("default")))  std___1_money_base  {
public:
};

class std___1___money_put {
};
class std___1_money_put {
};
class std___1_basic_ostream2 {
};
class std___1_basic_ostream_char__std____1__char_traits_char___sentry {
public:
    bool __ok_;
    std___1_basic_ostream_char__std____1__char_traits_char__ &__os_;
     __attribute__((linkage("available_externally"))) explicit std___1_basic_ostream_char__std____1__char_traits_char___sentry(std___1_basic_ostream_char__std____1__char_traits_char__ &__os) ;
     __attribute__((linkage("available_externally"))) ~std___1_basic_ostream_char__std____1__char_traits_char___sentry() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit operator bool() const ;
};
 __attribute__((linkage("linkonce_odr"))) std___1_basic_ostream_char__std____1__char_traits_char__ &std___1___put_character_sequence_char__std____1__char_traits_char__(std___1_basic_ostream_char__std____1__char_traits_char__ &__os, const char *__str, size_t __len)  {
    try {
        std___1_basic_ostream_char__std____1__char_traits_char___sentry __s(__os);
        if (__s) {
            typedef std___1_ostreambuf_iterator_char__std____1__char_traits_char__ _Ip;
            if (std___1___pad_and_output_char__std____1__char_traits_char__(_Ip(__os), __str, (__os.flags() & std___1_ios_base::adjustfield) == std___1_ios_base::left ? __str + __len : __str, __str + __len, __os, __os.fill()).failed()) {
                __os.setstate(std___1_ios_base::badbit | std___1_ios_base::failbit);
            }
        }
    } catch (...) {
        __os.__set_badbit_and_consider_rethrow();
    }
    return __os;
}
 __attribute__((linkage("linkonce_odr"))) std___1_basic_ostream_char__std____1__char_traits_char__ &operator<<(std___1_basic_ostream_char__std____1__char_traits_char__ &__os, const char *__str)  {
    return std___1___put_character_sequence_char__std____1__char_traits_char__(__os, __str, std___1_char_traits_char_1::length(__str));
}
 __attribute__((linkage("linkonce_odr"))) inline std___1_basic_ostream_char__std____1__char_traits_char__ &std___1_endl_char__std____1__char_traits_char__(std___1_basic_ostream_char__std____1__char_traits_char__ &__os)  {
    __os.put(__os.widen('\n'));
    __os.flush();
    return __os;
}
struct std___1___is_ostreamable {
};
struct std___1___is_ostreamable_cv__FileStorage____const_std____1__string____void_;
struct std___1___is_ostreamable_std____1__string____const_cv__Ptr_cv__Formatted_____void_;
struct std___1___is_ostreamable_std____1__ostream____const_char__const____void_;
struct std___1___is_ostreamable_std____1__ostream____const_cv__Ptr_cv__Formatted_____void_;
struct std___1___is_ostreamable_std____1__ostream____const_cv__Mat____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____2___void_;
struct std___1___is_ostreamable_std____1__ostream____const_int____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____3___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____4___void_;
struct std___1___is_ostreamable_std____1__ostream____const_double____void_;
struct std___1___is_ostreamable_std____1__stringstream____const_std____1__string____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____61___void_;
struct std___1___is_ostreamable_std____1__fstream____const_int____void_;
struct std___1___is_ostreamable_std____1__ostream____const_DBoW2__ScoringType____void_;
struct std___1___is_ostreamable_std____1__ostream____const_DBoW2__WeightingType____void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____2___void_;
struct std___1___is_ostreamable_cv__FileStorage____const_int____void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____12___void_;
struct std___1___is_ostreamable_cv__FileStorage____const_DBoW2__ScoringType____void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____14___void_;
struct std___1___is_ostreamable_cv__FileStorage____const_DBoW2__WeightingType____void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____6___void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____3___void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____7___void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____9___void_;
struct std___1___is_ostreamable_cv__FileStorage____const_double____void_;
struct std___1___is_ostreamable_cv__FileStorage____char_const_____11___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____17___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____7___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____13___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____8___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____20___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____14___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____26___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____12___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____21___void_;
struct std___1___is_ostreamable_std____1__ostream____const_long____void_;
struct std___1___is_ostreamable_std____1__ostream____const_std____1__string____void_;
struct std___1___is_ostreamable_std____1__ostream____const_cv__dnn__dnn4_v20201117__DictValue____void_;
struct std___1___is_ostreamable_std____1__ostream____const_cvflann__any____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____18___void_;
struct std___1___is_ostreamable_std____1__ostream____const_std____1____iom_t6____void_;
struct std___1___is_ostreamable_std____1__ostream____const_std____1____iom_t2____void_;
struct std___1___is_ostreamable_std____1__ostream____const_unsigned_long____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____15___void_;
struct std___1___is_ostreamable_std____1__ostream____const_unsigned_int____void_;
struct std___1___is_ostreamable_std____1__ostream____const_float____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____89___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____43___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____42___void_;
struct std___1___is_ostreamable_std____1__ostream____const_Eigen__Matrix_double__4__4__0_____void_;
struct std___1___is_ostreamable_std____1__ostream____const_Eigen__Matrix_double__4__1__0_____void_;
struct std___1___is_ostreamable_std____1__ostream____const_Eigen__Matrix_double__3__1__0_____void_;
struct std___1___is_ostreamable_cv__Mat__float_____const_float____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____19___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____22___void_;
struct std___1___is_ostreamable_cv__Mat__float_____const_int____void_;
struct std___1___is_ostreamable_std____1__ostream____const_cvflann__anyimpl__empty_any____void_;
struct std___1___is_ostreamable_std____1__ostream____const_bool____void_;
struct std___1___is_ostreamable_std____1__stringstream____const_double____void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____5___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____248___void_;
struct std___1___is_ostreamable_std____1__ostream____char_const_____70___void_;
std___1_basic_ostream_char__std____1__char_traits_char___sentry::operator bool() const {
    return this->__ok_;
}
inline std___1_basic_ostream_char__std____1__char_traits_char__ &std___1_basic_ostream_char__std____1__char_traits_char__::operator<<(std___1_basic_ostream_char__std____1__char_traits_char__ &(*__pf)(std___1_basic_ostream_char__std____1__char_traits_char__ &)) {
    return __pf(*this);
}
class __attribute__((visibility("default")))  std___1_basic_ostream_wchar_t__std____1__char_traits_wchar_t__  : virtual public std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__ {
public:
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_ostream_wchar_t__std____1__char_traits_wchar_t__() noexcept ;
};
class std___1_basic_istream2 {
};
class __attribute__((visibility("default")))  std___1_basic_istream_char__std____1__char_traits_char__  : virtual public std___1_basic_ios_char__std____1__char_traits_char__ {
public:
    std___1_streamsize __gc_;
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_istream_char__std____1__char_traits_char__() noexcept ;
};
class __attribute__((visibility("default")))  std___1_basic_istream_wchar_t__std____1__char_traits_wchar_t__  : virtual public std___1_basic_ios_wchar_t__std____1__char_traits_wchar_t__ {
public:
    std___1_streamsize __gc_;
     __attribute__((linkage("available_externally"))) virtual ~std___1_basic_istream_wchar_t__std____1__char_traits_wchar_t__() noexcept ;
};
extern std___1_ostream std___1_cout __attribute__((visibility("default"))) ;

class std___1___tree;
class std___1___tree_std____1____value_type_unsigned_int__double___std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__double___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__double___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true__ __pair3_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_std____1____value_type_unsigned_int__double___std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__double___() noexcept ;
};
class std___1___tree_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true__ __pair3_;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____() noexcept ;
};
class std___1___tree_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true__ __pair3_;
};
class std___1___tree_std____1____value_type_std____1__string__cvflann__any___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__cvflann__any___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true__ __pair3_;
};
class std___1___tree_std____1__pair_int__int___std____1__less_std____1__pair_int__int____std____1__allocator_std____1__pair_int__int___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1__pair_int__int___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_std____1__pair_int__int___ __pair3_;
};
class std___1___tree_ORB_SLAM2__MapPoint____std____1__less_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__MapPoint____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_ORB_SLAM2__MapPoint____ __pair3_;
};
class std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_ORB_SLAM2__KeyFrame____ __pair3_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *__end_node() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__node_alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__root() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void destroy(std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__nd) noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_node() const noexcept {
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(const_cast<std___1___tree_end_node_std____1____tree_node_base_void______ &>(this->__pair1_.first())));
}
std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::__node_alloc() noexcept {
    return this->__pair1_.second();
}
std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::__root() const noexcept {
    return static_cast<std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *>(this->__end_node()->__left_);
}
std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::~std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept {
    this->destroy(this->__root());
}
struct std___1___tree_key_value_types_ORB_SLAM2__KeyFrame___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static ORB_SLAM2_KeyFrame **__get_ptr(ORB_SLAM2_KeyFrame *&__n) ;
};
void std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::destroy(std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *__nd) noexcept {
    if (__nd != nullptr) {
        this->destroy(static_cast<std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *>(__nd->__left_));
        this->destroy(static_cast<std___1___tree_node_ORB_SLAM2__KeyFrame____void___ *>(__nd->__right_));
        std___1_allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void____ &__na = this->__node_alloc();
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::destroy_ORB_SLAM2__KeyFrame____void__void_(__na, std___1___tree_key_value_types_ORB_SLAM2__KeyFrame___::__get_ptr(__nd->__value_));
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_ORB_SLAM2__KeyFrame____void_____::deallocate(__na, __nd, 1);
    }
}
class std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_;
class std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true__ __pair3_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *__end_node() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *__end_node() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__node_alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *&__begin_node() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *const &__begin_node() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t &size() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__root() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___(std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ &&__t) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ begin() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ end() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) void destroy(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__nd) noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__end_node() noexcept {
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(this->__pair1_.first()));
}
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__end_node() const noexcept {
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(const_cast<std___1___tree_end_node_std____1____tree_node_base_void______ &>(this->__pair1_.first())));
}
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__node_alloc() noexcept {
    return this->__pair1_.second();
}
std___1___tree_end_node_std____1____tree_node_base_void______ *&std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__begin_node() noexcept {
    return this->__begin_node_;
}
std___1___tree_end_node_std____1____tree_node_base_void______ *const &std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__begin_node() const noexcept {
    return this->__begin_node_;
}
size_t &std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::size() noexcept {
    return this->__pair3_.first();
}
std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::__root() const noexcept {
    return static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *>(this->__end_node()->__left_);
}
std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___(std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ &&__t) noexcept(std___1_integral_constant_bool__true_::value && std___1_integral_constant_bool__true_::value) : __begin_node_(std___1_move_std____1____tree_end_node_std____1____tree_node_base_void__________(__t.__begin_node_)), __pair1_(std___1_move_std____1____compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void________(__t.__pair1_)), __pair3_(std___1_move_std____1____compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true_____(__t.__pair3_)) {
    if (this->size() == 0) {
        this->__begin_node() = this->__end_node();
    } else {
        this->__end_node()->__left_->__parent_ = static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(this->__end_node());
        __t.__begin_node() = __t.__end_node();
        __t.__end_node()->__left_ = nullptr;
        __t.size() = 0;
    }
}
std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::~std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___() noexcept {
    this->destroy(this->__root());
}
class std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ *operator->() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &operator++() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_(std___1___tree_end_node_std____1____tree_node_base_void______ *__p) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__get_np() const ;
};
std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::begin() const noexcept {
    return std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_(this->__begin_node());
}
std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::end() const noexcept {
    return std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_(this->__end_node());
}
struct std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *__get_ptr(std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ &__n) ;
};
void std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___::destroy(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *__nd) noexcept {
    if (__nd != nullptr) {
        this->destroy(static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *>(__nd->__left_));
        this->destroy(static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *>(__nd->__right_));
        std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ &__na = this->__node_alloc();
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___void__void_(__na, std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__::__get_ptr(__nd->__value_));
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_____::deallocate(__na, __nd, 1);
    }
}
class std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true__ __pair3_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *__end_node() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__node_alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__root() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void destroy(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__nd) noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___::__end_node() const noexcept {
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(const_cast<std___1___tree_end_node_std____1____tree_node_base_void______ &>(this->__pair1_.first())));
}
std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___::__node_alloc() noexcept {
    return this->__pair1_.second();
}
std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___::__root() const noexcept {
    return static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *>(this->__end_node()->__left_);
}
std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___::~std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___() noexcept {
    this->destroy(this->__root());
}
struct std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int__ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1_pair_ORB_SLAM2__KeyFrame__const__int_ *__get_ptr(std___1___value_type_ORB_SLAM2__KeyFrame____int_ &__n) ;
};
void std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___::destroy(std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *__nd) noexcept {
    if (__nd != nullptr) {
        this->destroy(static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *>(__nd->__left_));
        this->destroy(static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ *>(__nd->__right_));
        std___1_allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ &__na = this->__node_alloc();
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::destroy_std____1__pair_ORB_SLAM2__KeyFrame__const__int___void__void_(__na, std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int__::__get_ptr(__nd->__value_));
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_____::deallocate(__na, __nd, 1);
    }
}
class std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_g2o__HyperGraph__Edge____ __pair3_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_end_node_std____1____tree_node_base_void______ *__end_node() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__node_alloc() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___tree_node_g2o__HyperGraph__Edge____void___ *__root() const noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void destroy(std___1___tree_node_g2o__HyperGraph__Edge____void___ *__nd) noexcept ;
};
std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::__end_node() const noexcept {
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1_pointer_traits_std____1____tree_end_node_std____1____tree_node_base_void_________::pointer_to(const_cast<std___1___tree_end_node_std____1____tree_node_base_void______ &>(this->__pair1_.first())));
}
std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::__node_alloc() noexcept {
    return this->__pair1_.second();
}
std___1___tree_node_g2o__HyperGraph__Edge____void___ *std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::__root() const noexcept {
    return static_cast<std___1___tree_node_g2o__HyperGraph__Edge____void___ *>(this->__end_node()->__left_);
}
std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::~std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____() noexcept {
    this->destroy(this->__root());
}
struct std___1___tree_key_value_types_g2o__HyperGraph__Edge___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static g2o_HyperGraph_Edge **__get_ptr(g2o_HyperGraph_Edge *&__n) ;
};
void std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::destroy(std___1___tree_node_g2o__HyperGraph__Edge____void___ *__nd) noexcept {
    if (__nd != nullptr) {
        this->destroy(static_cast<std___1___tree_node_g2o__HyperGraph__Edge____void___ *>(__nd->__left_));
        this->destroy(static_cast<std___1___tree_node_g2o__HyperGraph__Edge____void___ *>(__nd->__right_));
        std___1_allocator_std____1____tree_node_g2o__HyperGraph__Edge____void____ &__na = this->__node_alloc();
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::destroy_g2o__HyperGraph__Edge____void__void_(__na, std___1___tree_key_value_types_g2o__HyperGraph__Edge___::__get_ptr(__nd->__value_));
        std___1_allocator_traits_std____1__allocator_std____1____tree_node_g2o__HyperGraph__Edge____void_____::deallocate(__na, __nd, 1);
    }
}
class std___1___tree_std____1____value_type_int__g2o__Parameter_____std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true___std____1__allocator_std____1____value_type_int__g2o__Parameter_____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true__ __pair3_;
};
class std___1___tree_std____1____value_type_std____1__string__std____1__string___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__std____1__string___ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true__ __pair3_;
};
class std___1___tree_int__std____1__less_int___std____1__allocator_int__ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_int__void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_int__ __pair3_;
};
class std___1___tree_g2o__HyperGraph__Vertex____std____1__less_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex____ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__begin_node_;
    std___1___compressed_pair_std____1____tree_end_node_std____1____tree_node_base_void________std____1__allocator_std____1____tree_node_g2o__HyperGraph__Vertex____void_____ __pair1_;
    std___1___compressed_pair_unsigned_long__std____1__less_g2o__HyperGraph__Vertex____ __pair3_;
};
class std___1___tree_iterator;
class std___1___tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long_;
class std___1___tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long_;
class std___1___tree_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long_;
class std___1___tree_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long_;
class std___1___tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long_;
class std___1___tree_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long_;
class std___1___tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long_;
class std___1___tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long_;
class std___1___tree_iterator_int__std____1____tree_node_int__void_______long_;
class std___1___tree_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long_;
class std___1___tree_const_iterator;
class std___1___tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long_;
class std___1___tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long_;
class std___1___tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long_ {
public:
    std___1___tree_end_node_std____1____tree_node_base_void______ *__ptr_;
};
class std___1___tree_const_iterator_std____1__pair_int__int___std____1____tree_node_std____1__pair_int__int___void_______long_;
class std___1___tree_const_iterator_ORB_SLAM2__MapPoint____std____1____tree_node_ORB_SLAM2__MapPoint____void_______long_;
class std___1___tree_const_iterator_ORB_SLAM2__KeyFrame____std____1____tree_node_ORB_SLAM2__KeyFrame____void_______long_;
const std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ *std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_::operator->() const {
    return std___1_pointer_traits_const_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____::pointer_to(this->__get_np()->__value_);
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_next_iter_std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_base_void______(std___1___tree_node_base_void___ *__x) noexcept ;

std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_::operator++() {
    this->__ptr_ = static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1___tree_next_iter_std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_base_void______(static_cast<std___1___tree_node_base_void___ *>(this->__ptr_)));
    return *this;
}
std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_::std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_(std___1___tree_end_node_std____1____tree_node_base_void______ *__p) noexcept : __ptr_(__p) {
}
std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_::__get_np() const {
    return static_cast<std___1___tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ *>(this->__ptr_);
}
class std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long_;
class std___1___tree_const_iterator_g2o__HyperGraph__Edge____std____1____tree_node_g2o__HyperGraph__Edge____void_______long_;
class std___1___tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long_;
class std___1___tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long_;
class std___1___tree_const_iterator_int__std____1____tree_node_int__void_______long_;
class std___1___tree_const_iterator_g2o__HyperGraph__Vertex____std____1____tree_node_g2o__HyperGraph__Vertex____void_______long_;
class std___1___tree_end_node;
class std___1___tree_node_base;
std___1___tree_node_base_void___ *std___1___tree_node_base_void___::__parent_unsafe() const {
    return static_cast<std___1___tree_node_base_void___ *>(this->__parent_);
}
class std___1___tree_node;
struct __attribute__((standalone_debug))  std___1___value_type_unsigned_int__double_  {
    std___1_pair_const_unsigned_int__double_ __cc;
};
class __attribute__((standalone_debug))  std___1___tree_node_std____1____value_type_unsigned_int__double___void___  : public std___1___tree_node_base_void___ {
public:
    std___1___value_type_unsigned_int__double_ __value_;
};
class std___1___tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void___;
struct __attribute__((standalone_debug))  std___1___value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue_  {
    std___1_pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue_ __cc;
};
class __attribute__((standalone_debug))  std___1___tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void___  : public std___1___tree_node_base_void___ {
public:
    std___1___value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue_ __value_;
};
struct __attribute__((standalone_debug))  std___1___value_type_std____1__string__cvflann__any_  {
    std___1_pair_const_std____1__string__cvflann__any_ __cc;
};
class __attribute__((standalone_debug))  std___1___tree_node_std____1____value_type_std____1__string__cvflann__any___void___  : public std___1___tree_node_base_void___ {
public:
    std___1___value_type_std____1__string__cvflann__any_ __value_;
};
class std___1___tree_node_std____1__pair_int__int___void___;
class std___1___tree_node_ORB_SLAM2__MapPoint____void___;
class std___1___tree_node_std____1____value_type_int__g2o__Parameter_____void___;
class std___1___tree_node_std____1____value_type_std____1__string__std____1__string___void___;
class std___1___tree_node_int__void___;
class __attribute__((standalone_debug))  std___1___tree_node_g2o__HyperGraph__Vertex____void___  : public std___1___tree_node_base_void___ {
public:
    g2o_HyperGraph_Vertex *__value_;
};
struct std___1___value_type;
struct std___1___value_type_unsigned_int__std____1__vector_unsigned_int__;
std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_::__get_value() {
    return this->__cc;
}
const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ &std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_::__get_value() const {
    return this->__cc;
}
std___1_pair_ORB_SLAM2__KeyFrame__const__int_ &std___1___value_type_ORB_SLAM2__KeyFrame____int_::__get_value() {
    return this->__cc;
}
struct std___1___value_type_int__g2o__Parameter___;
struct std___1___value_type_std____1__string__std____1__string_;
class std___1___map_iterator;
class  std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__  {
public:
    std___1___tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long_ __i_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_pair_const_unsigned_int__double_ *operator->() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__ operator++(int __p1) ;
};
class std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long__;
class  std___1___map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long__  {
public:
    std___1___tree_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long_ __i_;
};
class  std___1___map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long__  {
public:
    std___1___tree_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long_ __i_;
};
class  std___1___map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__  {
public:
    std___1___tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ __i_;
};
class std___1___map_iterator_std____1____tree_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long__;
class std___1___map_iterator_std____1____tree_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long__;
class std___1___map_iterator_std____1____tree_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long__;
class std___1___map_const_iterator;
class std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__;
class std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______long__;
class  std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long__  {
public:
    std___1___tree_const_iterator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______long_ __i_;
};
class  std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long__  {
public:
    std___1___tree_const_iterator_std____1____value_type_std____1__string__cvflann__any___std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______long_ __i_;
};
class  std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__  {
public:
    std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ __i_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__(std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ __i) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *operator->() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ &operator++() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ operator++(int __p1) ;
};
std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__::std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__(std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ __i) noexcept : __i_(__i) {
}
const std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__::operator->() const {
    return std___1_pointer_traits_const_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long____::pointer_to(this->__i_->__get_value());
}
std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ &std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__::operator++() {
    ++ this->__i_;
    return *this;
}
std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__::operator++(int __p1) {
    std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ __t(*this);
    ++ (*this);
    return __t;
}
class std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______long__;
class std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_int__g2o__Parameter_____std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______long__;
class std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_std____1__string__std____1__string___std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______long__;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool std___1___tree_is_left_child_std____1____tree_node_base_void______(std___1___tree_node_base_void___ *__x) noexcept  {
    return __x == __x->__parent_->__left_;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___tree_node_base_void___ *std___1___tree_min_std____1____tree_node_base_void______(std___1___tree_node_base_void___ *__x) noexcept  {
    while (__x->__left_ != nullptr)
        {
            __x = __x->__left_;
        }
    return __x;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline std___1___tree_end_node_std____1____tree_node_base_void______ *std___1___tree_next_iter_std____1____tree_end_node_std____1____tree_node_base_void__________std____1____tree_node_base_void______(std___1___tree_node_base_void___ *__x) noexcept  {
    if (__x->__right_ != nullptr) {
        return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(std___1___tree_min_std____1____tree_node_base_void______(__x->__right_));
    }
    while (!std___1___tree_is_left_child_std____1____tree_node_base_void______(__x))
        {
            __x = __x->__parent_unsafe();
        }
    return static_cast<std___1___tree_end_node_std____1____tree_node_base_void______ *>(__x->__parent_);
}
struct std___1___tree_key_value_types {
};
struct std___1___tree_key_value_types_std____1____value_type_unsigned_int__double__ {
};
struct std___1___tree_key_value_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
struct std___1___tree_key_value_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__ {
};
struct std___1___tree_key_value_types_std____1____value_type_std____1__string__cvflann__any__ {
};
struct std___1___tree_key_value_types_std____1__pair_int__int__ {
};
struct std___1___tree_key_value_types_ORB_SLAM2__MapPoint___ {
};
ORB_SLAM2_KeyFrame **std___1___tree_key_value_types_ORB_SLAM2__KeyFrame___::__get_ptr(ORB_SLAM2_KeyFrame *&__n) {
    return std___1_addressof_ORB_SLAM2__KeyFrame___(__n);
}
std___1_pair_ORB_SLAM2__KeyFrame__const__unsigned_long_ *std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__::__get_ptr(std___1___value_type_ORB_SLAM2__KeyFrame____unsigned_long_ &__n) {
    return std___1_addressof_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long__(__n.__get_value());
}
std___1_pair_ORB_SLAM2__KeyFrame__const__int_ *std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int__::__get_ptr(std___1___value_type_ORB_SLAM2__KeyFrame____int_ &__n) {
    return std___1_addressof_std____1__pair_ORB_SLAM2__KeyFrame__const__int__(__n.__get_value());
}
g2o_HyperGraph_Edge **std___1___tree_key_value_types_g2o__HyperGraph__Edge___::__get_ptr(g2o_HyperGraph_Edge *&__n) {
    return std___1_addressof_g2o__HyperGraph__Edge___(__n);
}
struct std___1___tree_key_value_types_std____1____value_type_int__g2o__Parameter____ {
};
struct std___1___tree_key_value_types_std____1____value_type_std____1__string__std____1__string__ {
};
struct std___1___tree_key_value_types_int_ {
};
struct std___1___tree_key_value_types_g2o__HyperGraph__Vertex___ {
};
struct std___1___tree_node_base_types {
};
struct std___1___tree_node_base_types_void___ {
};
struct std___1___tree_map_pointer_types {
};
struct std___1___tree_map_pointer_types_std____1____value_type_unsigned_int__double___void____std____1____tree_key_value_types_std____1____value_type_unsigned_int__double____true_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____std____1____tree_key_value_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____true_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_std____1__string__cvflann__any___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__cvflann__any____true_ {
};
struct std___1___tree_map_pointer_types_std____1__pair_int__int___void____std____1____tree_key_value_types_std____1__pair_int__int____false_ {
};
struct std___1___tree_map_pointer_types_ORB_SLAM2__MapPoint____void____std____1____tree_key_value_types_ORB_SLAM2__MapPoint_____false_ {
};
struct std___1___tree_map_pointer_types_ORB_SLAM2__KeyFrame____void____std____1____tree_key_value_types_ORB_SLAM2__KeyFrame_____false_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____std____1____tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____true_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____std____1____tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int____true_ {
};
struct std___1___tree_map_pointer_types_g2o__HyperGraph__Edge____void____std____1____tree_key_value_types_g2o__HyperGraph__Edge_____false_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_int__g2o__Parameter_____void____std____1____tree_key_value_types_std____1____value_type_int__g2o__Parameter______true_ {
};
struct std___1___tree_map_pointer_types_std____1____value_type_std____1__string__std____1__string___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__std____1__string____true_ {
};
struct std___1___tree_map_pointer_types_int__void____std____1____tree_key_value_types_int___false_ {
};
struct std___1___tree_map_pointer_types_g2o__HyperGraph__Vertex____void____std____1____tree_key_value_types_g2o__HyperGraph__Vertex_____false_ {
};
struct std___1___tree_node_types;
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_unsigned_int__double___void_______std____1____tree_node_std____1____value_type_unsigned_int__double___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_unsigned_int__double__, std___1___tree_map_pointer_types_std____1____value_type_unsigned_int__double___void____std____1____tree_key_value_types_std____1____value_type_unsigned_int__double____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void_______std____1____tree_node_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int___, std___1___tree_map_pointer_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void____std____1____tree_key_value_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void_______std____1____tree_node_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue__, std___1___tree_map_pointer_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void_______std____1____tree_node_std____1____value_type_std____1__string__cvflann__any___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_std____1__string__cvflann__any__, std___1___tree_map_pointer_types_std____1____value_type_std____1__string__cvflann__any___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__cvflann__any____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1__pair_int__int___void_______std____1____tree_node_std____1__pair_int__int___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1__pair_int__int__, std___1___tree_map_pointer_types_std____1__pair_int__int___void____std____1____tree_key_value_types_std____1__pair_int__int____false_ {
};
struct std___1___tree_node_types_std____1____tree_node_ORB_SLAM2__MapPoint____void_______std____1____tree_node_ORB_SLAM2__MapPoint____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_ORB_SLAM2__MapPoint___, std___1___tree_map_pointer_types_ORB_SLAM2__MapPoint____void____std____1____tree_key_value_types_ORB_SLAM2__MapPoint_____false_ {
};
struct std___1___tree_node_types_std____1____tree_node_ORB_SLAM2__KeyFrame____void_______std____1____tree_node_ORB_SLAM2__KeyFrame____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_ORB_SLAM2__KeyFrame___, std___1___tree_map_pointer_types_ORB_SLAM2__KeyFrame____void____std____1____tree_key_value_types_ORB_SLAM2__KeyFrame_____false_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long__, std___1___tree_map_pointer_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void____std____1____tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void_______std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int__, std___1___tree_map_pointer_types_std____1____value_type_ORB_SLAM2__KeyFrame____int___void____std____1____tree_key_value_types_std____1____value_type_ORB_SLAM2__KeyFrame____int____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_g2o__HyperGraph__Edge____void_______std____1____tree_node_g2o__HyperGraph__Edge____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_g2o__HyperGraph__Edge___, std___1___tree_map_pointer_types_g2o__HyperGraph__Edge____void____std____1____tree_key_value_types_g2o__HyperGraph__Edge_____false_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void_______std____1____tree_node_std____1____value_type_int__g2o__Parameter_____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_int__g2o__Parameter____, std___1___tree_map_pointer_types_std____1____value_type_int__g2o__Parameter_____void____std____1____tree_key_value_types_std____1____value_type_int__g2o__Parameter______true_ {
};
struct std___1___tree_node_types_std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void_______std____1____tree_node_std____1____value_type_std____1__string__std____1__string___void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_std____1____value_type_std____1__string__std____1__string__, std___1___tree_map_pointer_types_std____1____value_type_std____1__string__std____1__string___void____std____1____tree_key_value_types_std____1____value_type_std____1__string__std____1__string____true_ {
};
struct std___1___tree_node_types_std____1____tree_node_int__void_______std____1____tree_node_int__void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_int_, std___1___tree_map_pointer_types_int__void____std____1____tree_key_value_types_int___false_ {
};
struct std___1___tree_node_types_std____1____tree_node_g2o__HyperGraph__Vertex____void_______std____1____tree_node_g2o__HyperGraph__Vertex____void____ : public std___1___tree_node_base_types_void___, std___1___tree_key_value_types_g2o__HyperGraph__Vertex___, std___1___tree_map_pointer_types_g2o__HyperGraph__Vertex____void____std____1____tree_key_value_types_g2o__HyperGraph__Vertex_____false_ {
};
struct std___1___make_tree_node_types {
};
struct std___1___make_tree_node_types_std____1____value_type_unsigned_int__double___void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_std____1__string__cvflann__any___void___ {
};
struct std___1___make_tree_node_types_std____1__pair_int__int___void___ {
};
struct std___1___make_tree_node_types_ORB_SLAM2__MapPoint____void___ {
};
struct std___1___make_tree_node_types_ORB_SLAM2__KeyFrame____void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_ORB_SLAM2__KeyFrame____int___void___ {
};
struct std___1___make_tree_node_types_g2o__HyperGraph__Edge____void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_int__g2o__Parameter_____void___ {
};
struct std___1___make_tree_node_types_std____1____value_type_std____1__string__std____1__string___void___ {
};
struct std___1___make_tree_node_types_int__void___ {
};
struct std___1___make_tree_node_types_g2o__HyperGraph__Vertex____void___ {
};
class std___1___tree_end_node1 {
};
class std___1___tree_node_base1 {
};
class std___1___tree_node1 {
};
class std___1___tree_iterator1 {
};
class std___1___tree1;
class std___1___tree_const_iterator1;
class std___1___map_iterator1;
class std___1_map;
class std___1_set;
class  std___1_set_std____1__pair_int__int___std____1__less_std____1__pair_int__int____std____1__allocator_std____1__pair_int__int___  {
public:
    std___1___tree_std____1__pair_int__int___std____1__less_std____1__pair_int__int____std____1__allocator_std____1__pair_int__int___ __tree_;
};
class  std___1_set_ORB_SLAM2__MapPoint____std____1__less_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____  {
public:
    std___1___tree_ORB_SLAM2__MapPoint____std____1__less_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____ __tree_;
};
class  std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____  {
public:
    std___1___tree_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept ;
};
std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____::~std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept {
}
class  std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____  {
public:
    std___1___tree_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____() noexcept ;
};
std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____::~std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____() noexcept {
}
class  std___1_set_g2o__HyperGraph__Vertex____std____1__less_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex____  {
public:
    std___1___tree_g2o__HyperGraph__Vertex____std____1__less_g2o__HyperGraph__Vertex_____std____1__allocator_g2o__HyperGraph__Vertex____ __tree_;
};
class std___1_set_g2o__HyperGraphAction____std____1__less_g2o__HyperGraphAction_____std____1__allocator_g2o__HyperGraphAction____;
class  std___1_set_int__std____1__less_int___std____1__allocator_int__  {
public:
    std___1___tree_int__std____1__less_int___std____1__allocator_int__ __tree_;
};
class std___1___tree2;
class std___1___tree_const_iterator2;
class std___1___map_iterator2;
class std___1_map1;
class std___1_set1;
class std___1___tree3;
class std___1___tree_const_iterator3;
class std___1___map_iterator3;
class std___1_map2;
class std___1_set2;
class std___1___tree4;
class std___1___tree_const_iterator4;
class std___1___map_iterator4;
class std___1_map3;
class std___1_set3;
class std___1___tree_const_iterator5 {
};
class std___1___tree5;
class std___1_map4;
class std___1_set4;
class std___1___map_const_iterator1;
class std___1___tree6;
class std___1_map5;
class std___1_set5;
class std___1___map_const_iterator2;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator==(const std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &__x, const std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &__y)  {
    return __x.__ptr_ == __y.__ptr_;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator!=(const std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &__x, const std___1___tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long_ &__y)  {
    return !(__x == __y);
}
class std___1___tree7;
class std___1_map6;
class std___1_set6;
class std___1___map_const_iterator3;
class std___1___tree8 {
};
class std___1_map7;
class std___1_map8;
class std___1_map9;
class std___1_map10;
class std___1_map11;
class std___1_map12;
class std___1_map13;
class std___1_map14;
class std___1_map15;
class std___1_map16;
class std___1_map17;
class std___1_map18;
class std___1_map19;
class std___1_map20;
class std___1___map_value_compare {
};
class std___1_map21;
class  std___1_map_unsigned_int__double__std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__double___  {
public:
    std___1___tree_std____1____value_type_unsigned_int__double___std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__double___std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__double___ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_map_unsigned_int__double__std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__double___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool empty() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t size() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
};
class  std___1_map_unsigned_int__std____1__vector_unsigned_int___std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____  {
public:
    std___1___tree_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1____map_value_compare_unsigned_int__std____1____value_type_unsigned_int__std____1__vector_unsigned_int____std____1__less_unsigned_int___true___std____1__allocator_std____1____value_type_unsigned_int__std____1__vector_unsigned_int____ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_map_unsigned_int__std____1__vector_unsigned_int___std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
};
class  std___1_map_std____1__string__cv__dnn__dnn4_v20201117__DictValue__std____1__less_std____1__string___std____1__allocator_std____1__pair_const_std____1__string__cv__dnn__dnn4_v20201117__DictValue___  {
public:
    std___1___tree_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__cv__dnn__dnn4_v20201117__DictValue___ __tree_;
};
class  std___1_map_std____1__string__cvflann__any__std____1__less_std____1__string___std____1__allocator_std____1__pair_const_std____1__string__cvflann__any___  {
public:
    std___1___tree_std____1____value_type_std____1__string__cvflann__any___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__cvflann__any___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__cvflann__any___ __tree_;
};
class  std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___  {
public:
    std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___(std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ &&__m) noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ begin() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ end() const noexcept ;
};
std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___::std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___(std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ &&__m) noexcept(std___1_integral_constant_bool__true_::value) : __tree_(std___1_move_std____1____tree_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long______(__m.__tree_)) {
}
std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___::~std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___() noexcept {
}
std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___::begin() const noexcept {
    return this->__tree_.begin();
}
std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___::end() const noexcept {
    return this->__tree_.end();
}
class  std___1_map_ORB_SLAM2__KeyFrame____int__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___  {
public:
    std___1___tree_std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1____map_value_compare_ORB_SLAM2__KeyFrame____std____1____value_type_ORB_SLAM2__KeyFrame____int___std____1__less_ORB_SLAM2__KeyFrame_____true___std____1__allocator_std____1____value_type_ORB_SLAM2__KeyFrame____int___ __tree_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_map_ORB_SLAM2__KeyFrame____int__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___() noexcept ;
};
std___1_map_ORB_SLAM2__KeyFrame____int__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___::~std___1_map_ORB_SLAM2__KeyFrame____int__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___() noexcept {
}
class  std___1_map_int__g2o__Parameter____std____1__less_int___std____1__allocator_std____1__pair_const_int__g2o__Parameter_____  {
public:
    std___1___tree_std____1____value_type_int__g2o__Parameter_____std____1____map_value_compare_int__std____1____value_type_int__g2o__Parameter_____std____1__less_int___true___std____1__allocator_std____1____value_type_int__g2o__Parameter_____ __tree_;
};
class  std___1_map_std____1__string__std____1__string__std____1__less_std____1__string___std____1__allocator_std____1__pair_const_std____1__string__std____1__string___  {
public:
    std___1___tree_std____1____value_type_std____1__string__std____1__string___std____1____map_value_compare_std____1__string__std____1____value_type_std____1__string__std____1__string___std____1__less_std____1__string___true___std____1__allocator_std____1____value_type_std____1__string__std____1__string___ __tree_;
};
class std___1_map_ORB_SLAM2__KeyFrame____g2o__Sim3__std____1__less_ORB_SLAM2__KeyFrame_____Eigen__aligned_allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__g2o__Sim3___;
class std___1_map_ORB_SLAM2__KeyFrame____std____1__set_ORB_SLAM2__KeyFrame_____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__std____1__set_ORB_SLAM2__KeyFrame______;
class std___1_multimap;
class std___1___map_const_iterator4;
struct std___1___value_type1 {
};
class std___1___map_iterator5 {
};
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator!=(const std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__ &__x, const std___1___map_iterator_std____1____tree_iterator_std____1____value_type_unsigned_int__double___std____1____tree_node_std____1____value_type_unsigned_int__double___void_______long__ &__y) ;

class std___1_map22;
class std___1___map_const_iterator5;
class std___1_map23;
class std___1___map_const_iterator6;
class std___1_map24;
class std___1___map_const_iterator7;
class std___1_map25;
class std___1___map_const_iterator8;
class std___1___map_const_iterator9 {
};
class std___1_map26;
class std___1___tree_const_iterator6;
class std___1_map27;
class std___1___tree_const_iterator7;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator!=(const std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ &__x, const std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ &__y)  {
    return __x.__i_ != __y.__i_;
}
class std___1_map28;
class std___1___tree_const_iterator8;
class std___1_map29 {
};
class std___1_map30;
class std___1_map31;
class std___1_map32;
class std___1_map33;
class std___1_map34;
class std___1_map35;
class std___1_map36;
class std___1_map37;
class std___1_multimap1 {
};
typedef unsigned int DBoW2_WordId;

typedef double DBoW2_WordValue;

typedef unsigned int DBoW2_NodeId;

enum DBoW2_LNorm {
    L1,
    L2
};

enum DBoW2_WeightingType {
    TF_IDF,
    TF,
    IDF,
    BINARY
};

enum DBoW2_ScoringType {
    L1_NORM,
    L2_NORM,
    CHI_SQUARE,
    KL,
    BHATTACHARYYA,
    DOT_PRODUCT
};

class DBoW2_BowVector : public std___1_map_unsigned_int__double__std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__double___ {
public:
    ~DBoW2_BowVector() noexcept;
    void addWeight(DBoW2_WordId id, DBoW2_WordValue v);
    void addIfNotExist(DBoW2_WordId id, DBoW2_WordValue v);
    void normalize(DBoW2_LNorm norm_type);
};

class DBoW2_FeatureVector : public std___1_map_unsigned_int__std____1__vector_unsigned_int___std____1__less_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____ {
public:
    ~DBoW2_FeatureVector() noexcept;
    void addFeature(DBoW2_NodeId id, unsigned int i_feature);
};

typedef signed char schar;

typedef unsigned short ushort;

typedef int64_t int64;

typedef uint64_t uint64;

typedef union Cv32suf {
    int i;
    unsigned int u;
    float f;
} Cv32suf1;
struct std___1_array1 {
};
class cv_float16_t {
public:
     __attribute__((linkage("linkonce_odr"))) operator float() const ;
    ushort w;
};

cv_float16_t::operator float() const {
    Cv32suf1 out;
    unsigned int t = ((this->w & 32767) << 13) + 939524096;
    unsigned int sign = (this->w & 32768) << 16;
    unsigned int e = this->w & 31744;
    out.u = t + (1 << 23);
    out.u = (e >= 31744 ? t + 939524096 : e == 0 ? (static_cast<void>(out.f -= 6.10351563E-5F) , out.u) : t) | sign;
    return out.f;
}
extern "C" {
    extern float __emx_builtin_infinity();

     extern double cos(double __p1) ;

     extern double sin(double __p1) ;

     extern double log(double __p1) ;

     extern double pow(double __p1, double __p2) ;

     extern double fabs(double __p1) ;

     extern double logb(double __p1) ;

     extern double copysign(double __p1, double __p2) ;

     extern double fmax(double __p1, double __p2) ;

     extern double scalbn(double __p1, int __p2) ;

     extern float acosf(float __p1) ;

     extern float asinf(float __p1) ;

     extern float atanf(float __p1) ;

     extern float atan2f(float __p1, float __p2) ;

     extern float cosf(float __p1) ;

     extern float sinf(float __p1) ;

     extern float tanf(float __p1) ;

     extern float coshf(float __p1) ;

     extern float sinhf(float __p1) ;

     extern float logf(float __p1) ;

     extern float sqrtf(float __p1) ;

     extern float fabsf(float __p1) ;

     extern float logbf(float __p1) ;

     extern float scalbnf(float __p1, int __p2) ;

     extern float fmaxf(float __p1, float __p2) ;

     extern long double cosl(long double __p1) ;

     extern long double sinl(long double __p1) ;

     extern long double fabsl(long double __p1) ;

     extern long double logbl(long double __p1) ;

     extern long double scalbnl(long double __p1, int __p2) ;

     extern long double fmaxl(long double __p1, long double __p2) ;

     extern long double fabsl(long double __p1) ;

     extern long double fmaxl(long double __p1, long double __p2) ;

     extern long double scalbnl(long double __p1, int __p2) ;

}
extern "C++" {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isinf_float_(float __lcpp_x) noexcept      {
        return __builtin_isinf(__lcpp_x);
    }
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isinf_double_(double __lcpp_x) noexcept      {
        return __builtin_isinf(__lcpp_x);
    }
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isinf_long_double_(long double __lcpp_x) noexcept      {
        return __builtin_isinf(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isinf(float __lcpp_x) noexcept      {
        return __libcpp_isinf_float_(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((enable_if(0x5644b5a7a440, "<no message provided>"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isinf(double __lcpp_x) noexcept      {
        return __libcpp_isinf_double_(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isinf(long double __lcpp_x) noexcept      {
        return __libcpp_isinf_long_double_(__lcpp_x);
    }
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isnan_float_(float __lcpp_x) noexcept      {
        return __builtin_isnan(__lcpp_x);
    }
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isnan_double_(double __lcpp_x) noexcept      {
        return __builtin_isnan(__lcpp_x);
    }
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool __libcpp_isnan_long_double_(long double __lcpp_x) noexcept      {
        return __builtin_isnan(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isnan(float __lcpp_x) noexcept      {
        return __libcpp_isnan_float_(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((enable_if(0x5644b5a7cf10, "<no message provided>"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isnan(double __lcpp_x) noexcept      {
        return __libcpp_isnan_double_(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline bool isnan(long double __lcpp_x) noexcept      {
        return __libcpp_isnan_long_double_(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float atan2(float __lcpp_y, float __lcpp_x) noexcept      {
        return atan2f(__lcpp_y, __lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float cos(float __lcpp_x) noexcept      {
        return cosf(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double cos(long double __lcpp_x) noexcept      {
        return cosl(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float fabs(float __lcpp_x) noexcept      {
        return fabsf(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double fabs(long double __lcpp_x) noexcept      {
        return fabsl(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float sin(float __lcpp_x) noexcept      {
        return sinf(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double sin(long double __lcpp_x) noexcept      {
        return sinl(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float __libcpp_copysign(float __lcpp_x, float __lcpp_y) noexcept      {
        return __builtin_copysignf(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline double __libcpp_copysign(double __lcpp_x, double __lcpp_y) noexcept      {
        return __builtin_copysign(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double __libcpp_copysign(long double __lcpp_x, long double __lcpp_y) noexcept      {
        return __builtin_copysignl(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float copysign(float __lcpp_x, float __lcpp_y) noexcept      {
        return __libcpp_copysign(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double copysign(long double __lcpp_x, long double __lcpp_y) noexcept      {
        return __libcpp_copysign(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float fmax(float __lcpp_x, float __lcpp_y) noexcept      {
        return fmaxf(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double fmax(long double __lcpp_x, long double __lcpp_y) noexcept      {
        return fmaxl(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float logb(float __lcpp_x) noexcept      {
        return logbf(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double logb(long double __lcpp_x) noexcept      {
        return logbl(__lcpp_x);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline float scalbn(float __lcpp_x, int __lcpp_y) noexcept      {
        return scalbnf(__lcpp_x, __lcpp_y);
    }
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) inline long double scalbn(long double __lcpp_x, int __lcpp_y) noexcept      {
        return scalbnl(__lcpp_x, __lcpp_y);
    }
}
extern "C" {
}
extern "C" {
}
extern "C" {
}
extern "C" {
}
extern "C" {
}
extern "C" {
}
struct cv_Ptr {
};
struct cv_Ptr_cv__FileStorage__Impl_ : public std___1_shared_ptr_cv__FileStorage__Impl_ {
};
struct cv_Ptr_cv__Formatted_ : public std___1_shared_ptr_cv__Formatted_ {
};
struct cv_Ptr_cv__Algorithm_;
struct cv_Ptr_cv__MinProblemSolver__Function_ : public std___1_shared_ptr_cv__MinProblemSolver__Function_ {
};
struct cv_Ptr_cv__DownhillSolver_;
struct cv_Ptr_cv__ConjGradSolver_;
struct cv_Ptr_cv__AffineFeature_;
struct cv_Ptr_cv__SIFT_;
struct cv_Ptr_cv__BRISK_;
struct cv_Ptr_cv__ORB_;
struct cv_Ptr_cv__MSER_;
struct cv_Ptr_cv__FastFeatureDetector_;
struct cv_Ptr_cv__AgastFeatureDetector_;
struct cv_Ptr_cv__GFTTDetector_;
struct cv_Ptr_cv__KAZE_;
struct cv_Ptr_cv__AKAZE_;
struct cv_Ptr_cv__DescriptorMatcher_ : public std___1_shared_ptr_cv__DescriptorMatcher_ {
};
struct cv_Ptr_cv__BFMatcher_;
struct cv_Ptr_cv__FlannBasedMatcher_;
struct cv_Ptr_cv__LMSolver_;
struct cv_Ptr_cv__LMSolver__Callback_;
struct cv_Ptr_cv__StereoBM_;
struct cv_Ptr_cv__StereoSGBM_;
struct cv_Ptr_cv__dnn__dnn4_v20201117__BackendWrapper_;
struct cv_Ptr_cv__dnn__dnn4_v20201117__BackendNode_;
struct cv_Ptr_cv__dnn__dnn4_v20201117__ActivationLayer_;
struct cv_Ptr_cv__dnn__dnn4_v20201117__Layer_;
struct cv_Ptr_cv__dnn__dnn4_v20201117__Net__Impl_ : public std___1_shared_ptr_cv__dnn__dnn4_v20201117__Net__Impl_ {
};
struct cv_Ptr_cv__dnn__dnn4_v20201117__Model__Impl_ : public std___1_shared_ptr_cv__dnn__dnn4_v20201117__Model__Impl_ {
};
struct cv_Ptr_cv__LineSegmentDetector_;
struct cv_Ptr_cv__CLAHE_;
struct cv_Ptr_cv__GeneralizedHoughBallard_;
struct cv_Ptr_cv__GeneralizedHoughGuil_;
struct cv_Ptr_cv__ml__TrainData_;
struct cv_Ptr_cv__ml__NormalBayesClassifier_;
struct cv_Ptr_cv__ml__KNearest_;
struct cv_Ptr_cv__ml__SVM__Kernel_;
struct cv_Ptr_cv__ml__SVM_;
struct cv_Ptr_cv__ml__EM_;
struct cv_Ptr_cv__ml__DTrees_;
struct cv_Ptr_cv__ml__RTrees_;
struct cv_Ptr_cv__ml__Boost_;
struct cv_Ptr_cv__ml__ANN_MLP_;
struct cv_Ptr_cv__ml__LogisticRegression_;
struct cv_Ptr_cv__ml__SVMSGD_;
struct cv_Ptr_cv__BaseCascadeClassifier__MaskGenerator_;
struct cv_Ptr_cv__QRCodeDetector__Impl_ : public std___1_shared_ptr_cv__QRCodeDetector__Impl_ {
};
struct cv_Ptr_cv__DetectionBasedTracker__IDetector_ : public std___1_shared_ptr_cv__DetectionBasedTracker__IDetector_ {
};
struct cv_Ptr_cv__DetectionBasedTracker__SeparateDetectionWork_ : public std___1_shared_ptr_cv__DetectionBasedTracker__SeparateDetectionWork_ {
};
struct cv_Ptr_cv__Tonemap_;
struct cv_Ptr_cv__TonemapDrago_;
struct cv_Ptr_cv__TonemapReinhard_;
struct cv_Ptr_cv__TonemapMantiuk_;
struct cv_Ptr_cv__AlignMTB_;
struct cv_Ptr_cv__CalibrateDebevec_;
struct cv_Ptr_cv__CalibrateRobertson_;
struct cv_Ptr_cv__MergeDebevec_;
struct cv_Ptr_cv__MergeMertens_;
struct cv_Ptr_cv__MergeRobertson_;
struct cv_Ptr_cv__cuda__Stream__Impl_ : public std___1_shared_ptr_cv__cuda__Stream__Impl_ {
};
struct cv_Ptr_cv__cuda__Event__Impl_ : public std___1_shared_ptr_cv__cuda__Event__Impl_ {
};
struct cv_Ptr_cv__detail__RotationWarper_ : public std___1_shared_ptr_cv__detail__RotationWarper_ {
};
struct cv_Ptr_cv__detail__BestOf2NearestMatcher_;
struct cv_Ptr_cv__Stitcher_;
struct cv_Ptr_cv__FarnebackOpticalFlow_;
struct cv_Ptr_cv__VariationalRefinement_;
struct cv_Ptr_cv__DISOpticalFlow_;
struct cv_Ptr_cv__SparsePyrLKOpticalFlow_;
struct cv_Ptr_cv__TrackerMIL_;
struct cv_Ptr_cv__TrackerGOTURN_;
struct cv_Ptr_cv__BackgroundSubtractorMOG2_;
struct cv_Ptr_cv__BackgroundSubtractorKNN_;
class cv_FileNode;

typedef std___1_string cv_String;

enum cv_Error_Code {
    StsOk = 0,
    StsBackTrace = -1,
    StsError = -2,
    StsInternal = -3,
    StsNoMem = -4,
    StsBadArg = -5,
    StsBadFunc = -6,
    StsNoConv = -7,
    StsAutoTrace = -8,
    HeaderIsNull = -9,
    BadImageSize = -10,
    BadOffset = -11,
    BadDataPtr = -12,
    BadStep = -13,
    BadModelOrChSeq = -14,
    BadNumChannels = -15,
    BadNumChannel1U = -16,
    BadDepth = -17,
    BadAlphaChannel = -18,
    BadOrder = -19,
    BadOrigin = -20,
    BadAlign = -21,
    BadCallBack = -22,
    BadTileSize = -23,
    BadCOI = -24,
    BadROISize = -25,
    MaskIsTiled = -26,
    StsNullPtr = -27,
    StsVecLengthErr = -28,
    StsFilterStructContentErr = -29,
    StsKernelStructContentErr = -30,
    StsFilterOffsetErr = -31,
    StsBadSize = -201,
    StsDivByZero = -202,
    StsInplaceNotSupported = -203,
    StsObjectNotFound = -204,
    StsUnmatchedFormats = -205,
    StsBadFlag = -206,
    StsBadPoint = -207,
    StsBadMask = -208,
    StsUnmatchedSizes = -209,
    StsUnsupportedFormat = -210,
    StsOutOfRange = -211,
    StsParseError = -212,
    StsNotImplemented = -213,
    StsBadMemBlock = -214,
    StsAssert = -215,
    GpuNotSupported = -216,
    GpuApiCallError = -217,
    OpenGlNotSupported = -218,
    OpenGlApiCallError = -219,
    OpenCLApiCallError = -220,
    OpenCLDoubleNotSupported = -221,
    OpenCLInitError = -222,
    OpenCLNoAMDBlasFft = -223
};

enum cv_DecompTypes {
    DECOMP_LU = 0,
    DECOMP_SVD = 1,
    DECOMP_EIG = 2,
    DECOMP_CHOLESKY = 3,
    DECOMP_QR = 4,
    DECOMP_NORMAL = 16
};

enum cv_NormTypes {
    NORM_INF = 1,
    NORM_L1 = 2,
    NORM_L2 = 4,
    NORM_L2SQR = 5,
    NORM_HAMMING = 6,
    NORM_HAMMING2 = 7,
    NORM_TYPE_MASK = 7,
    NORM_RELATIVE = 8,
    NORM_MINMAX = 32
};

enum cv_BorderTypes {
    BORDER_CONSTANT = 0,
    BORDER_REPLICATE = 1,
    BORDER_REFLECT = 2,
    BORDER_WRAP = 3,
    BORDER_REFLECT_101 = 4,
    BORDER_TRANSPARENT = 5,
    BORDER_REFLECT101 = BORDER_REFLECT_101,
    BORDER_DEFAULT = BORDER_REFLECT_101,
    BORDER_ISOLATED = 16
};

void cv_error(int _code, const cv_String &_err, const char *_func, const char *_file, int _line);

class cv_Vec;
class cv_Vec_unsigned_char__2_;
class cv_Vec_unsigned_char__3_;
class cv_Vec_unsigned_char__4_;
class cv_Vec_short__2_;
class cv_Vec_short__3_;
class cv_Vec_short__4_;
class cv_Vec_unsigned_short__2_;
class cv_Vec_unsigned_short__3_;
class cv_Vec_unsigned_short__4_;
class cv_Vec_int__3_;
class cv_Vec_int__4_;
class cv_Vec_int__6_;
class cv_Vec_int__8_;
class cv_Vec_float__6_;
struct cv_Matx_MatMulOp {
     __attribute__((linkage("linkonce_odr"))) cv_Matx_MatMulOp() ;
     __attribute__((linkage("linkonce_odr"))) cv_Matx_MatMulOp(const cv_Matx_MatMulOp &__p1) ;
};

class cv_Matx_double__4__4_;
class cv_Matx_double__4__1_ {
public:
    enum __unnamed23 {
        rows = 4,
        cols = 1,
        channels = rows * cols,
        shortdim = (4 < 1 ? 4 : 1)
    };
     __attribute__((linkage("linkonce_odr"))) inline cv_Matx_double__4__1_() ;
     __attribute__((linkage("linkonce_odr"))) inline explicit cv_Matx_double__4__1_(const double *values) ;
     __attribute__((linkage("linkonce_odr"))) inline const double &operator()(int row_idx, int col_idx) const ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Matx_double__4__1_(const cv_Matx_double__4__4_ &a, const cv_Matx_double__4__1_ &b, cv_Matx_MatMulOp __p3) ;
    double val[4];
};
class cv_Vec_double__4_ : public cv_Matx_double__4__1_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Vec_double__4_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Vec_double__4_(const cv_Vec_double__4_ &m) ;
};
inline cv_Vec_double__4_::cv_Vec_double__4_() {
}
inline cv_Vec_double__4_::cv_Vec_double__4_(const cv_Vec_double__4_ &m) : cv_Matx_double__4__1_(m.val) {
}
class cv_Vec_double__6_;
class cv_Vec_float__1_;
class cv_Vec_double__1_;
class cv_Vec_float__5_;
class cv_Vec_double__24_;
class cv_Vec_long__2_;
class cv_Vec_int__1_;
class cv_Matx;
class cv_Matx_float__1__3_;
class cv_Matx_double__1__3_;
class cv_Matx_float__1__4_;
class cv_Matx_double__1__4_;
class cv_Matx_float__1__6_;
class cv_Matx_double__1__6_;
inline cv_Matx_double__4__1_::cv_Matx_double__4__1_() {
    for (int i = 0; i < channels; i++) {
        this->val[i] = double(0);
    }
}
inline cv_Matx_double__4__1_::cv_Matx_double__4__1_(const double *values) {
    for (int i = 0; i < channels; i++) {
        this->val[i] = values[i];
    }
}
inline const double &cv_Matx_double__4__1_::operator()(int row_idx, int col_idx) const {
    ;
    return this->val[row_idx * 1 + col_idx];
}
class cv_Matx_double__4__4_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline const double &operator()(int row_idx, int col_idx) const ;
    double val[16];
};
inline cv_Matx_double__4__1_::cv_Matx_double__4__1_(const cv_Matx_double__4__4_ &a, const cv_Matx_double__4__1_ &b, cv_Matx_MatMulOp __p3) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 1; j++) {
            double s = 0;
            for (int k = 0; k < 4; k++) {
                s += a(i, k) * b(k, j);
            }
            this->val[i * 1 + j] = s;
        }
    }
}
class cv_Matx_float__6__1_;
class cv_Matx_double__6__1_;
class cv_Matx_float__2__2_;
class cv_Matx_double__2__2_;
class cv_Matx_float__2__3_;
class cv_Matx_float__3__2_;
class cv_Matx_double__3__2_;
class cv_Matx_float__3__4_;
class cv_Matx_double__3__4_;
class cv_Matx_float__4__3_;
class cv_Matx_double__4__3_;
inline const double &cv_Matx_double__4__4_::operator()(int row_idx, int col_idx) const {
    ;
    return this->val[row_idx * 4 + col_idx];
}
class cv_Matx_float__6__6_;
class cv_Matx_double__6__6_;
class cv_Matx_float__1__1_;
class cv_Matx_double__1__1_;
class cv_Matx_int__1__1_;
class cv_Matx_int__1__2_;
class cv_Complex;
class cv_Complex_float_;
class cv_Complex_double_;
class cv_Point_;
inline cv_Point__int_::cv_Point__int_() : x(0), y(0) {
}
inline cv_Point__int_::cv_Point__int_(int _x, int _y) : x(_x), y(_y) {
}
inline cv_Point__int_::cv_Point__int_(cv_Point__int_ &&pt) noexcept : x(std___1_move_int___(pt.x)), y(std___1_move_int___(pt.y)) {
}
inline cv_Point__float_::cv_Point__float_() : x(0), y(0) {
}
inline cv_Point__float_::cv_Point__float_(cv_Point__float_ &&pt) noexcept : x(std___1_move_float___(pt.x)), y(std___1_move_float___(pt.y)) {
}
class cv_Point__unsigned_char_;
class cv_Point3_;
class cv_Point3__int_;
class cv_Point3__float_ {
public:
    float x;
    float y;
    float z;
};
class cv_Point3__double_;
class cv_Point3__unsigned_char_;
class cv_Size_;
inline cv_Size__int_::cv_Size__int_() : width(0), height(0) {
}
inline cv_Size__int_::cv_Size__int_(const cv_Size__int_ &sz) : width(sz.width), height(sz.height) {
}
inline cv_Size__int_::cv_Size__int_(cv_Size__int_ &&sz) noexcept : width(std___1_move_int___(sz.width)), height(std___1_move_int___(sz.height)) {
}
inline cv_Size__int_ &cv_Size__int_::operator=(const cv_Size__int_ &sz) {
    this->width = sz.width;
    this->height = sz.height;
    return *this;
}
class cv_Size__long_;
class cv_Rect_;
class cv_Rect__int_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Rect__int_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Rect__int_(cv_Rect__int_ &&r) noexcept ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Rect__int_(const cv_Point__int_ &pt1, const cv_Point__int_ &pt2) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Point__int_ tl() const ;
    int x;
    int y;
    int width;
    int height;
};
inline cv_Rect__int_::cv_Rect__int_() : x(0), y(0), width(0), height(0) {
}
inline cv_Rect__int_::cv_Rect__int_(cv_Rect__int_ &&r) noexcept : x(std___1_move_int___(r.x)), y(std___1_move_int___(r.y)), width(std___1_move_int___(r.width)), height(std___1_move_int___(r.height)) {
}
inline cv_Rect__int_::cv_Rect__int_(const cv_Point__int_ &pt1, const cv_Point__int_ &pt2) {
    this->x = std___1_min_int_(pt1.x, pt2.x);
    this->y = std___1_min_int_(pt1.y, pt2.y);
    this->width = std___1_max_int_(pt1.x, pt2.x) - this->x;
    this->height = std___1_max_int_(pt1.y, pt2.y) - this->y;
}
inline cv_Point__int_ cv_Rect__int_::tl() const {
    return cv_Point__int_(this->x, this->y);
}
class cv_Rect__float_;
class cv_Rect__double_;
class cv_Rect__long_;
class cv_Scalar_;
class cv_Scalar__double_ : public cv_Vec_double__4_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Scalar__double_() ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Scalar__double_(const cv_Scalar__double_ &s) ;
};
inline cv_Scalar__double_::cv_Scalar__double_() {
    this->val[0] = this->val[1] = this->val[2] = this->val[3] = 0;
}
inline cv_Scalar__double_::cv_Scalar__double_(const cv_Scalar__double_ &s) : cv_Vec_double__4_(s) {
}
class cv_Range;

class cv_TermCriteria;

class cv_KeyPoint;

class cv_DMatch;

class cv_Mat;

class cv_MatExpr;

class cv_UMat;

class cv_SparseMat;

class cv_Mat_;
class cv_Mat__cv__Vec_unsigned_char__2__;
class cv_Mat__cv__Vec_unsigned_char__3__;
class cv_Mat__cv__Vec_unsigned_char__4__;
class cv_Mat__short_;
class cv_Mat__cv__Vec_short__2__;
class cv_Mat__cv__Vec_short__3__;
class cv_Mat__cv__Vec_short__4__;
class cv_Mat__unsigned_short_;
class cv_Mat__cv__Vec_unsigned_short__2__;
class cv_Mat__cv__Vec_unsigned_short__3__;
class cv_Mat__cv__Vec_unsigned_short__4__;
class cv_Mat__cv__Vec_int__2__;
class cv_Mat__cv__Vec_int__3__;
class cv_Mat__cv__Vec_int__4__;
class cv_Mat__float_ : public cv_Mat {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_Mat__float_(int _rows, int _cols) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Mat__float_(const cv_Mat &m) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Mat__float_ &operator=(const cv_Mat &m) ;
     __attribute__((linkage("linkonce_odr"))) inline void release() ;
     __attribute__((linkage("linkonce_odr"))) inline int type() const ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Mat__float_(cv_Mat__float_ &&m) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_Mat__float_ &operator=(cv_Mat &&m) ;
};
class cv_DataType_float_ {
public:
    enum __unnamed24 {
        generic_type = 0,
        depth = 5,
        channels = 1,
        fmt = (int)'f',
        type = (((depth) & ((1 << 3) - 1)) + (((channels) - 1) << 3))
    };
};
struct cv_traits_Type_float_ {
    enum __unnamed28 {
        value = cv_DataType_float_::__unnamed24::type
    };
};
inline cv_Mat__float_::cv_Mat__float_(int _rows, int _cols) : cv_Mat(_rows, _cols, cv_traits_Type_float_::__unnamed28::value) {
}
inline cv_Mat__float_::cv_Mat__float_(const cv_Mat &m) : cv_Mat() {
    this->flags = (this->flags & ~((1 << 3) * 512 - 1)) + cv_traits_Type_float_::__unnamed28::value;
    *this = m;
}
struct cv_traits_Depth_float_ {
    enum __unnamed26 {
        value = cv_DataType_float_::__unnamed24::depth
    };
};
inline cv_Mat__float_ &cv_Mat__float_::operator=(const cv_Mat &m) {
    if (m.empty()) {
        this->release();
        return *this;
    }
    if (cv_traits_Type_float_::__unnamed28::value == m.type()) {
        this->cv_Mat::operator=(m);
        return *this;
    }
    if (cv_traits_Depth_float_::__unnamed26::value == m.depth()) {
        return (*this = m.reshape(cv_DataType_float_::__unnamed24::channels, m.dims, 0));
    }
    do {
        if (!!(cv_DataType_float_::__unnamed24::channels == m.channels() || m.empty())) {
        } else {
            cv_error(StsAssert, "DataType<_Tp>::channels == m.channels() || m.empty()", "operator=", "/usr/include/opencv4/opencv2/core/mat.inl.hpp", 1375);
        }
    } while (0);
    //m.convertTo(*this, this->type(), 1, 0);
    return *this;
}
inline void cv_Mat__float_::release() {
    this->cv_Mat::release();
    this->flags = (this->flags & ~((1 << 3) * 512 - 1)) + cv_traits_Type_float_::__unnamed28::value;
}
inline int cv_Mat__float_::type() const {
    ;
    return cv_traits_Type_float_::__unnamed28::value;
}
inline cv_Mat__float_::cv_Mat__float_(cv_Mat__float_ &&m) : cv_Mat(std___1_move_cv__Mat__float____(m)) {
}
inline cv_Mat__float_ &cv_Mat__float_::operator=(cv_Mat &&m) {
    if (m.empty()) {
        this->release();
        return *this;
    }
    if (cv_traits_Type_float_::__unnamed28::value == m.type()) {
        this->cv_Mat::operator=((cv_Mat &&)m);
        return *this;
    }
    if (cv_traits_Depth_float_::__unnamed26::value == m.depth()) {
        this->cv_Mat::operator=((cv_Mat &&)m.reshape(cv_DataType_float_::__unnamed24::channels, m.dims, 0));
        return *this;
    }
    ;
    //m.convertTo(*this, this->type(), 1, 0);
    return *this;
}
class cv_Mat__cv__Vec_float__2__;
class cv_Mat__cv__Vec_float__3__;
class cv_Mat__cv__Vec_float__4__;
class cv_Mat__cv__Vec_double__2__;
class cv_Mat__cv__Vec_double__3__;
class cv_Mat__cv__Vec_double__4__;
class cv_MatConstIterator;

class cv_SparseMatConstIterator;

class cv_MatIterator_;
class cv_MatIterator__double_;
class cv_MatIterator__unsigned_char_;
class cv_MatConstIterator {
public:
    cv_MatConstIterator(const cv_Mat *_m);
    cv_MatConstIterator(const cv_MatConstIterator &it);
    cv_MatConstIterator &operator+=(ptrdiff_t ofs);
    cv_MatConstIterator &operator++();
    cv_MatConstIterator operator++(int __p1);
    void seek(ptrdiff_t ofs, bool relative);
    void seek(const int *_idx, bool relative);
    const cv_Mat *m;
    size_t elemSize;
    const uchar *ptr;
    const uchar *sliceStart;
    const uchar *sliceEnd;
};

class cv_MatConstIterator__float_ : public cv_MatConstIterator {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator__float_(const cv_Mat__float_ *_m) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator__float_(const cv_MatConstIterator__float_ &it) ;
};
class cv_MatIterator__float_ : public cv_MatConstIterator__float_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_MatIterator__float_(cv_Mat__float_ *_m) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatIterator__float_(const cv_MatIterator__float_ &it) ;
     __attribute__((linkage("linkonce_odr"))) inline float &operator*() const ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatIterator__float_ &operator++() ;
};
inline cv_MatIterator__float_::cv_MatIterator__float_(cv_Mat__float_ *_m) : cv_MatConstIterator__float_(_m) {
}
inline cv_MatIterator__float_::cv_MatIterator__float_(const cv_MatIterator__float_ &it) : cv_MatConstIterator__float_(it) {
}
inline float &cv_MatIterator__float_::operator*() const {
    return *(float *)(this->ptr);
}
inline cv_MatIterator__float_ &cv_MatIterator__float_::operator++() {
    this->cv_MatConstIterator::operator++();
    return *this;
}
class cv_MatIterator__int_;
class cv_MatConstIterator_;
class cv_MatConstIterator__double_;
class cv_MatConstIterator__unsigned_char_;
inline cv_MatConstIterator__float_::cv_MatConstIterator__float_(const cv_Mat__float_ *_m) : cv_MatConstIterator(_m) {
}
inline cv_MatConstIterator__float_::cv_MatConstIterator__float_(const cv_MatConstIterator__float_ &it) : cv_MatConstIterator(it) {
}
class cv_MatConstIterator__int_;
class cv_cuda_GpuMat;

class cv_cuda_Stream;

class cv_cuda_Event;

class cv_DataType {
};
class cv_traits_internal_CheckMember_fmt {
};
struct cv_traits_Depth {
};
struct cv_traits_Type {
};
struct cv_traits_SafeFmt {
};
struct cv_Matx_AddOp {
     __attribute__((linkage("linkonce_odr"))) cv_Matx_AddOp() ;
};

cv_Matx_AddOp::cv_Matx_AddOp() {
}
struct cv_Matx_SubOp {
     __attribute__((linkage("linkonce_odr"))) cv_Matx_SubOp() ;
};

cv_Matx_SubOp::cv_Matx_SubOp() {
}
struct cv_Matx_ScaleOp {
     __attribute__((linkage("linkonce_odr"))) cv_Matx_ScaleOp() ;
};

cv_Matx_ScaleOp::cv_Matx_ScaleOp() {
}
cv_Matx_MatMulOp::cv_Matx_MatMulOp() {
}
cv_Matx_MatMulOp::cv_Matx_MatMulOp(const cv_Matx_MatMulOp &__p1) {
}
class cv_Matx1 {
};
class cv_Vec1 {
};
class cv_Complex1 {
};
class cv_Point_1 {
};
typedef cv_Point__int_ cv_Point2i;

typedef cv_Point2i cv_Point;

class cv_Point3_1 {
};
typedef cv_Point3__float_ cv_Point3f;

class cv_Size_1 {
};
class cv_Rect_1 {
};
typedef cv_Rect__int_ cv_Rect2i;

typedef cv_Rect2i cv_Rect;

class cv_Range {
public:
    cv_Range(int _start, int _end);
    static cv_Range all();
    int start;
    int end;
};

class cv_Scalar_1 {
};
class cv_TermCriteria {
public:
    int type;
    int maxCount;
    double epsilon;
};

 __attribute__((linkage("linkonce_odr"))) inline cv_Range::cv_Range(int _start, int _end) : start(_start), end(_end)  {
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Range cv_Range::all()  {
    return cv_Range((-2147483647 - 1), 2147483647);
}
static inline bool operator==(const cv_Range &r1, const cv_Range &r2) {
    return r1.start == r2.start && r1.end == r2.end;
}
static inline bool operator!=(const cv_Range &r1, const cv_Range &r2) {
    return !(r1 == r2);
}
static inline bool operator!(const cv_Range &r) {
    return r.start == r.end;
}
static inline cv_Range operator&(const cv_Range &r1, const cv_Range &r2) {
    cv_Range r(std___1_max_int_(r1.start, r2.start), std___1_min_int_(r1.end, r2.end));
    r.end = std___1_max_int_(r.end, r.start);
    return r;
}
static inline cv_Range operator+(const cv_Range &r1, int delta) {
    return cv_Range(r1.start + delta, r1.end + delta);
}
static inline cv_Range operator+(int delta, const cv_Range &r1) {
    return cv_Range(r1.start + delta, r1.end + delta);
}
static inline cv_Range operator-(const cv_Range &r1, int delta) {
    return r1 + (-delta);
}
class cv_BufferPoolController {
public:
    virtual size_t getReservedSize() const = 0;
    virtual size_t getMaxReservedSize() const = 0;
    virtual void setMaxReservedSize(size_t size) = 0;
    virtual void freeAllReservedBuffers() = 0;
};

enum cv_AccessFlag {
    ACCESS_READ = 1 << 24,
    ACCESS_WRITE = 1 << 25,
    ACCESS_RW = 3 << 24,
    ACCESS_MASK = ACCESS_RW,
    ACCESS_FAST = 1 << 26
};

static inline bool operator!(const cv_AccessFlag &val) {
    typedef __underlying_type(cv_AccessFlag) UnderlyingType;
    return !static_cast<UnderlyingType>(val);
}
static inline bool operator==(const cv_AccessFlag &a, const int &b) {
    return static_cast<int>(a) == static_cast<int>(b);
}
static inline bool operator!=(const cv_AccessFlag &a, const int &b) {
    return static_cast<int>(a) != static_cast<int>(b);
}
static inline cv_AccessFlag operator&(const cv_AccessFlag &a, const cv_AccessFlag &b) {
    typedef __underlying_type(cv_AccessFlag) UnderlyingType;
    return static_cast<cv_AccessFlag>(static_cast<UnderlyingType>(a) & static_cast<UnderlyingType>(b));
}
static inline cv_AccessFlag operator&(const int &a, const cv_AccessFlag &b) {
    typedef __underlying_type(cv_AccessFlag) UnderlyingType;
    return static_cast<cv_AccessFlag>(static_cast<UnderlyingType>(a) & static_cast<UnderlyingType>(b));
}
class cv__OutputArray;

class cv__InputArray {
public:
    enum KindFlag {
        KIND_SHIFT = 16,
        FIXED_TYPE = 32768 << KIND_SHIFT,
        FIXED_SIZE = 16384 << KIND_SHIFT,
        KIND_MASK = 31 << KIND_SHIFT,
        NONE = 0 << KIND_SHIFT,
        MAT = 1 << KIND_SHIFT,
        MATX = 2 << KIND_SHIFT,
        STD_VECTOR = 3 << KIND_SHIFT,
        STD_VECTOR_VECTOR = 4 << KIND_SHIFT,
        STD_VECTOR_MAT = 5 << KIND_SHIFT,
        EXPR = 6 << KIND_SHIFT,
        OPENGL_BUFFER = 7 << KIND_SHIFT,
        CUDA_HOST_MEM = 8 << KIND_SHIFT,
        CUDA_GPU_MAT = 9 << KIND_SHIFT,
        UMAT = 10 << KIND_SHIFT,
        STD_VECTOR_UMAT = 11 << KIND_SHIFT,
        STD_BOOL_VECTOR = 12 << KIND_SHIFT,
        STD_VECTOR_CUDA_GPU_MAT = 13 << KIND_SHIFT,
        STD_ARRAY = 14 << KIND_SHIFT,
        STD_ARRAY_MAT = 15 << KIND_SHIFT
    };
    cv__InputArray();
    cv__InputArray(const cv_Mat &m);
    cv__InputArray(const cv_MatExpr &expr);
    cv__InputArray(const cv_UMat &um);
    cv_Mat getMat(int idx) const;
    cv_Mat getMat_(int idx) const;
    cv__InputArray::KindFlag kind() const;
    cv_Size size(int i) const;
    int type(int i) const;
    ~cv__InputArray() noexcept;
    int flags;
    void *obj;
    cv_Size sz;
    void init(int _flags, const void *_obj);
    void init(int _flags, const void *_obj, cv_Size _sz);
};

static inline bool operator!(const cv__InputArray::KindFlag &val) {
    typedef __underlying_type(cv__InputArray::KindFlag) UnderlyingType;
    return !static_cast<UnderlyingType>(val);
}
static inline bool operator==(const cv__InputArray::KindFlag &a, const int &b) {
    return static_cast<int>(a) == static_cast<int>(b);
}
static inline bool operator!=(const cv__InputArray::KindFlag &a, const int &b) {
    return static_cast<int>(a) != static_cast<int>(b);
}
static inline cv__InputArray::KindFlag operator&(const cv__InputArray::KindFlag &a, const cv__InputArray::KindFlag &b) {
    typedef __underlying_type(cv__InputArray::KindFlag) UnderlyingType;
    return static_cast<cv__InputArray::KindFlag>(static_cast<UnderlyingType>(a) & static_cast<UnderlyingType>(b));
}
static inline cv__InputArray::KindFlag operator&(const int &a, const cv__InputArray::KindFlag &b) {
    typedef __underlying_type(cv__InputArray::KindFlag) UnderlyingType;
    return static_cast<cv__InputArray::KindFlag>(static_cast<UnderlyingType>(a) & static_cast<UnderlyingType>(b));
}
class cv__OutputArray : public cv__InputArray {
public:
    enum DepthMask {
        DEPTH_MASK_8U = 1 << 0,
        DEPTH_MASK_8S = 1 << 1,
        DEPTH_MASK_16U = 1 << 2,
        DEPTH_MASK_16S = 1 << 3,
        DEPTH_MASK_32S = 1 << 4,
        DEPTH_MASK_32F = 1 << 5,
        DEPTH_MASK_64F = 1 << 6,
        DEPTH_MASK_16F = 1 << 7,
        DEPTH_MASK_ALL = (DEPTH_MASK_64F << 1) - 1,
        DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S,
        DEPTH_MASK_ALL_16F = (DEPTH_MASK_16F << 1) - 1,
        DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F
    };
    cv__OutputArray(cv_Mat &m);
     __attribute__((linkage("linkonce_odr"))) inline cv__OutputArray(cv_Mat__float_ &m) ;
    cv__OutputArray(cv_UMat &m);
    cv__OutputArray(const cv_Mat &m);
    void create(cv_Size sz, int type, int i, bool allowTransposed, cv__OutputArray::DepthMask fixedDepthMask) const;
    void create(int rows, int cols, int type, int i, bool allowTransposed, cv__OutputArray::DepthMask fixedDepthMask) const;
};

class cv__InputOutputArray : public cv__OutputArray {
public:
};

typedef cv_InputArray cv_InputArrayOfArrays;

typedef cv_OutputArray cv_OutputArrayOfArrays;

typedef const cv__InputOutputArray &cv_InputOutputArray;

cv_InputOutputArray cv_noArray();

struct cv_UMatData;

class cv_MatAllocator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_MatAllocator() noexcept ;
    virtual cv_UMatData *allocate(int dims, const int *sizes, int type, void *data, size_t *step, cv_AccessFlag flags, cv_UMatUsageFlags usageFlags) const = 0;
    virtual bool allocate(cv_UMatData *data, cv_AccessFlag accessflags, cv_UMatUsageFlags usageFlags) const = 0;
    virtual void deallocate(cv_UMatData *data) const = 0;
    virtual void map(cv_UMatData *data, cv_AccessFlag accessflags) const;
    virtual void unmap(cv_UMatData *data) const;
    virtual void download(cv_UMatData *data, void *dst, int dims, const size_t sz[], const size_t srcofs[], const size_t srcstep[], const size_t dststep[]) const;
    virtual void upload(cv_UMatData *data, const void *src, int dims, const size_t sz[], const size_t dstofs[], const size_t dststep[], const size_t srcstep[]) const;
    virtual void copy(cv_UMatData *srcdata, cv_UMatData *dstdata, int dims, const size_t sz[], const size_t srcofs[], const size_t srcstep[], const size_t dstofs[], const size_t dststep[], bool sync) const;
    virtual cv_BufferPoolController *getBufferPoolController(const char *id) const;
};

cv_MatAllocator::~cv_MatAllocator() noexcept {
}
class cv_MatCommaInitializer_ {
};
class cv_MatCommaInitializer__double_;
class cv_MatCommaInitializer__unsigned_char_;
class cv_MatCommaInitializer__float_ {
public:
     __attribute__((linkage("linkonce_odr"))) inline cv_MatCommaInitializer__float_(cv_Mat__float_ *_m) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatCommaInitializer__float_ &operator,(float v) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatCommaInitializer__float_ &operator,(double v) ;
     __attribute__((linkage("linkonce_odr"))) inline cv_MatCommaInitializer__float_ &operator,(int v) ;
     __attribute__((linkage("linkonce_odr"))) inline operator cv_Mat__float_() const ;
    cv_MatIterator__float_ it;
};
inline cv_MatCommaInitializer__float_::cv_MatCommaInitializer__float_(cv_Mat__float_ *_m) : it(_m) {
}
inline cv_MatCommaInitializer__float_ &cv_MatCommaInitializer__float_::operator,(float v) {
    ;
    * this->it = float(v);
    ++ this->it;
    return *this;
}
inline cv_MatCommaInitializer__float_ &cv_MatCommaInitializer__float_::operator,(double v) {
    ;
    * this->it = float(v);
    ++ this->it;
    return *this;
}
inline cv_MatCommaInitializer__float_ &cv_MatCommaInitializer__float_::operator,(int v) {
    ;
    * this->it = float(v);
    ++ this->it;
    return *this;
}
inline cv_MatCommaInitializer__float_::operator cv_Mat__float_() const {
    ;
    return cv_Mat__float_(*this->it.m);
}
class cv_MatCommaInitializer__int_;
struct cv_UMatData {
    enum MemoryFlag {
        COPY_ON_MAP = 1,
        HOST_COPY_OBSOLETE = 2,
        DEVICE_COPY_OBSOLETE = 4,
        TEMP_UMAT = 8,
        TEMP_COPIED_UMAT = 24,
        USER_ALLOCATED = 32,
        DEVICE_MEM_MAPPED = 64,
        ASYNC_CLEANUP = 128
    };
    const cv_MatAllocator *prevAllocator;
    const cv_MatAllocator *currAllocator;
    int urefcount;
    int refcount;
    uchar *data;
    uchar *origdata;
    size_t size;
    cv_UMatData::MemoryFlag flags;
    void *handle;
    void *userdata;
    int allocatorFlags_;
    int mapcount;
    cv_UMatData *originalUMatData;
    std___1_shared_ptr_void_ allocatorContext;
};

static inline bool operator!(const cv_UMatData::MemoryFlag &val) {
    typedef __underlying_type(cv_UMatData::MemoryFlag) UnderlyingType;
    return !static_cast<UnderlyingType>(val);
}
static inline bool operator==(const cv_UMatData::MemoryFlag &a, const int &b) {
    return static_cast<int>(a) == static_cast<int>(b);
}
static inline bool operator!=(const cv_UMatData::MemoryFlag &a, const int &b) {
    return static_cast<int>(a) != static_cast<int>(b);
}
static inline cv_UMatData::MemoryFlag operator&(const cv_UMatData::MemoryFlag &a, const cv_UMatData::MemoryFlag &b) {
    typedef __underlying_type(cv_UMatData::MemoryFlag) UnderlyingType;
    return static_cast<cv_UMatData::MemoryFlag>(static_cast<UnderlyingType>(a) & static_cast<UnderlyingType>(b));
}
class cv_Mat_1 {
};
struct cv_SparseMat_Hdr {
    int refcount;
    int dims;
    int valueOffset;
    size_t nodeSize;
    size_t nodeCount;
    size_t freeList;
    std___1_vector_unsigned_char__std____1__allocator_unsigned_char__ pool;
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ hashtab;
    int size[32];
};

class cv_SparseMat {
public:
    enum __unnamed31 {
        MAGIC_VAL = 1123876864,
        MAX_DIM = 32,
        HASH_SCALE = 1540483477,
        HASH_BIT = 2147483648U
    };
    int flags;
    cv_SparseMat_Hdr *hdr;
};

class cv_MatConstIterator_1 {
};
class cv_MatIterator_1 {
};
class cv_SparseMatConstIterator {
public:
    const cv_SparseMat *m;
    size_t hashidx;
    uchar *ptr;
};

class cv_MatOp {
public:
    virtual ~cv_MatOp();
    virtual bool elementWise(const cv_MatExpr &expr) const;
    virtual void assign(const cv_MatExpr &expr, cv_Mat &m, int type) const = 0;
    virtual void roi(const cv_MatExpr &expr, const cv_Range &rowRange, const cv_Range &colRange, cv_MatExpr &res) const;
    virtual void diag(const cv_MatExpr &expr, int d, cv_MatExpr &res) const;
    virtual void augAssignAdd(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignSubtract(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignMultiply(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignDivide(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignAnd(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignOr(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void augAssignXor(const cv_MatExpr &expr, cv_Mat &m) const;
    virtual void add(const cv_MatExpr &expr1, const cv_MatExpr &expr2, cv_MatExpr &res) const;
    virtual void add(const cv_MatExpr &expr1, const cv_Scalar &s, cv_MatExpr &res) const;
    virtual void subtract(const cv_MatExpr &expr1, const cv_MatExpr &expr2, cv_MatExpr &res) const;
    virtual void subtract(const cv_Scalar &s, const cv_MatExpr &expr, cv_MatExpr &res) const;
    virtual void multiply(const cv_MatExpr &expr1, const cv_MatExpr &expr2, cv_MatExpr &res, double scale) const;
    virtual void multiply(const cv_MatExpr &expr1, double s, cv_MatExpr &res) const;
    virtual void divide(const cv_MatExpr &expr1, const cv_MatExpr &expr2, cv_MatExpr &res, double scale) const;
    virtual void divide(double s, const cv_MatExpr &expr, cv_MatExpr &res) const;
    virtual void abs(const cv_MatExpr &expr, cv_MatExpr &res) const;
    virtual void transpose(const cv_MatExpr &expr, cv_MatExpr &res) const;
    virtual void matmul(const cv_MatExpr &expr1, const cv_MatExpr &expr2, cv_MatExpr &res) const;
    virtual void invert(const cv_MatExpr &expr, int method, cv_MatExpr &res) const;
    virtual cv_Size size(const cv_MatExpr &expr) const;
    virtual int type(const cv_MatExpr &expr) const;
};

class cv_MatExpr {
public:
    operator cv_Mat() const;
    cv_MatExpr inv(int method) const;
    const cv_MatOp *op;
    int flags;
    cv_Mat a;
    cv_Mat b;
    cv_Mat c;
    double alpha;
    double beta;
    cv_Scalar s;
};

cv_MatExpr operator+(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator+(const cv_Mat &a, const cv_Scalar &s);

cv_MatExpr operator+(const cv_Scalar &s, const cv_Mat &a);

cv_MatExpr operator+(const cv_MatExpr &e, const cv_Mat &m);

cv_MatExpr operator+(const cv_Mat &m, const cv_MatExpr &e);

cv_MatExpr operator+(const cv_MatExpr &e, const cv_Scalar &s);

cv_MatExpr operator+(const cv_Scalar &s, const cv_MatExpr &e);

cv_MatExpr operator+(const cv_MatExpr &e1, const cv_MatExpr &e2);

cv_MatExpr operator-(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator-(const cv_MatExpr &e, const cv_Mat &m);

cv_MatExpr operator-(const cv_Mat &m);

cv_MatExpr operator*(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator*(const cv_Mat &a, double s);

cv_MatExpr operator*(double s, const cv_Mat &a);

cv_MatExpr operator*(const cv_MatExpr &e, const cv_Mat &m);

cv_MatExpr operator*(const cv_Mat &m, const cv_MatExpr &e);

cv_MatExpr operator*(const cv_MatExpr &e, double s);

cv_MatExpr operator*(double s, const cv_MatExpr &e);

cv_MatExpr operator*(const cv_MatExpr &e1, const cv_MatExpr &e2);

cv_MatExpr operator/(const cv_Mat &a, double s);

cv_MatExpr operator<(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator<(const cv_Mat &a, double s);

cv_MatExpr operator<(double s, const cv_Mat &a);

cv_MatExpr operator==(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator==(const cv_Mat &a, double s);

cv_MatExpr operator==(double s, const cv_Mat &a);

cv_MatExpr operator!=(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator!=(const cv_Mat &a, double s);

cv_MatExpr operator!=(double s, const cv_Mat &a);

cv_MatExpr operator&(const cv_Mat &a, const cv_Mat &b);

cv_MatExpr operator&(const cv_Mat &a, const cv_Scalar &s);

cv_MatExpr operator&(const cv_Scalar &s, const cv_Mat &a);

 __attribute__((linkage("linkonce_odr"))) inline void cv__InputArray::init(int _flags, const void *_obj)  {
    this->flags = _flags;
    this->obj = (void *)_obj;
}
 __attribute__((linkage("linkonce_odr"))) inline void cv__InputArray::init(int _flags, const void *_obj, cv_Size _sz)  {
    this->flags = _flags;
    this->obj = (void *)_obj;
    this->sz = _sz;
}
 __attribute__((linkage("linkonce_odr"))) inline cv__InputArray::cv__InputArray()  {
    this->init(0 + NONE, 0);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__InputArray::cv__InputArray(const cv_Mat &m)  {
    this->init(MAT + ACCESS_READ, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__InputArray::cv__InputArray(const cv_UMat &m)  {
    this->init(UMAT + ACCESS_READ, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__InputArray::~cv__InputArray() noexcept  {
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat cv__InputArray::getMat(int i) const  {
    if (this->kind() == MAT && i < 0) {
        return *(const cv_Mat *)this->obj;
    }
    return this->getMat_(i);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__OutputArray::cv__OutputArray(cv_Mat &m)  {
    this->init(MAT + ACCESS_WRITE, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__OutputArray::cv__OutputArray(cv_UMat &m)  {
    this->init(UMAT + ACCESS_WRITE, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__OutputArray::cv__OutputArray(cv_Mat__float_ &m)  {
    this->init(FIXED_TYPE + MAT + cv_traits_Type_float_::__unnamed28::value + ACCESS_WRITE, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv__OutputArray::cv__OutputArray(const cv_Mat &m)  {
    this->init(FIXED_TYPE + FIXED_SIZE + MAT + ACCESS_WRITE, &m);
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat cv_Mat::row(int y) const  {
    return cv_Mat(*this, cv_Range(y, y + 1), cv_Range::all());
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat cv_Mat::col(int x) const  {
    return cv_Mat(*this, cv_Range::all(), cv_Range(x, x + 1));
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat cv_Mat::rowRange(int startrow, int endrow) const  {
    return cv_Mat(*this, cv_Range(startrow, endrow), cv_Range::all());
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat cv_Mat::colRange(int startcol, int endcol) const  {
    return cv_Mat(*this, cv_Range::all(), cv_Range(startcol, endcol));
}
 __attribute__((linkage("linkonce_odr"))) inline bool cv_Mat::isContinuous() const  {
    return (this->flags & CONTINUOUS_FLAG) != 0;
}
 __attribute__((linkage("linkonce_odr"))) inline size_t cv_Mat::elemSize() const  {
    size_t res = this->dims > 0 ? this->step.p[this->dims - 1] : 0;
    ;
    return res;
}
 __attribute__((linkage("linkonce_odr"))) inline int cv_Mat::type() const  {
    return ((this->flags) & ((1 << 3) * 512 - 1));
}
 __attribute__((linkage("linkonce_odr"))) inline int cv_Mat::depth() const  {
    return ((this->flags) & ((1 << 3) - 1));
}
 __attribute__((linkage("linkonce_odr"))) inline int cv_Mat::channels() const  {
    return ((((this->flags) & ((512 - 1) << 3)) >> 3) + 1);
}
 __attribute__((linkage("linkonce_odr"))) inline const uchar *cv_Mat::ptr(int y) const  {
    ;
    return this->data + this->step.p[0] * y;
}
 __attribute__((linkage("linkonce_odr"))) inline float &cv_Mat::at_float_(int i0, int i1)  {
    ;
    ;
    ;
    ;
    ;
    return ((float *)(this->data + this->step.p[0] * i0))[i1];
}
 __attribute__((linkage("linkonce_odr"))) inline float &cv_Mat::at_float_(int i0)  {
    ;
    ;
    ;
    ;
    if (this->isContinuous() || this->size.p[0] == 1) {
        return ((float *)this->data)[i0];
    }
    if (this->size.p[1] == 1) {
        return *(float *)(this->data + this->step.p[0] * i0);
    }
    int i = i0 / this->cols, j = i0 - i * this->cols;
    return ((float *)(this->data + this->step.p[0] * i))[j];
}
 __attribute__((linkage("linkonce_odr"))) inline const float &cv_Mat::at_float_(int i0) const  {
    ;
    ;
    ;
    ;
    if (this->isContinuous() || this->size.p[0] == 1) {
        return ((const float *)this->data)[i0];
    }
    if (this->size.p[1] == 1) {
        return *(const float *)(this->data + this->step.p[0] * i0);
    }
    int i = i0 / this->cols, j = i0 - i * this->cols;
    return ((const float *)(this->data + this->step.p[0] * i))[j];
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator::cv_MatConstIterator(const cv_Mat *_m) : m(_m), elemSize(_m->elemSize()), ptr(0), sliceStart(0), sliceEnd(0)  {
    if (this->m && this->m->isContinuous()) {
        do {
            if (!!(!this->m->empty())) {
            } else {
                cv_error(StsAssert, "!m->empty()", "MatConstIterator", "/usr/include/opencv4/opencv2/core/mat.inl.hpp", 2186);
            }
        } while (0);
        this->sliceStart = this->m->ptr(0);
        this->sliceEnd = this->sliceStart + this->m->total() * this->elemSize;
    }
    this->seek((const int *)0, false);
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator::cv_MatConstIterator(const cv_MatConstIterator &it) : m(it.m), elemSize(it.elemSize), ptr(it.ptr), sliceStart(it.sliceStart), sliceEnd(it.sliceEnd)  {
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator &cv_MatConstIterator::operator+=(ptrdiff_t ofs)  {
    if (!this->m || ofs == 0) {
        return *this;
    }
    ptrdiff_t ofsb = ofs * this->elemSize;
    this->ptr += ofsb;
    if (this->ptr < this->sliceStart || this->sliceEnd <= this->ptr) {
        this->ptr -= ofsb;
        this->seek(ofs, true);
    }
    return *this;
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator &cv_MatConstIterator::operator++()  {
    if (this->m && (this->ptr += this->elemSize) >= this->sliceEnd) {
        this->ptr -= this->elemSize;
        this->seek(1, true);
    }
    return *this;
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatConstIterator cv_MatConstIterator::operator++(int __p1)  {
    cv_MatConstIterator b = *this;
    *this += 1;
    return b;
}
static inline bool operator==(const cv_MatConstIterator &a, const cv_MatConstIterator &b) {
    return a.m == b.m && a.ptr == b.ptr;
}
static inline bool operator!=(const cv_MatConstIterator &a, const cv_MatConstIterator &b) {
    return !(a == b);
}
static inline bool operator<(const cv_MatConstIterator &a, const cv_MatConstIterator &b) {
    return a.ptr < b.ptr;
}
static inline cv_MatConstIterator operator+(const cv_MatConstIterator &a, ptrdiff_t ofs) {
    cv_MatConstIterator b = a;
    return b += ofs;
}
static inline cv_MatConstIterator operator+(ptrdiff_t ofs, const cv_MatConstIterator &a) {
    cv_MatConstIterator b = a;
    return b += ofs;
}
static inline bool operator==(const cv_SparseMatConstIterator &it1, const cv_SparseMatConstIterator &it2) {
    return it1.m == it2.m && it1.ptr == it2.ptr;
}
static inline bool operator!=(const cv_SparseMatConstIterator &it1, const cv_SparseMatConstIterator &it2) {
    return !(it1 == it2);
}
static inline cv_MatCommaInitializer__float_ operator<<(const cv_Mat__float_ &m, float val) {
    cv_MatCommaInitializer__float_ commaInitializer((cv_Mat__float_ *)&m);
    return (commaInitializer , val);
}
static inline cv_MatCommaInitializer__float_ operator<<(const cv_Mat__float_ &m, int val) {
    cv_MatCommaInitializer__float_ commaInitializer((cv_Mat__float_ *)&m);
    return (commaInitializer , val);
}
 __attribute__((linkage("linkonce_odr"))) inline cv_Mat &cv_Mat::operator=(const cv_MatExpr &e)  {
    e.op->assign(e, *this, -1);
    return *this;
}
 __attribute__((linkage("linkonce_odr"))) inline cv_MatExpr::operator cv_Mat() const  {
    cv_Mat m;
    this->op->assign(*this, m, -1);
    return m;
}
class cv_FileNode;

class cv_FileStorage_Impl;

class cv_FileStorage {
public:
    enum State {
        UNDEFINED = 0,
        VALUE_EXPECTED = 1,
        NAME_EXPECTED = 2,
        INSIDE_MAP = 4
    };
    virtual ~cv_FileStorage() noexcept;
    virtual bool open(const cv_String &filename, int flags, const cv_String &encoding);
    virtual bool isOpened() const;
    virtual void release();
    virtual cv_String releaseAndGetString();
    cv_FileNode operator[](const cv_String &nodename) const;
    int state;
    std___1_string elname;
    cv_Ptr_cv__FileStorage__Impl_ p;
};

class cv_FileNode {
public:
    enum __unnamed32 {
        NONE = 0,
        INT = 1,
        REAL = 2,
        FLOAT = REAL,
        STR = 3,
        STRING = STR,
        SEQ = 4,
        MAP = 5,
        TYPE_MASK = 7,
        FLOW = 8,
        UNIFORM = 8,
        EMPTY = 16,
        NAMED = 32
    };
    cv_FileNode(const cv_FileNode &node);
    cv_FileNode &operator=(const cv_FileNode &node);
    cv_FileNode operator[](const char *nodename) const;
    cv_FileNode operator[](int i) const;
    size_t size() const;
    operator int() const;
    operator double() const;
     __attribute__((linkage("linkonce_odr"))) inline operator std___1_string() const ;
    std___1_string string() const;
    cv_FileStorage_Impl *fs;
    size_t blockIdx;
    size_t ofs;
};

inline cv_FileNode::operator std___1_string() const {
    return this->string();
}
void cv_write(cv_FileStorage &fs, const cv_String &name, int value);

void cv_write1(cv_FileStorage &fs, const cv_String &name, float value);

void cv_write2(cv_FileStorage &fs, const cv_String &name, double value);

void cv_write3(cv_FileStorage &fs, const cv_String &name, const cv_String &value);

void cv_write4(cv_FileStorage &fs, const cv_String &name, const cv_Mat &value);

void cv_write5(cv_FileStorage &fs, const cv_String &name, const cv_SparseMat &value);

void cv_write6(cv_FileStorage &fs, const cv_String &name, const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &value);

void cv_write7(cv_FileStorage &fs, const cv_String &name, const std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__ &value);

void cv_writeScalar(cv_FileStorage &fs, int value);

void cv_writeScalar1(cv_FileStorage &fs, float value);

cv_FileStorage &operator<<(cv_FileStorage &fs, const cv_String &str);

class cv_internal_WriteStructContext {
public:
    cv_internal_WriteStructContext(cv_FileStorage &_fs, const cv_String &name, int flags, const cv_String &typeName);
    ~cv_internal_WriteStructContext() noexcept;
    cv_FileStorage *fs;
};

class cv_internal_VecWriterProxy {
};
class cv_internal_VecWriterProxy_cv__KeyPoint__0_ {
public:
     __attribute__((linkage("linkonce_odr"))) cv_internal_VecWriterProxy_cv__KeyPoint__0_(cv_FileStorage *_fs) ;
     __attribute__((linkage("linkonce_odr"))) void operator()(const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &vec) const ;
    cv_FileStorage *fs;
};
cv_internal_VecWriterProxy_cv__KeyPoint__0_::cv_internal_VecWriterProxy_cv__KeyPoint__0_(cv_FileStorage *_fs) : fs(_fs) {
}
static inline void cv_write12(cv_FileStorage &fs, const cv_KeyPoint &kpt);

void cv_internal_VecWriterProxy_cv__KeyPoint__0_::operator()(const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &vec) const {
    size_t count = vec.size();
    for (size_t i = 0; i < count; i++) {
        cv_write12(*this->fs, vec[i]);
    }
}
class cv_internal_VecWriterProxy_cv__DMatch__0_ {
public:
     __attribute__((linkage("linkonce_odr"))) cv_internal_VecWriterProxy_cv__DMatch__0_(cv_FileStorage *_fs) ;
     __attribute__((linkage("linkonce_odr"))) void operator()(const std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__ &vec) const ;
    cv_FileStorage *fs;
};
cv_internal_VecWriterProxy_cv__DMatch__0_::cv_internal_VecWriterProxy_cv__DMatch__0_(cv_FileStorage *_fs) : fs(_fs) {
}
static inline void cv_write13(cv_FileStorage &fs, const cv_DMatch &m);

void cv_internal_VecWriterProxy_cv__DMatch__0_::operator()(const std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__ &vec) const {
    size_t count = vec.size();
    for (size_t i = 0; i < count; i++) {
        cv_write13(*this->fs, vec[i]);
    }
}
static inline void cv_write_cv__Mat_(cv_FileStorage &fs, const cv_Mat &value);

static inline void cv_write_int_(cv_FileStorage &fs, const int &value) {
    cv_writeScalar(fs, value);
}
static inline void write1(cv_FileStorage &fs, const float &value) {
    cv_writeScalar1(fs, value);
}
static inline void cv_write8(cv_FileStorage &fs, const cv_Range &r) {
    cv_write_int_(fs, r.start);
    cv_write_int_(fs, r.end);
}
static inline void cv_write9(cv_FileStorage &fs, const cv_String &name, const cv_Range &r) {
    cv_internal_WriteStructContext ws(fs, name, cv_FileNode::__unnamed32::SEQ + cv_FileNode::__unnamed32::FLOW, cv_String());
    cv_write8(fs, r);
}
static inline void cv_write10(cv_FileStorage &fs, const cv_String &name, const cv_KeyPoint &kpt) {
    cv_internal_WriteStructContext ws(fs, name, cv_FileNode::__unnamed32::SEQ + cv_FileNode::__unnamed32::FLOW, cv_String());
    write1(fs, kpt.pt.x);
    write1(fs, kpt.pt.y);
    write1(fs, kpt.size);
    write1(fs, kpt.angle);
    write1(fs, kpt.response);
    cv_write_int_(fs, kpt.octave);
    cv_write_int_(fs, kpt.class_id);
}
static inline void cv_write11(cv_FileStorage &fs, const cv_String &name, const cv_DMatch &m) {
    cv_internal_WriteStructContext ws(fs, name, cv_FileNode::__unnamed32::SEQ + cv_FileNode::__unnamed32::FLOW, cv_String());
    cv_write_int_(fs, m.queryIdx);
    cv_write_int_(fs, m.trainIdx);
    cv_write_int_(fs, m.imgIdx);
    write1(fs, m.distance);
}
static inline void cv_write12(cv_FileStorage &fs, const cv_KeyPoint &kpt) {
    cv_write10(fs, cv_String(), kpt);
}
static inline void cv_write13(cv_FileStorage &fs, const cv_DMatch &m) {
    cv_write11(fs, cv_String(), m);
}
static inline void cv_write14(cv_FileStorage &fs, const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &vec) {
    cv_internal_VecWriterProxy_cv__KeyPoint__0_ w(&fs);
    w(vec);
}
static inline void cv_write15(cv_FileStorage &fs, const std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__ &vec) {
    cv_internal_VecWriterProxy_cv__DMatch__0_ w(&fs);
    w(vec);
}
static inline cv_FileStorage &operator<<(cv_FileStorage &fs, const int &value);

static inline cv_FileStorage &operator<<(cv_FileStorage &fs, const DBoW2_ScoringType &value);

static inline cv_FileStorage &operator<<(cv_FileStorage &fs, const DBoW2_WeightingType &value);

static inline cv_FileStorage &operator<<(cv_FileStorage &fs, const double &value);

static inline cv_FileStorage &operator<<(cv_FileStorage &fs, const char *str) {
    return (fs << cv_String(str));
}
class cv_Exception : public std_exception {
public:
    virtual ~cv_Exception() throw();
     virtual const char *what() const throw() override ;
    cv_String msg;
    int code;
    cv_String err;
    cv_String func;
    cv_String file;
    int line;
};

void cv_error1(const cv_Exception &exc);

double cv_norm(cv_InputArray src1, int normType, cv_InputArray mask);

class cv_SVD {
public:
    enum Flags {
        MODIFY_A = 1,
        NO_UV = 2,
        FULL_UV = 4
    };
    static void compute(cv_InputArray src, cv_OutputArray w, cv_OutputArray u, cv_OutputArray vt, int flags);
    cv_Mat u;
    cv_Mat w;
    cv_Mat vt;
};

class cv_Formatted {
public:
    virtual const char *next() = 0;
    virtual void reset() = 0;
    virtual ~cv_Formatted();
};

class cv_Formatter {
public:
    virtual ~cv_Formatter();
    virtual cv_Ptr_cv__Formatted_ format(const cv_Mat &mtx) const = 0;
    virtual void set16fPrecision(int p) = 0;
    virtual void set32fPrecision(int p) = 0;
    virtual void set64fPrecision(int p) = 0;
    virtual void setMultiline(bool ml) = 0;
};

class cv_Algorithm;

class cv_Algorithm {
public:
    virtual ~cv_Algorithm() noexcept;
     __attribute__((linkage("linkonce_odr"))) virtual void clear() ;
     __attribute__((linkage("linkonce_odr"))) virtual void write(cv_FileStorage &fs) const ;
     __attribute__((linkage("linkonce_odr"))) virtual void read(const cv_FileNode &fn) ;
     __attribute__((linkage("linkonce_odr"))) virtual bool empty() const ;
    virtual void save(const cv_String &filename) const;
    virtual cv_String getDefaultName() const;
};

void cv_Algorithm::clear() {
}
void cv_Algorithm::write(cv_FileStorage &fs) const {
    (void)fs;
}
void cv_Algorithm::read(const cv_FileNode &fn) {
    (void)fn;
}
bool cv_Algorithm::empty() const {
    return false;
}
class std___1_basic_stringbuf2 {
};
class std___1_basic_ostringstream2 {
};
class std___1_complex;
class std___1_complex_int_;
class std___1_complex_bool_;
class std___1_complex1 {
};
class cv_AutoBuffer {
};
class cv_AutoBuffer_long__1UL_ {
public:
    long *ptr;
    size_t sz;
    long buf[1];
};
class cv_AutoBuffer_double__1UL_ {
public:
    double *ptr;
    size_t sz;
    double buf[1];
};
class cv_AutoBuffer_std____1__string__1UL_ {
public:
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ *ptr;
    size_t sz;
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ buf[1];
};
class cv_MinProblemSolver_Function {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_MinProblemSolver_Function() noexcept ;
    virtual int getDims() const = 0;
    virtual double getGradientEps() const;
    virtual double calc(const double *x) const = 0;
    virtual void getGradient(const double *x, double *grad);
};

class cv_MinProblemSolver : public cv_Algorithm {
public:
    virtual cv_Ptr_cv__MinProblemSolver__Function_ getFunction() const = 0;
    virtual void setFunction(const cv_Ptr_cv__MinProblemSolver__Function_ &f) = 0;
    virtual cv_TermCriteria getTermCriteria() const = 0;
    virtual void setTermCriteria(const cv_TermCriteria &termcrit) = 0;
    virtual double minimize(cv_InputOutputArray x) = 0;
};

cv_MinProblemSolver_Function::~cv_MinProblemSolver_Function() noexcept {
}
class DBoW2_FClass_TDescriptor;

class DBoW2_FClass {
public:
    virtual void meanValue(const std___1_vector_const_DBoW2__FClass__TDescriptor____std____1__allocator_const_DBoW2__FClass__TDescriptor____ &descriptors, DBoW2_FClass_TDescriptor &mean) = 0;
};

class DBoW2_FORB : public DBoW2_FClass {
public:
};

 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) double std___1_accumulate_std____1____wrap_iter_double_____double_(std___1___wrap_iter_double___ __first, std___1___wrap_iter_double___ __last, double __init) ;

class std___1___deque_base;
class std___1_deque;
class std___1___deque_base_common {
};
class std___1___deque_base_common_true_ {
public:
};
class std___1___deque_base1 {
};
class std___1_deque1 {
};
class std___1_stack;
class std___1_stack1 {
};
class std___1___iom_t8;
class std___1___iom_t81 {
};
class std___1___iom_t10;
class std___1___iom_t101 {
};
struct std___1___quoted_proxy {
};
struct std___1___quoted_proxy_char__std____1__char_traits_char___std____1__allocator_char__;
class __attribute__((visibility("default")))  std___1___fs_filesystem_path  {
public:
    std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ __pn_;
};

struct __attribute__((visibility("hidden")))  std___1___fs_filesystem_filesystem_error__Storage  {
    std___1___fs_filesystem_path __p1_;
    std___1___fs_filesystem_path __p2_;
    std___1_string __what_;
};

class __attribute__((visibility("default")))  std___1___fs_filesystem_filesystem_error  : public std___1_system_error {
public:
     ~std___1___fs_filesystem_filesystem_error() noexcept override ;
     __attribute__((visibility("hidden"))) __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const char *what() const noexcept override ;
    std___1_shared_ptr_std____1____fs__filesystem__filesystem_error___Storage_ __storage_;
};

const char *std___1___fs_filesystem_filesystem_error::what() const noexcept {
    return this->__storage_->__what_.c_str();
}
class std___1___fs_filesystem_recursive_directory_iterator;

class __attribute__((visibility("hidden")))  std___1___fs_filesystem___dir_stream ;

struct __attribute__((visibility("hidden")))  std___1___fs_filesystem_recursive_directory_iterator___shared_imp ;

class std___1___fs_filesystem_recursive_directory_iterator {
public:
    std___1_shared_ptr_std____1____fs__filesystem__recursive_directory_iterator____shared_imp_ __imp_;
    bool __rec_;
};

class DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const = 0;
    virtual bool mustNormalize(DBoW2_LNorm &norm) const = 0;
     __attribute__((linkage("linkonce_odr"))) virtual ~DBoW2_GeneralScoring() noexcept ;
};

DBoW2_GeneralScoring::~DBoW2_GeneralScoring() noexcept {
}
class DBoW2_L1Scoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_L1Scoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L1;
    return true;
}
class DBoW2_L2Scoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_L2Scoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L2;
    return true;
}
class DBoW2_ChiSquareScoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_ChiSquareScoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L1;
    return true;
}
class DBoW2_KLScoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_KLScoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L1;
    return true;
}
class DBoW2_BhattacharyyaScoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_BhattacharyyaScoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L1;
    return true;
}
class DBoW2_DotProductScoring : public DBoW2_GeneralScoring {
public:
    virtual double score(const DBoW2_BowVector &v, const DBoW2_BowVector &w) const;
     __attribute__((linkage("linkonce_odr"))) inline virtual bool mustNormalize(DBoW2_LNorm &norm) const ;
};

inline bool DBoW2_DotProductScoring::mustNormalize(DBoW2_LNorm &norm) const {
    norm = L1;
    return false;
}
class DUtils_Random {
public:
    static void SeedRandOnce();
     __attribute__((linkage("linkonce_odr"))) static double RandomValue_double_(double min, double max) ;
    static int RandomInt(int min, int max);
};

class DBoW2_TemplatedVocabulary {
};
class DBoW2_TemplatedVocabulary_cv__Mat__DBoW2__FORB_;
typedef DBoW2_TemplatedVocabulary_cv__Mat__DBoW2__FORB_ ORB_SLAM2_ORBVocabulary;

struct std___1___list_node;
struct cv_detail_GraphEdge {
    int from;
    int to;
    float weight;
};

struct std___1___list_node_base_cv__detail__GraphEdge__void___ {
    std___1___list_node_base_cv__detail__GraphEdge__void___ *__prev_;
    std___1___list_node_base_cv__detail__GraphEdge__void___ *__next_;
};
struct __attribute__((standalone_debug))  std___1___list_node_cv__detail__GraphEdge__void___  : public std___1___list_node_base_cv__detail__GraphEdge__void___ {
    cv_detail_GraphEdge __value_;
};
struct std___1___list_node_ORB_SLAM2__ExtractorNode__void___;
struct std___1___list_node_cv__Mat__void___;
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1___list_node_ORB_SLAM2__KeyFrame____void___::__as_link() {
    return static_cast<std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *>(this->std___1___list_node_base_ORB_SLAM2__KeyFrame____void___::__self());
}
struct std___1___list_node_double__void___;
struct std___1___list_node_bool__void___;
std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1___list_node_ORB_SLAM2__MapPoint____void___::__as_link() {
    return static_cast<std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *>(this->std___1___list_node_base_ORB_SLAM2__MapPoint____void___::__self());
}
struct std___1___list_node_base;
struct std___1___list_node_base_ORB_SLAM2__ExtractorNode__void___ {
    std___1___list_node_base_ORB_SLAM2__ExtractorNode__void___ *__prev_;
    std___1___list_node_base_ORB_SLAM2__ExtractorNode__void___ *__next_;
};
struct std___1___list_node_base_cv__Mat__void___ {
    std___1___list_node_base_cv__Mat__void___ *__prev_;
    std___1___list_node_base_cv__Mat__void___ *__next_;
};
struct std___1___list_node_pointer_traits_ORB_SLAM2__KeyFrame____void___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__unsafe_link_pointer_cast(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__p) ;
};
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___::std___1___list_node_base_ORB_SLAM2__KeyFrame____void___() : __prev_(std___1___list_node_pointer_traits_ORB_SLAM2__KeyFrame____void___::__unsafe_link_pointer_cast(this->__self())), __next_(std___1___list_node_pointer_traits_ORB_SLAM2__KeyFrame____void___::__unsafe_link_pointer_cast(this->__self())) {
}
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1___list_node_base_ORB_SLAM2__KeyFrame____void___::__self() {
    return std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__KeyFrame____void______::pointer_to(*this);
}
std___1___list_node_ORB_SLAM2__KeyFrame____void___ *std___1___list_node_base_ORB_SLAM2__KeyFrame____void___::__as_node() {
    return static_cast<std___1___list_node_ORB_SLAM2__KeyFrame____void___ *>(this->__self());
}
struct std___1___list_node_base_double__void___ {
    std___1___list_node_base_double__void___ *__prev_;
    std___1___list_node_base_double__void___ *__next_;
};
struct std___1___list_node_base_bool__void___ {
    std___1___list_node_base_bool__void___ *__prev_;
    std___1___list_node_base_bool__void___ *__next_;
};
struct std___1___list_node_pointer_traits_ORB_SLAM2__MapPoint____void___ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__unsafe_link_pointer_cast(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__p) ;
};
std___1___list_node_base_ORB_SLAM2__MapPoint____void___::std___1___list_node_base_ORB_SLAM2__MapPoint____void___() : __prev_(std___1___list_node_pointer_traits_ORB_SLAM2__MapPoint____void___::__unsafe_link_pointer_cast(this->__self())), __next_(std___1___list_node_pointer_traits_ORB_SLAM2__MapPoint____void___::__unsafe_link_pointer_cast(this->__self())) {
}
std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1___list_node_base_ORB_SLAM2__MapPoint____void___::__self() {
    return std___1_pointer_traits_std____1____list_node_base_ORB_SLAM2__MapPoint____void______::pointer_to(*this);
}
std___1___list_node_ORB_SLAM2__MapPoint____void___ *std___1___list_node_base_ORB_SLAM2__MapPoint____void___::__as_node() {
    return static_cast<std___1___list_node_ORB_SLAM2__MapPoint____void___ *>(this->__self());
}
struct std___1___list_node_pointer_traits {
};
struct std___1___list_node_pointer_traits_cv__detail__GraphEdge__void___ {
};
struct std___1___list_node_pointer_traits_ORB_SLAM2__ExtractorNode__void___ {
};
struct std___1___list_node_pointer_traits_cv__Mat__void___ {
};
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1___list_node_pointer_traits_ORB_SLAM2__KeyFrame____void___::__unsafe_link_pointer_cast(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__p) {
    return __p;
}
struct std___1___list_node_pointer_traits_double__void___ {
};
struct std___1___list_node_pointer_traits_bool__void___ {
};
std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1___list_node_pointer_traits_ORB_SLAM2__MapPoint____void___::__unsafe_link_pointer_cast(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__p) {
    return __p;
}
struct std___1___list_node_base1 {
};
struct std___1___list_node1 {
};
class std___1_list;
class std___1___list_imp_ORB_SLAM2__ExtractorNode__std____1__allocator_ORB_SLAM2__ExtractorNode__ {
public:
    std___1___list_node_base_ORB_SLAM2__ExtractorNode__void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__ExtractorNode__void_____ __size_alloc_;
};
class  std___1_list_ORB_SLAM2__ExtractorNode__std____1__allocator_ORB_SLAM2__ExtractorNode__  : public std___1___list_imp_ORB_SLAM2__ExtractorNode__std____1__allocator_ORB_SLAM2__ExtractorNode__ {
public:
};
class std___1___list_iterator_ORB_SLAM2__KeyFrame____void___;
class std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ {
public:
    std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____ __size_alloc_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__end_as_link() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t &__sz() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const size_t &__sz() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__node_alloc() noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline void __unlink_nodes(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__f, std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__l) noexcept ;
     __attribute__((linkage("linkonce_odr"))) inline std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool empty() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __invalidate_all_iterators() ;
};
class  std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____  : public std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool empty() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame *&front() ;
     __attribute__((linkage("linkonce_odr"))) void push_back(ORB_SLAM2_KeyFrame *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void pop_front() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ __allocate_node(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__na) ;
     __attribute__((linkage("linkonce_odr"))) inline void __link_nodes_at_back(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__f, std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__l) ;
};
std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) {
}
bool std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::empty() const noexcept {
    return this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::empty();
}
class  std___1___list_iterator_ORB_SLAM2__KeyFrame____void___  {
public:
    std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___list_iterator_ORB_SLAM2__KeyFrame____void___(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__p) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_KeyFrame *&operator*() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &operator++() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ operator++(int __p1) ;
};
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::begin() noexcept {
    return this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::begin();
}
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::end() noexcept {
    return this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::end();
}
ORB_SLAM2_KeyFrame *&std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::front() {
    ((void)0);
    return this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_.__next_->__as_node()->__value_;
}
void std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::push_back(ORB_SLAM2_KeyFrame *const &__x) {
    std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__na = this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__node_alloc();
    std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ __hold = this->__allocate_node(__na);
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::construct_ORB_SLAM2__KeyFrame____ORB_SLAM2__KeyFrame__const____void_(__na, std___1_addressof_ORB_SLAM2__KeyFrame___(__hold->__value_), __x);
    this->__link_nodes_at_back(__hold.get()->__as_link(), __hold.get()->__as_link());
    ++this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__sz();
    __hold.release();
}
void std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::clear() noexcept {
    this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::clear();
}
void std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::pop_front() {
    ((void)0);
    std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__na = this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__node_alloc();
    std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__n = this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_.__next_;
    std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__unlink_nodes(__n, __n);
    --this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__sz();
    std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__np = __n->__as_node();
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::destroy_ORB_SLAM2__KeyFrame____void__void_(__na, std___1_addressof_ORB_SLAM2__KeyFrame___(__np->__value_));
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::deallocate(__na, __np, 1);
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______ std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__allocate_node(std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__na) {
    std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__p = std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::allocate(__na, 1);
    __p->__prev_ = nullptr;
    return std___1_unique_ptr_std____1____list_node_ORB_SLAM2__KeyFrame____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void______(__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____(__na, 1));
}
inline void std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__link_nodes_at_back(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__f, std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__l) {
    __l->__next_ = this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_as_link();
    __f->__prev_ = this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_.__prev_;
    __f->__prev_->__next_ = __f;
    this->std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_.__prev_ = __l;
}
class std___1___list_imp_cv__Mat__std____1__allocator_cv__Mat__ {
public:
    std___1___list_node_base_cv__Mat__void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_cv__Mat__void_____ __size_alloc_;
};
class  std___1_list_cv__Mat__std____1__allocator_cv__Mat__  : public std___1___list_imp_cv__Mat__std____1__allocator_cv__Mat__ {
public:
};
class std___1___list_imp_double__std____1__allocator_double__ {
public:
    std___1___list_node_base_double__void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_double__void_____ __size_alloc_;
};
class  std___1_list_double__std____1__allocator_double__  : public std___1___list_imp_double__std____1__allocator_double__ {
public:
};
class std___1___list_imp_bool__std____1__allocator_bool__ {
public:
    std___1___list_node_base_bool__void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_bool__void_____ __size_alloc_;
};
class  std___1_list_bool__std____1__allocator_bool__  : public std___1___list_imp_bool__std____1__allocator_bool__ {
public:
};
class std___1___list_iterator_ORB_SLAM2__MapPoint____void___;
class  std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___  {
public:
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___(const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__p) noexcept ;
};
class std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ {
public:
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ __end_;
    std___1___compressed_pair_unsigned_long__std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____ __size_alloc_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__end_as_link() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) size_t &__sz() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) const size_t &__sz() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__node_alloc() noexcept ;
     __attribute__((linkage("linkonce_odr"))) static inline void __unlink_nodes(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__f, std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__l) noexcept ;
     __attribute__((linkage("linkonce_odr"))) inline std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool empty() const noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ end() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void __invalidate_all_iterators() ;
};
class  std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____  : public std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ {
public:
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ begin() noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ end() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void push_back(ORB_SLAM2_MapPoint *const &__x) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) void clear() noexcept ;
     __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ erase(std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___ __p) ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ __allocate_node(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__na) ;
     __attribute__((linkage("linkonce_odr"))) inline void __link_nodes_at_back(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__f, std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__l) ;
};
std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) {
}
class  std___1___list_iterator_ORB_SLAM2__MapPoint____void___  {
public:
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__ptr_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) explicit std___1___list_iterator_ORB_SLAM2__MapPoint____void___(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__p) noexcept ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ORB_SLAM2_MapPoint *&operator*() const ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &operator++() ;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1___list_iterator_ORB_SLAM2__MapPoint____void___ operator++(int __p1) ;
};
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::begin() noexcept {
    return this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::begin();
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::end() noexcept {
    return this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::end();
}
void std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::push_back(ORB_SLAM2_MapPoint *const &__x) {
    std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__na = this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__node_alloc();
    std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ __hold = this->__allocate_node(__na);
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::construct_ORB_SLAM2__MapPoint____ORB_SLAM2__MapPoint__const____void_(__na, std___1_addressof_ORB_SLAM2__MapPoint___(__hold->__value_), __x);
    this->__link_nodes_at_back(__hold.get()->__as_link(), __hold.get()->__as_link());
    ++this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__sz();
    __hold.release();
}
void std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear() noexcept {
    this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear();
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::erase(std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___ __p) {
    ((void)0);
    std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__na = this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__node_alloc();
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__n = __p.__ptr_;
    std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__r = __n->__next_;
    std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__unlink_nodes(__n, __n);
    --this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__sz();
    std___1___list_node_ORB_SLAM2__MapPoint____void___ *__np = __n->__as_node();
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::destroy_ORB_SLAM2__MapPoint____void__void_(__na, std___1_addressof_ORB_SLAM2__MapPoint___(__np->__value_));
    std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::deallocate(__na, __np, 1);
    return std___1___list_iterator_ORB_SLAM2__MapPoint____void___(__r);
}
std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______ std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__allocate_node(std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__na) {
    std___1___list_node_ORB_SLAM2__MapPoint____void___ *__p = std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::allocate(__na, 1);
    __p->__prev_ = nullptr;
    return std___1_unique_ptr_std____1____list_node_ORB_SLAM2__MapPoint____void_____std____1____allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void______(__p, std___1___allocator_destructor_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____(__na, 1));
}
inline void std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__link_nodes_at_back(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__f, std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__l) {
    __l->__next_ = this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_as_link();
    __f->__prev_ = this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_.__prev_;
    __f->__prev_->__next_ = __f;
    this->std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_.__prev_ = __l;
}
class std___1___list_imp;
std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__end_as_link() const noexcept {
    return std___1___list_node_pointer_traits_ORB_SLAM2__KeyFrame____void___::__unsafe_link_pointer_cast(const_cast<std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ &>(this->__end_).__self());
}
size_t &std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__sz() noexcept {
    return this->__size_alloc_.first();
}
const size_t &std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__sz() const noexcept {
    return this->__size_alloc_.first();
}
std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__node_alloc() noexcept {
    return this->__size_alloc_.second();
}
inline void std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__unlink_nodes(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__f, std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__l) noexcept {
    __f->__prev_->__next_ = __l->__next_;
    __l->__next_->__prev_ = __f->__prev_;
}
inline std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____() noexcept(std___1_integral_constant_bool__true_::value) : __size_alloc_(0, std___1___default_init_tag()) {
}
void std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::clear() noexcept {
    if (!this->empty()) {
        std___1_allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void____ &__na = this->__node_alloc();
        std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__f = this->__end_.__next_;
        std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__l = this->__end_as_link();
        __unlink_nodes(__f, __l->__prev_);
        this->__sz() = 0;
        while (__f != __l)
            {
                std___1___list_node_ORB_SLAM2__KeyFrame____void___ *__np = __f->__as_node();
                __f = __f->__next_;
                std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::destroy_ORB_SLAM2__KeyFrame____void__void_(__na, std___1_addressof_ORB_SLAM2__KeyFrame___(__np->__value_));
                std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__KeyFrame____void_____::deallocate(__na, __np, 1);
            }
        this->__invalidate_all_iterators();
    }
}
bool std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::empty() const noexcept {
    return this->__sz() == 0;
}
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::begin() noexcept {
    return std___1___list_iterator_ORB_SLAM2__KeyFrame____void___(this->__end_.__next_);
}
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::end() noexcept {
    return std___1___list_iterator_ORB_SLAM2__KeyFrame____void___(this->__end_as_link());
}
void std___1___list_imp_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____::__invalidate_all_iterators() {
}
std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__end_as_link() const noexcept {
    return std___1___list_node_pointer_traits_ORB_SLAM2__MapPoint____void___::__unsafe_link_pointer_cast(const_cast<std___1___list_node_base_ORB_SLAM2__MapPoint____void___ &>(this->__end_).__self());
}
size_t &std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__sz() noexcept {
    return this->__size_alloc_.first();
}
const size_t &std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__sz() const noexcept {
    return this->__size_alloc_.first();
}
std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__node_alloc() noexcept {
    return this->__size_alloc_.second();
}
inline void std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__unlink_nodes(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__f, std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__l) noexcept {
    __f->__prev_->__next_ = __l->__next_;
    __l->__next_->__prev_ = __f->__prev_;
}
inline std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____() noexcept(std___1_integral_constant_bool__true_::value) : __size_alloc_(0, std___1___default_init_tag()) {
}
void std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::clear() noexcept {
    if (!this->empty()) {
        std___1_allocator_std____1____list_node_ORB_SLAM2__MapPoint____void____ &__na = this->__node_alloc();
        std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__f = this->__end_.__next_;
        std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__l = this->__end_as_link();
        __unlink_nodes(__f, __l->__prev_);
        this->__sz() = 0;
        while (__f != __l)
            {
                std___1___list_node_ORB_SLAM2__MapPoint____void___ *__np = __f->__as_node();
                __f = __f->__next_;
                std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::destroy_ORB_SLAM2__MapPoint____void__void_(__na, std___1_addressof_ORB_SLAM2__MapPoint___(__np->__value_));
                std___1_allocator_traits_std____1__allocator_std____1____list_node_ORB_SLAM2__MapPoint____void_____::deallocate(__na, __np, 1);
            }
        this->__invalidate_all_iterators();
    }
}
bool std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::empty() const noexcept {
    return this->__sz() == 0;
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::begin() noexcept {
    return std___1___list_iterator_ORB_SLAM2__MapPoint____void___(this->__end_.__next_);
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::end() noexcept {
    return std___1___list_iterator_ORB_SLAM2__MapPoint____void___(this->__end_as_link());
}
void std___1___list_imp_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____::__invalidate_all_iterators() {
}
class std___1___list_const_iterator;
class  std___1___list_const_iterator_cv__detail__GraphEdge__void___  {
public:
    std___1___list_node_base_cv__detail__GraphEdge__void___ *__ptr_;
};
class std___1___list_const_iterator_ORB_SLAM2__ExtractorNode__void___;
class std___1___list_const_iterator_cv__Mat__void___;
class std___1___list_const_iterator_ORB_SLAM2__KeyFrame____void___;
class std___1___list_const_iterator_double__void___;
class std___1___list_const_iterator_bool__void___;
std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___::std___1___list_const_iterator_ORB_SLAM2__MapPoint____void___(const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__p) noexcept : __ptr_(__p.__ptr_) {
}
class std___1___list_iterator {
};
class  std___1___list_iterator_cv__detail__GraphEdge__void___  {
public:
    std___1___list_node_base_cv__detail__GraphEdge__void___ *__ptr_;
};
class  std___1___list_iterator_ORB_SLAM2__ExtractorNode__void___  {
public:
    std___1___list_node_base_ORB_SLAM2__ExtractorNode__void___ *__ptr_;
};
class std___1___list_iterator_cv__Mat__void___;
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___::std___1___list_iterator_ORB_SLAM2__KeyFrame____void___(std___1___list_node_base_ORB_SLAM2__KeyFrame____void___ *__p) noexcept : __ptr_(__p) {
}
ORB_SLAM2_KeyFrame *&std___1___list_iterator_ORB_SLAM2__KeyFrame____void___::operator*() const {
    return this->__ptr_->__as_node()->__value_;
}
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &std___1___list_iterator_ORB_SLAM2__KeyFrame____void___::operator++() {
    this->__ptr_ = this->__ptr_->__next_;
    return *this;
}
std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ std___1___list_iterator_ORB_SLAM2__KeyFrame____void___::operator++(int __p1) {
    std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ __t(*this);
    ++ (*this);
    return __t;
}
class std___1___list_iterator_double__void___;
class std___1___list_iterator_bool__void___;
std___1___list_iterator_ORB_SLAM2__MapPoint____void___::std___1___list_iterator_ORB_SLAM2__MapPoint____void___(std___1___list_node_base_ORB_SLAM2__MapPoint____void___ *__p) noexcept : __ptr_(__p) {
}
ORB_SLAM2_MapPoint *&std___1___list_iterator_ORB_SLAM2__MapPoint____void___::operator*() const {
    return this->__ptr_->__as_node()->__value_;
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &std___1___list_iterator_ORB_SLAM2__MapPoint____void___::operator++() {
    this->__ptr_ = this->__ptr_->__next_;
    return *this;
}
std___1___list_iterator_ORB_SLAM2__MapPoint____void___ std___1___list_iterator_ORB_SLAM2__MapPoint____void___::operator++(int __p1) {
    std___1___list_iterator_ORB_SLAM2__MapPoint____void___ __t(*this);
    ++ (*this);
    return __t;
}
class std___1_list1;
class std___1___list_imp1;
class std___1___list_const_iterator1;
class std___1_list2;
class std___1___list_imp2;
class std___1___list_const_iterator2;
class std___1_list3;
class std___1___list_imp3;
class std___1___list_const_iterator3;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator==(const std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &__x, const std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &__y)  {
    return __x.__ptr_ == __y.__ptr_;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator!=(const std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &__x, const std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ &__y)  {
    return !(__x == __y);
}
class std___1_list4;
class std___1___list_imp4;
class std___1___list_const_iterator4;
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator==(const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__x, const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__y)  {
    return __x.__ptr_ == __y.__ptr_;
}
 __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) bool operator!=(const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__x, const std___1___list_iterator_ORB_SLAM2__MapPoint____void___ &__y)  {
    return !(__x == __y);
}
class std___1___list_const_iterator5 {
};
class std___1_list5;
class std___1___list_imp5;
class std___1_list6;
class std___1___list_imp6;
class std___1___list_imp7 {
};
class std___1_list7 {
};
enum cvflann_flann_algorithm_t {
    FLANN_INDEX_LINEAR = 0,
    FLANN_INDEX_KDTREE = 1,
    FLANN_INDEX_KMEANS = 2,
    FLANN_INDEX_COMPOSITE = 3,
    FLANN_INDEX_KDTREE_SINGLE = 4,
    FLANN_INDEX_HIERARCHICAL = 5,
    FLANN_INDEX_LSH = 6,
    FLANN_INDEX_SAVED = 254,
    FLANN_INDEX_AUTOTUNED = 255,
    LINEAR = 0,
    KDTREE = 1,
    KMEANS = 2,
    COMPOSITE = 3,
    KDTREE_SINGLE = 4,
    SAVED = 254,
    AUTOTUNED = 255
};

enum cvflann_flann_centers_init_t {
    FLANN_CENTERS_RANDOM = 0,
    FLANN_CENTERS_GONZALES = 1,
    FLANN_CENTERS_KMEANSPP = 2,
    FLANN_CENTERS_GROUPWISE = 3,
    CENTERS_RANDOM = 0,
    CENTERS_GONZALES = 1,
    CENTERS_KMEANSPP = 2
};

enum cvflann_flann_distance_t {
    FLANN_DIST_EUCLIDEAN = 1,
    FLANN_DIST_L2 = 1,
    FLANN_DIST_MANHATTAN = 2,
    FLANN_DIST_L1 = 2,
    FLANN_DIST_MINKOWSKI = 3,
    FLANN_DIST_MAX = 4,
    FLANN_DIST_HIST_INTERSECT = 5,
    FLANN_DIST_HELLINGER = 6,
    FLANN_DIST_CHI_SQUARE = 7,
    FLANN_DIST_CS = 7,
    FLANN_DIST_KULLBACK_LEIBLER = 8,
    FLANN_DIST_KL = 8,
    FLANN_DIST_HAMMING = 9,
    FLANN_DIST_DNAMMING = 10,
    EUCLIDEAN = 1,
    MANHATTAN = 2,
    MINKOWSKI = 3,
    MAX_DIST = 4,
    HIST_INTERSECT = 5,
    HELLINGER = 6,
    CS = 7,
    KL1 = 8,
    KULLBACK_LEIBLER = 8
};

struct cv_flann_IndexParams {
    ~cv_flann_IndexParams() noexcept;
    void *params;
};

struct cv_flann_KDTreeIndexParams : public cv_flann_IndexParams {
};

struct cv_flann_SearchParams : public cv_flann_IndexParams {
    cv_flann_SearchParams(int checks, float eps, bool sorted);
};

class cv_flann_Index {
public:
    virtual ~cv_flann_Index();
    virtual void build(cv_InputArray features, const cv_flann_IndexParams &params, cvflann_flann_distance_t distType);
    virtual void knnSearch(cv_InputArray query, cv_OutputArray indices, cv_OutputArray dists, int knn, const cv_flann_SearchParams &params);
    virtual int radiusSearch(cv_InputArray query, cv_OutputArray indices, cv_OutputArray dists, double radius, int maxResults, const cv_flann_SearchParams &params);
    virtual void save(const cv_String &filename) const;
    virtual bool load(cv_InputArray features, const cv_String &filename);
    virtual void release();
    cvflann_flann_distance_t distType;
    cvflann_flann_algorithm_t algo;
    int featureType;
    void *index;
    cv_Mat features_clone;
};

class cv_Feature2D : virtual public cv_Algorithm {
public:
    virtual ~cv_Feature2D() noexcept;
    virtual void detect(cv_InputArray image, std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &keypoints, cv_InputArray mask);
    virtual void detect(cv_InputArrayOfArrays images, std___1_vector_std____1__vector_cv__KeyPoint___std____1__allocator_std____1__vector_cv__KeyPoint___ &keypoints, cv_InputArrayOfArrays masks);
    virtual void compute(cv_InputArray image, std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &keypoints, cv_OutputArray descriptors);
    virtual void compute(cv_InputArrayOfArrays images, std___1_vector_std____1__vector_cv__KeyPoint___std____1__allocator_std____1__vector_cv__KeyPoint___ &keypoints, cv_OutputArrayOfArrays descriptors);
    virtual void detectAndCompute(cv_InputArray image, cv_InputArray mask, std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ &keypoints, cv_OutputArray descriptors, bool useProvidedKeypoints);
    virtual int descriptorSize() const;
    virtual int descriptorType() const;
    virtual int defaultNorm() const;
     virtual void write(cv_FileStorage &__p1) const override ;
     virtual void read(const cv_FileNode &__p1) override ;
     virtual bool empty() const override ;
     virtual cv_String getDefaultName() const override ;
};

class cv_SimpleBlobDetector : public cv_Feature2D {
public:
     virtual cv_String getDefaultName() const override ;
};

class cv_DescriptorMatcher : public cv_Algorithm {
public:
    virtual ~cv_DescriptorMatcher() noexcept;
    virtual void add(cv_InputArrayOfArrays descriptors);
     virtual void clear() override ;
     virtual bool empty() const override ;
    virtual bool isMaskSupported() const = 0;
    virtual void train();
     virtual void read(const cv_FileNode &__p1) override ;
     virtual void write(cv_FileStorage &__p1) const override ;
    virtual cv_Ptr_cv__DescriptorMatcher_ clone(bool emptyTrainData) const = 0;
    virtual void knnMatchImpl(cv_InputArray queryDescriptors, std___1_vector_std____1__vector_cv__DMatch___std____1__allocator_std____1__vector_cv__DMatch___ &matches, int k, cv_InputArrayOfArrays masks, bool compactResult) = 0;
    virtual void radiusMatchImpl(cv_InputArray queryDescriptors, std___1_vector_std____1__vector_cv__DMatch___std____1__allocator_std____1__vector_cv__DMatch___ &matches, float maxDistance, cv_InputArrayOfArrays masks, bool compactResult) = 0;
    std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ trainDescCollection;
    std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ utrainDescCollection;
};

struct cv_dnn_dnn4_v20201117_Net_Impl;

class cv_dnn_dnn4_v20201117_Net {
public:
    cv_Ptr_cv__dnn__dnn4_v20201117__Net__Impl_ impl;
};

struct cv_dnn_dnn4_v20201117_Model_Impl;

class cv_dnn_dnn4_v20201117_Model {
public:
    cv_Ptr_cv__dnn__dnn4_v20201117__Model__Impl_ impl;
};

struct cvflann_anyimpl_empty_any {
};

 __attribute__((linkage("linkonce_odr"))) inline std___1_ostream &operator<<(std___1_ostream &out, const cvflann_anyimpl_empty_any &__p2)  {
    out << "[empty_any]";
    return out;
}
struct cvflann_anyimpl_base_any_policy {
    virtual void static_delete(void **x) = 0;
    virtual void copy_from_value(const void *src, void **dest) = 0;
    virtual void clone(void *const *src, void **dest) = 0;
    virtual void move(void *const *src, void **dest) = 0;
    virtual void *get_value(void **src) = 0;
    virtual const void *get_value(void *const *src) = 0;
    virtual size_t get_size() = 0;
    virtual const std_type_info &type() = 0;
    virtual void print(std___1_ostream &out, void *const *src) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual ~cvflann_anyimpl_base_any_policy() noexcept ;
};

cvflann_anyimpl_base_any_policy::~cvflann_anyimpl_base_any_policy() noexcept {
}
struct cvflann_anyimpl_typed_base_any_policy {
};
struct cvflann_anyimpl_typed_base_any_policy_cvflann__flann_centers_init_t_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_cvflann__flann_centers_init_t_::get_size() {
    return sizeof(cvflann_flann_centers_init_t);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_cvflann__flann_centers_init_t_::type() {
    return typeid(cvflann_flann_centers_init_t);
}
struct cvflann_anyimpl_typed_base_any_policy_cvflann__flann_algorithm_t_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_cvflann__flann_algorithm_t_::get_size() {
    return sizeof(cvflann_flann_algorithm_t);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_cvflann__flann_algorithm_t_::type() {
    return typeid(cvflann_flann_algorithm_t);
}
struct cvflann_anyimpl_typed_base_any_policy_std____1__string_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_std____1__string_::get_size() {
    return sizeof(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_std____1__string_::type() {
    return typeid(std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__);
}
struct cvflann_anyimpl_typed_base_any_policy_cvflann__anyimpl__empty_any_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_cvflann__anyimpl__empty_any_::get_size() {
    return sizeof(cvflann_anyimpl_empty_any);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_cvflann__anyimpl__empty_any_::type() {
    return typeid(cvflann_anyimpl_empty_any);
}
struct cvflann_anyimpl_typed_base_any_policy_const_char___ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_const_char___::get_size() {
    return sizeof(const char *);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_const_char___::type() {
    return typeid(const char *);
}
struct cvflann_anyimpl_typed_base_any_policy_int_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_int_::get_size() {
    return sizeof(int);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_int_::type() {
    return typeid(int);
}
struct cvflann_anyimpl_typed_base_any_policy_float_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_float_::get_size() {
    return sizeof(float);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_float_::type() {
    return typeid(float);
}
struct cvflann_anyimpl_typed_base_any_policy_bool_ : cvflann_anyimpl_base_any_policy {
     __attribute__((linkage("linkonce_odr"))) virtual size_t get_size() override ;
     __attribute__((linkage("linkonce_odr"))) virtual const std_type_info &type() override ;
};
size_t cvflann_anyimpl_typed_base_any_policy_bool_::get_size() {
    return sizeof(bool);
}
const std_type_info &cvflann_anyimpl_typed_base_any_policy_bool_::type() {
    return typeid(bool);
}
struct cvflann_anyimpl_small_any_policy {
};
struct cvflann_anyimpl_small_any_policy_signed_char_;
struct cvflann_anyimpl_small_any_policy_unsigned_char_;
struct cvflann_anyimpl_small_any_policy_short_;
struct cvflann_anyimpl_small_any_policy_unsigned_short_;
struct  cvflann_anyimpl_small_any_policy_int_ final  : cvflann_anyimpl_typed_base_any_policy_int_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **__p1) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_small_any_policy_int_::static_delete(void **__p1) {
}
void cvflann_anyimpl_small_any_policy_int_::copy_from_value(const void *src, void **dest) {
    new (dest) int(*reinterpret_cast<const int *>(src));
}
void cvflann_anyimpl_small_any_policy_int_::clone(void *const *src, void **dest) {
    *dest = *src;
}
void cvflann_anyimpl_small_any_policy_int_::move(void *const *src, void **dest) {
    *dest = *src;
}
void *cvflann_anyimpl_small_any_policy_int_::get_value(void **src) {
    return reinterpret_cast<void *>(src);
}
const void *cvflann_anyimpl_small_any_policy_int_::get_value(void *const *src) {
    return reinterpret_cast<const void *>(src);
}
void cvflann_anyimpl_small_any_policy_int_::print(std___1_ostream &out, void *const *src) {
    out << *reinterpret_cast<const int *>(src);
}
struct cvflann_anyimpl_small_any_policy_unsigned_int_;
struct cvflann_anyimpl_small_any_policy_long_;
struct cvflann_anyimpl_small_any_policy_unsigned_long_;
struct  cvflann_anyimpl_small_any_policy_float_ final  : cvflann_anyimpl_typed_base_any_policy_float_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **__p1) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_small_any_policy_float_::static_delete(void **__p1) {
}
void cvflann_anyimpl_small_any_policy_float_::copy_from_value(const void *src, void **dest) {
    new (dest) float(*reinterpret_cast<const float *>(src));
}
void cvflann_anyimpl_small_any_policy_float_::clone(void *const *src, void **dest) {
    *dest = *src;
}
void cvflann_anyimpl_small_any_policy_float_::move(void *const *src, void **dest) {
    *dest = *src;
}
void *cvflann_anyimpl_small_any_policy_float_::get_value(void **src) {
    return reinterpret_cast<void *>(src);
}
const void *cvflann_anyimpl_small_any_policy_float_::get_value(void *const *src) {
    return reinterpret_cast<const void *>(src);
}
void cvflann_anyimpl_small_any_policy_float_::print(std___1_ostream &out, void *const *src) {
    out << *reinterpret_cast<const float *>(src);
}
struct  cvflann_anyimpl_small_any_policy_bool_ final  : cvflann_anyimpl_typed_base_any_policy_bool_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **__p1) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_small_any_policy_bool_::static_delete(void **__p1) {
}
void cvflann_anyimpl_small_any_policy_bool_::copy_from_value(const void *src, void **dest) {
    new (dest) bool(*reinterpret_cast<const bool *>(src));
}
void cvflann_anyimpl_small_any_policy_bool_::clone(void *const *src, void **dest) {
    *dest = *src;
}
void cvflann_anyimpl_small_any_policy_bool_::move(void *const *src, void **dest) {
    *dest = *src;
}
void *cvflann_anyimpl_small_any_policy_bool_::get_value(void **src) {
    return reinterpret_cast<void *>(src);
}
const void *cvflann_anyimpl_small_any_policy_bool_::get_value(void *const *src) {
    return reinterpret_cast<const void *>(src);
}
void cvflann_anyimpl_small_any_policy_bool_::print(std___1_ostream &out, void *const *src) {
    out << *reinterpret_cast<const bool *>(src);
}
struct  cvflann_anyimpl_small_any_policy_const_char___ final  : cvflann_anyimpl_typed_base_any_policy_const_char___ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **__p1) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_small_any_policy_const_char___::static_delete(void **__p1) {
}
void cvflann_anyimpl_small_any_policy_const_char___::copy_from_value(const void *src, void **dest) {
    new (dest) const char *(*reinterpret_cast<const char *const *>(src));
}
void cvflann_anyimpl_small_any_policy_const_char___::clone(void *const *src, void **dest) {
    *dest = *src;
}
void cvflann_anyimpl_small_any_policy_const_char___::move(void *const *src, void **dest) {
    *dest = *src;
}
void *cvflann_anyimpl_small_any_policy_const_char___::get_value(void **src) {
    return reinterpret_cast<void *>(src);
}
const void *cvflann_anyimpl_small_any_policy_const_char___::get_value(void *const *src) {
    return reinterpret_cast<const void *>(src);
}
void cvflann_anyimpl_small_any_policy_const_char___::print(std___1_ostream &out, void *const *src) {
    out << *reinterpret_cast<const char *const *>(src);
}
struct cvflann_anyimpl_big_any_policy {
};
struct  cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_ final  : cvflann_anyimpl_typed_base_any_policy_cvflann__flann_centers_init_t_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **x) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::static_delete(void **x) {
    if (*x) {
        delete (*reinterpret_cast<cvflann_flann_centers_init_t **>(x));
    }
    *x = __null;
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::copy_from_value(const void *src, void **dest) {
    *dest = new cvflann_flann_centers_init_t(*reinterpret_cast<const cvflann_flann_centers_init_t *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::clone(void *const *src, void **dest) {
    *dest = new cvflann_flann_centers_init_t(**reinterpret_cast<cvflann_flann_centers_init_t *const *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::move(void *const *src, void **dest) {
    (*reinterpret_cast<cvflann_flann_centers_init_t **>(dest));
    **reinterpret_cast<cvflann_flann_centers_init_t **>(dest) = **reinterpret_cast<cvflann_flann_centers_init_t *const *>(src);
}
void *cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::get_value(void **src) {
    return *src;
}
const void *cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::get_value(void *const *src) {
    return *src;
}
struct  cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_ final  : cvflann_anyimpl_typed_base_any_policy_cvflann__flann_algorithm_t_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **x) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::static_delete(void **x) {
    if (*x) {
        delete (*reinterpret_cast<cvflann_flann_algorithm_t **>(x));
    }
    *x = __null;
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::copy_from_value(const void *src, void **dest) {
    *dest = new cvflann_flann_algorithm_t(*reinterpret_cast<const cvflann_flann_algorithm_t *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::clone(void *const *src, void **dest) {
    *dest = new cvflann_flann_algorithm_t(**reinterpret_cast<cvflann_flann_algorithm_t *const *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::move(void *const *src, void **dest) {
    (*reinterpret_cast<cvflann_flann_algorithm_t **>(dest));
    **reinterpret_cast<cvflann_flann_algorithm_t **>(dest) = **reinterpret_cast<cvflann_flann_algorithm_t *const *>(src);
}
void *cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::get_value(void **src) {
    return *src;
}
const void *cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::get_value(void *const *src) {
    return *src;
}
struct  cvflann_anyimpl_big_any_policy_std____1__string_ final  : cvflann_anyimpl_typed_base_any_policy_std____1__string_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **x) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_big_any_policy_std____1__string_::static_delete(void **x) {
    if (*x) {
        delete (*reinterpret_cast<std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ **>(x));
    }
    *x = __null;
}
void cvflann_anyimpl_big_any_policy_std____1__string_::copy_from_value(const void *src, void **dest) {
    *dest = new std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(*reinterpret_cast<const std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ *>(src));
}
void cvflann_anyimpl_big_any_policy_std____1__string_::clone(void *const *src, void **dest) {
    *dest = new std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__(**reinterpret_cast<std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ *const *>(src));
}
void cvflann_anyimpl_big_any_policy_std____1__string_::move(void *const *src, void **dest) {
    (*reinterpret_cast<std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ **>(dest))->~std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__();
    **reinterpret_cast<std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ **>(dest) = **reinterpret_cast<std___1_basic_string_char__std____1__char_traits_char___std____1__allocator_char__ *const *>(src);
}
void *cvflann_anyimpl_big_any_policy_std____1__string_::get_value(void **src) {
    return *src;
}
const void *cvflann_anyimpl_big_any_policy_std____1__string_::get_value(void *const *src) {
    return *src;
}
struct  cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_ final  : cvflann_anyimpl_typed_base_any_policy_cvflann__anyimpl__empty_any_ {
     __attribute__((linkage("linkonce_odr"))) virtual void static_delete(void **x) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void copy_from_value(const void *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void clone(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void move(void *const *src, void **dest) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void *get_value(void **src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual const void *get_value(void *const *src) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void print(std___1_ostream &out, void *const *src) override ;
};
void cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::static_delete(void **x) {
    if (*x) {
        delete (*reinterpret_cast<cvflann_anyimpl_empty_any **>(x));
    }
    *x = __null;
}
void cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::copy_from_value(const void *src, void **dest) {
    *dest = new cvflann_anyimpl_empty_any(*reinterpret_cast<const cvflann_anyimpl_empty_any *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::clone(void *const *src, void **dest) {
    *dest = new cvflann_anyimpl_empty_any(**reinterpret_cast<cvflann_anyimpl_empty_any *const *>(src));
}
void cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::move(void *const *src, void **dest) {
    (*reinterpret_cast<cvflann_anyimpl_empty_any **>(dest))->~cvflann_anyimpl_empty_any();
    **reinterpret_cast<cvflann_anyimpl_empty_any **>(dest) = **reinterpret_cast<cvflann_anyimpl_empty_any *const *>(src);
}
void *cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::get_value(void **src) {
    return *src;
}
const void *cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::get_value(void *const *src) {
    return *src;
}
void cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_::print(std___1_ostream &out, void *const *src) {
    out << *reinterpret_cast<const cvflann_anyimpl_empty_any *>(*src);
}
 __attribute__((linkage("linkonce_odr"))) inline void cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_::print(std___1_ostream &out, void *const *src)  {
    out << int(*reinterpret_cast<const cvflann_flann_centers_init_t *>(*src));
}
 __attribute__((linkage("linkonce_odr"))) inline void cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_::print(std___1_ostream &out, void *const *src)  {
    out << int(*reinterpret_cast<const cvflann_flann_algorithm_t *>(*src));
}
 __attribute__((linkage("linkonce_odr"))) inline void cvflann_anyimpl_big_any_policy_std____1__string_::print(std___1_ostream &out, void *const *src)  {
    out << (*reinterpret_cast<const cv_String *>(*src)).c_str();
}
struct cvflann_anyimpl_choose_policy {
};
struct cvflann_anyimpl_choose_policy_cvflann__anyimpl__empty_any_ {
};
struct cvflann_anyimpl_choose_policy_const_char___ {
};
struct cvflann_anyimpl_choose_policy_cvflann__flann_algorithm_t_ {
};
struct cvflann_anyimpl_choose_policy_cvflann__flann_centers_init_t_ {
};
struct cvflann_anyimpl_choose_policy_std____1__string_ {
};
struct cvflann_anyimpl_choose_policy_int_ {
};
struct cvflann_anyimpl_choose_policy_float_ {
};
struct cvflann_anyimpl_choose_policy_bool_ {
};
class cvflann_anyimpl_SinglePolicy {
};
class cvflann_anyimpl_SinglePolicy_cvflann__anyimpl__empty_any_ {
public:
    static cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_const_char___ {
public:
    static cvflann_anyimpl_small_any_policy_const_char___ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_int_ {
public:
    static cvflann_anyimpl_small_any_policy_int_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_float_ {
public:
    static cvflann_anyimpl_small_any_policy_float_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_bool_ {
public:
    static cvflann_anyimpl_small_any_policy_bool_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_cvflann__flann_algorithm_t_ {
public:
    static cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_cvflann__flann_centers_init_t_ {
public:
    static cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_ policy __attribute__((linkage("linkonce_odr"))) ;
};
class cvflann_anyimpl_SinglePolicy_std____1__string_ {
public:
    static cvflann_anyimpl_big_any_policy_std____1__string_ policy __attribute__((linkage("linkonce_odr"))) ;
};
cvflann_anyimpl_big_any_policy_cvflann__anyimpl__empty_any_ cvflann_anyimpl_SinglePolicy_cvflann__anyimpl__empty_any_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_small_any_policy_const_char___ cvflann_anyimpl_SinglePolicy_const_char___::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_small_any_policy_int_ cvflann_anyimpl_SinglePolicy_int_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_small_any_policy_float_ cvflann_anyimpl_SinglePolicy_float_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_small_any_policy_bool_ cvflann_anyimpl_SinglePolicy_bool_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_big_any_policy_cvflann__flann_algorithm_t_ cvflann_anyimpl_SinglePolicy_cvflann__flann_algorithm_t_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_big_any_policy_cvflann__flann_centers_init_t_ cvflann_anyimpl_SinglePolicy_cvflann__flann_centers_init_t_::policy __attribute__((linkage("linkonce_odr"))) ;

cvflann_anyimpl_big_any_policy_std____1__string_ cvflann_anyimpl_SinglePolicy_std____1__string_::policy __attribute__((linkage("linkonce_odr"))) ;

class std___1_multiset;
class std___1_set7 {
};
class std___1_set8;
class std___1_set9;
class std___1_set10;
class std___1_set11;
class std___1_set12;
class std___1_set13;
class std___1_multiset1 {
};
struct std___1___hash_value_type;
struct __attribute__((standalone_debug))  std___1___hash_value_type_unsigned_int__std____1__vector_unsigned_int__  {
    std___1_pair_const_unsigned_int__std____1__vector_unsigned_int__ __cc;
};
std___1_pair_const_int__g2o__HyperGraph__Vertex___ &std___1___hash_value_type_int__g2o__HyperGraph__Vertex___::__get_value() {
    return this->__cc;
}
struct std___1___hash_node_base {
};
std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______::__upcast() noexcept {
    return static_cast<std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *>(std___1_pointer_traits_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________::pointer_to(*this));
}
struct std___1___hash_node {
};
struct __attribute__((standalone_debug))  std___1___hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___  : public std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
    size_t __hash_;
    std___1___hash_value_type_unsigned_int__std____1__vector_unsigned_int__ __value_;
};
class std___1___hash_table;
class std___1___hash_table_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true___std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true___std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____ {
public:
    std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___________ __bucket_list_;
    std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_____ __p1_;
    std___1___compressed_pair_unsigned_long__std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true__ __p2_;
    std___1___compressed_pair_float__std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true__ __p3_;
};
class std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____ {
public:
    std___1_unique_ptr_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____________std____1____bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___________ __bucket_list_;
    std___1___compressed_pair_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void________std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____ __p1_;
    std___1___compressed_pair_unsigned_long__std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true__ __p2_;
    std___1___compressed_pair_float__std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true__ __p3_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__node_alloc() noexcept ;
     __attribute__((linkage("linkonce_odr"))) ~std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____() noexcept ;
     __attribute__((linkage("linkonce_odr"))) void __deallocate_node(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *__np) noexcept ;
};
std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____::__node_alloc() noexcept {
    return this->__p1_.second();
}
std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____::~std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____() noexcept {
    this->__deallocate_node(this->__p1_.first().__next_);
}
struct std___1___hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____ {
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) static std___1_pair_const_int__g2o__HyperGraph__Vertex___ *__get_ptr(std___1___hash_value_type_int__g2o__HyperGraph__Vertex___ &__n) ;
};
void std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____::__deallocate_node(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *__np) noexcept {
    std___1_allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ &__na = this->__node_alloc();
    while (__np != nullptr)
        {
            std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ *__next = __np->__next_;
            std___1___hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ *__real_np = __np->__upcast();
            std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::destroy_std____1__pair_const_int__g2o__HyperGraph__Vertex_____void__void_(__na, std___1___hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____::__get_ptr(__real_np->__value_));
            std___1_allocator_traits_std____1__allocator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_____::deallocate(__na, __real_np, 1);
            __np = __next;
        }
}
class std___1___hash_iterator;
class std___1___hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
public:
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ *__node_;
};
class std___1___hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______;
class std___1___hash_const_iterator;
class std___1___hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ {
public:
    std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ *__node_;
};
class std___1___hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______;
class std___1___hash_map_iterator;
class  std___1___hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______  {
public:
    std___1___hash_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ __i_;
};
class std___1___hash_map_iterator_std____1____hash_local_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______;
class std___1___hash_map_iterator_std____1____hash_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
class std___1___hash_map_iterator_std____1____hash_local_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
class std___1___hash_map_const_iterator;
class  std___1___hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______  {
public:
    std___1___hash_const_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void______ __i_;
};
class std___1___hash_map_const_iterator_std____1____hash_const_local_iterator_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______;
class std___1___hash_map_const_iterator_std____1____hash_const_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
class std___1___hash_map_const_iterator_std____1____hash_const_local_iterator_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______;
struct std___1___hash_key_value_types {
};
struct std___1___hash_key_value_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___ {
};
std___1_pair_const_int__g2o__HyperGraph__Vertex___ *std___1___hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____::__get_ptr(std___1___hash_value_type_int__g2o__HyperGraph__Vertex___ &__n) {
    return std___1_addressof_std____1__pair_const_int__g2o__HyperGraph__Vertex____(__n.__get_value());
}
struct std___1___hash_map_pointer_types {
};
struct std___1___hash_map_pointer_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____std____1____hash_key_value_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___hash_map_pointer_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____std____1____hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______true_ {
};
struct std___1___hash_node_types;
struct std___1___hash_node_types_std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void_______std____1____hash_node_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____ : public std___1___hash_key_value_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int___, std___1___hash_map_pointer_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void____std____1____hash_key_value_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int_____true_ {
};
struct std___1___hash_node_types_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_______std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____ : public std___1___hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex____, std___1___hash_map_pointer_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void____std____1____hash_key_value_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex______true_ {
};
struct std___1___make_hash_node_types {
};
struct std___1___make_hash_node_types_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____void___ {
};
struct std___1___make_hash_node_types_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void___ {
};
class std___1___hash_iterator1 {
};
class std___1___hash_table1;
class std___1___hash_const_iterator1;
class std___1___hash_map_iterator1;
class std___1_unordered_map;
class std___1___hash_const_iterator2 {
};
class std___1___hash_table2;
class std___1___hash_map_const_iterator1;
class std___1_unordered_map1;
class std___1___bucket_list_deallocator {
};
size_t &std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::size() noexcept {
    return this->__data_.first();
}
std___1_allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void_________ &std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::__alloc() noexcept {
    return this->__data_.second();
}
void std___1___bucket_list_deallocator_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::operator()(std___1___hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void______ **__p) noexcept {
    std___1_allocator_traits_std____1__allocator_std____1____hash_node_base_std____1____hash_node_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____void__________::deallocate(this->__alloc(), __p, this->size());
}
class std___1___hash_table3 {
};
class std___1_unordered_map2;
class std___1_unordered_map3;
class std___1___unordered_map_hasher {
};
class std___1___unordered_map_equal {
};
struct std___1___hash_value_type1 {
};
class std___1___hash_map_iterator2 {
};
class std___1_unordered_map4;
class std___1___hash_const_iterator3;
class std___1___hash_map_const_iterator2;
class std___1___hash_map_const_iterator3 {
};
class std___1_unordered_map5;
class std___1___hash_const_iterator4;
class std___1_unordered_multimap;
class std___1_unordered_map6 {
};
class  std___1_unordered_map_unsigned_int__std____1__vector_unsigned_int___std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___std____1__allocator_std____1__pair_const_unsigned_int__std____1__vector_unsigned_int____  {
public:
    std___1___hash_table_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1____unordered_map_hasher_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__hash_unsigned_int___std____1__equal_to_unsigned_int___true___std____1____unordered_map_equal_unsigned_int__std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____std____1__equal_to_unsigned_int___std____1__hash_unsigned_int___true___std____1__allocator_std____1____hash_value_type_unsigned_int__std____1__vector_unsigned_int____ __table_;
};
class  std___1_unordered_map_int__g2o__HyperGraph__Vertex____std____1__hash_int___std____1__equal_to_int___std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____  {
public:
    std___1___hash_table_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1____unordered_map_hasher_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__hash_int___std____1__equal_to_int___true___std____1____unordered_map_equal_int__std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____std____1__equal_to_int___std____1__hash_int___true___std____1__allocator_std____1____hash_value_type_int__g2o__HyperGraph__Vertex_____ __table_;
     __attribute__((exclude_from_explicit_instantiation)) __attribute__((linkage("linkonce_odr"))) ~std___1_unordered_map_int__g2o__HyperGraph__Vertex____std____1__hash_int___std____1__equal_to_int___std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____() noexcept ;
};
std___1_unordered_map_int__g2o__HyperGraph__Vertex____std____1__hash_int___std____1__equal_to_int___std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____::~std___1_unordered_map_int__g2o__HyperGraph__Vertex____std____1__hash_int___std____1__equal_to_int___std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____() noexcept {
}
class std___1_unordered_map7;
class std___1_unordered_map8;
class std___1_unordered_multimap1 {
};
struct CvCapture;
struct CvVideoWriter;
class cv_IVideoCapture;

class cv_IVideoWriter;

void cv_remap(cv_InputArray src, cv_OutputArray dst, cv_InputArray map1, cv_InputArray map2, int interpolation, int borderMode, const cv_Scalar &borderValue);

class cv_ml_ParamGrid {
public:
    double minVal;
    double maxVal;
    double logStep;
};

class cv_BaseCascadeClassifier_MaskGenerator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_BaseCascadeClassifier_MaskGenerator() noexcept ;
    virtual cv_Mat generateMask(const cv_Mat &src) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual void initializeMask(const cv_Mat &__p1) ;
};

class cv_BaseCascadeClassifier : public cv_Algorithm {
public:
    virtual ~cv_BaseCascadeClassifier() noexcept;
     virtual bool empty() const override  = 0;
    virtual bool load(const cv_String &filename) = 0;
    virtual void detectMultiScale(cv_InputArray image, std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ &objects, double scaleFactor, int minNeighbors, int flags, cv_Size minSize, cv_Size maxSize) = 0;
    virtual void detectMultiScale(cv_InputArray image, std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ &objects, std___1_vector_int__std____1__allocator_int__ &numDetections, double scaleFactor, int minNeighbors, int flags, cv_Size minSize, cv_Size maxSize) = 0;
    virtual void detectMultiScale(cv_InputArray image, std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ &objects, std___1_vector_int__std____1__allocator_int__ &rejectLevels, std___1_vector_double__std____1__allocator_double__ &levelWeights, double scaleFactor, int minNeighbors, int flags, cv_Size minSize, cv_Size maxSize, bool outputRejectLevels) = 0;
    virtual bool isOldFormatCascade() const = 0;
    virtual cv_Size getOriginalWindowSize() const = 0;
    virtual int getFeatureType() const = 0;
    virtual void *getOldCascade() = 0;
    virtual void setMaskGenerator(const cv_Ptr_cv__BaseCascadeClassifier__MaskGenerator_ &maskGenerator) = 0;
    virtual cv_Ptr_cv__BaseCascadeClassifier__MaskGenerator_ getMaskGenerator() = 0;
};

cv_BaseCascadeClassifier_MaskGenerator::~cv_BaseCascadeClassifier_MaskGenerator() noexcept {
}
void cv_BaseCascadeClassifier_MaskGenerator::initializeMask(const cv_Mat &__p1) {
}
struct cv_QRCodeDetector_Impl;

class cv_QRCodeDetector {
public:
    cv_Ptr_cv__QRCodeDetector__Impl_ p;
};

struct cv_DetectionBasedTracker_TrackedObject {
    std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ lastPositions;
    int numDetectedFrames;
    int numFramesNotDetected;
    int id;
};

struct cv_DetectionBasedTracker_InnerParameters {
    int numLastPositionsToTrack;
    int numStepsToWaitBeforeFirstShow;
    int numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown;
    int numStepsToShowWithoutDetecting;
    float coeffTrackingWindowSize;
    float coeffObjectSizeToTrack;
    float coeffObjectSpeedUsingInPrediction;
};

class cv_DetectionBasedTracker_SeparateDetectionWork;

struct cv_DetectionBasedTracker_Parameters {
    int maxTrackLifetime;
    int minDetectionPeriod;
};

class cv_DetectionBasedTracker {
public:
    virtual ~cv_DetectionBasedTracker();
    virtual bool run();
    virtual void stop();
    virtual void resetTracking();
    virtual void process(const cv_Mat &imageGray);
    virtual void getObjects(std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ &result) const;
    virtual void getObjects(std___1_vector_std____1__pair_cv__Rect__int___int___std____1__allocator_std____1__pair_cv__Rect__int___int___ &result) const;
    enum ObjectStatus {
        DETECTED_NOT_SHOWN_YET,
        DETECTED,
        DETECTED_TEMPORARY_LOST,
        WRONG_OBJECT
    };
    virtual void getObjects(std___1_vector_cv__DetectionBasedTracker__ExtObject__std____1__allocator_cv__DetectionBasedTracker__ExtObject__ &result) const;
    virtual int addObject(const cv_Rect &location);
    cv_Ptr_cv__DetectionBasedTracker__SeparateDetectionWork_ separateDetectionWork;
    cv_DetectionBasedTracker_Parameters parameters;
    cv_DetectionBasedTracker_InnerParameters innerParameters;
    int numTrackedSteps;
    std___1_vector_cv__DetectionBasedTracker__TrackedObject__std____1__allocator_cv__DetectionBasedTracker__TrackedObject__ trackedObjects;
    std___1_vector_float__std____1__allocator_float__ weightsPositionsSmoothing;
    std___1_vector_float__std____1__allocator_float__ weightsSizesSmoothing;
    cv_Ptr_cv__DetectionBasedTracker__IDetector_ cascadeForTracking;
};

struct cv_DetectionBasedTracker_ExtObject {
    int id;
    cv_Rect location;
    cv_DetectionBasedTracker::ObjectStatus status;
};

class cv_DetectionBasedTracker_IDetector {
public:
    virtual void detect(const cv_Mat &image, std___1_vector_cv__Rect__int___std____1__allocator_cv__Rect__int___ &objects) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_DetectionBasedTracker_IDetector() noexcept ;
    cv_Size minObjSize;
    cv_Size maxObjSize;
    int minNeighbours;
    float scaleFactor;
};

cv_DetectionBasedTracker_IDetector::~cv_DetectionBasedTracker_IDetector() noexcept {
}
class cv_cuda_GpuMat_Allocator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_cuda_GpuMat_Allocator() noexcept ;
    virtual bool allocate(cv_cuda_GpuMat *mat, int rows, int cols, size_t elemSize) = 0;
    virtual void free(cv_cuda_GpuMat *mat) = 0;
};

class cv_cuda_GpuMat {
public:
    int flags;
    int rows;
    int cols;
    size_t step;
    uchar *data;
    int *refcount;
    uchar *datastart;
    const uchar *dataend;
    cv_cuda_GpuMat_Allocator *allocator;
};

cv_cuda_GpuMat_Allocator::~cv_cuda_GpuMat_Allocator() noexcept {
}
class cv_cuda_Stream_Impl;

class cv_cuda_Stream {
public:
    cv_Ptr_cv__cuda__Stream__Impl_ impl_;
};

class cv_cuda_Event_Impl;

class cv_cuda_Event {
public:
    cv_Ptr_cv__cuda__Event__Impl_ impl_;
};

class cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_RotationWarper() noexcept ;
    virtual cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) ;
    virtual cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray xmap, cv_OutputArray ymap) = 0;
    virtual cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) = 0;
    virtual void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) = 0;
    virtual cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual float getScale() const ;
     __attribute__((linkage("linkonce_odr"))) virtual void setScale(float __p1) ;
};

cv_detail_RotationWarper::~cv_detail_RotationWarper() noexcept {
}
cv_Point2f cv_detail_RotationWarper::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    (void)pt;
    (void)K;
    (void)R;
    cv_error(StsNotImplemented, "", "warpPointBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers.hpp", 84);
}
float cv_detail_RotationWarper::getScale() const {
    return 1.F;
}
void cv_detail_RotationWarper::setScale(float __p1) {
}
struct cv_detail_ProjectorBase {
    void setCameraParams(cv_InputArray K, cv_InputArray R, cv_InputArray T);
    float scale;
    float k[9];
    float rinv[9];
    float r_kinv[9];
    float k_rinv[9];
    float t[3];
};

class cv_detail_RotationWarperBase {
};
struct cv_detail_PlaneProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__PlaneProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_PlaneProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__PlaneProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_SphericalProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__SphericalProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_SphericalProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__SphericalProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_CylindricalProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
     __attribute__((linkage("linkonce_odr"))) void detectResultRoiByBorder(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_CylindricalProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
void cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::detectResultRoiByBorder(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (float x = 0; x < src_size.width; ++x) {
        this->projector_.mapForward(static_cast<float>(x), 0, u, v);
        tl_uf = (std___1_min_float_)(tl_uf, u);
        tl_vf = (std___1_min_float_)(tl_vf, v);
        br_uf = (std___1_max_float_)(br_uf, u);
        br_vf = (std___1_max_float_)(br_vf, v);
        this->projector_.mapForward(static_cast<float>(x), static_cast<float>(src_size.height - 1), u, v);
        tl_uf = (std___1_min_float_)(tl_uf, u);
        tl_vf = (std___1_min_float_)(tl_vf, v);
        br_uf = (std___1_max_float_)(br_uf, u);
        br_vf = (std___1_max_float_)(br_vf, v);
    }
    for (int y = 0; y < src_size.height; ++y) {
        this->projector_.mapForward(0, static_cast<float>(y), u, v);
        tl_uf = (std___1_min_float_)(tl_uf, u);
        tl_vf = (std___1_min_float_)(tl_vf, v);
        br_uf = (std___1_max_float_)(br_uf, u);
        br_vf = (std___1_max_float_)(br_vf, v);
        this->projector_.mapForward(static_cast<float>(src_size.width - 1), static_cast<float>(y), u, v);
        tl_uf = (std___1_min_float_)(tl_uf, u);
        tl_vf = (std___1_min_float_)(tl_vf, v);
        br_uf = (std___1_max_float_)(br_uf, u);
        br_vf = (std___1_max_float_)(br_vf, v);
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_FisheyeProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_FisheyeProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_StereographicProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__StereographicProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_StereographicProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__StereographicProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_CompressedRectilinearProjector : cv_detail_ProjectorBase {
    float a;
    float b;
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_CompressedRectilinearProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_CompressedRectilinearPortraitProjector : cv_detail_ProjectorBase {
    float a;
    float b;
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_CompressedRectilinearPortraitProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_PaniniProjector : cv_detail_ProjectorBase {
    float a;
    float b;
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__PaniniProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_PaniniProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__PaniniProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_PaniniPortraitProjector : cv_detail_ProjectorBase {
    float a;
    float b;
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_PaniniPortraitProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_MercatorProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__MercatorProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_MercatorProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__MercatorProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
struct cv_detail_TransverseMercatorProjector : cv_detail_ProjectorBase {
    void mapForward(float x, float y, float &u, float &v);
    void mapBackward(float u, float v, float &x, float &y);
};

class cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_ : public cv_detail_RotationWarper {
public:
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     __attribute__((linkage("linkonce_odr"))) float getScale() const override ;
     __attribute__((linkage("linkonce_odr"))) void setScale(float val) override ;
     __attribute__((linkage("linkonce_odr"))) virtual void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) ;
    cv_detail_TransverseMercatorProjector projector_;
};
cv_Point2f cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f uv;
    this->projector_.mapForward(pt.x, pt.y, uv.x, uv.y);
    return uv;
}
cv_Point2f cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point2f xy;
    this->projector_.mapBackward(pt.x, pt.y, xy.x, xy.y);
    return xy;
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray _xmap, cv_OutputArray _ymap) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    _xmap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    _ymap.create(dst_br.y - dst_tl.y + 1, dst_br.x - dst_tl.x + 1, 5, -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_Mat xmap = _xmap.getMat(-1), ymap = _ymap.getMat(-1);
    float x, y;
    for (int v = dst_tl.y; v <= dst_br.y; ++v) {
        for (int u = dst_tl.x; u <= dst_br.x; ++u) {
            this->projector_.mapBackward(static_cast<float>(u), static_cast<float>(v), x, y);
            xmap.at_float_(v - dst_tl.y, u - dst_tl.x) = x;
            ymap.at_float_(v - dst_tl.y, u - dst_tl.x) = y;
        }
    }
    return cv_Rect(dst_tl, dst_br);
}
cv_Point cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) {
    cv_UMat xmap(USAGE_DEFAULT), ymap(USAGE_DEFAULT);
    cv_Rect dst_roi = this->buildMaps(src.size(-1), K, R, xmap, ymap);
    dst.create(dst_roi.height + 1, dst_roi.width + 1, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
    return dst_roi.tl();
}
void cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::warpBackward(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_Size dst_size, cv_OutputArray dst) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point src_tl, src_br;
    this->detectResultRoi(dst_size, src_tl, src_br);
    cv_Size size = src.size(-1);
    do {
        if (!!(src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height)) {
        } else {
            cv_error(StsAssert, "src_br.x - src_tl.x + 1 == size.width && src_br.y - src_tl.y + 1 == size.height", "warpBackward", "/usr/include/opencv4/opencv2/stitching/detail/warpers_inl.hpp", 125);
        }
    } while (0);
    cv_Mat xmap(dst_size, 5);
    cv_Mat ymap(dst_size, 5);
    float u, v;
    for (int y = 0; y < dst_size.height; ++y) {
        for (int x = 0; x < dst_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            xmap.at_float_(y, x) = u - src_tl.x;
            ymap.at_float_(y, x) = v - src_tl.y;
        }
    }
    dst.create(dst_size, src.type(-1), -1, false, static_cast<cv__OutputArray::DepthMask>(0));
    cv_remap(src, dst, xmap, ymap, interp_mode, border_mode, cv_Scalar());
}
cv_Rect cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) {
    this->projector_.setCameraParams(K, R, cv_Mat::zeros(3, 1, 5));
    cv_Point dst_tl, dst_br;
    this->detectResultRoi(src_size, dst_tl, dst_br);
    return cv_Rect(dst_tl, cv_Point(dst_br.x + 1, dst_br.y + 1));
}
float cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::getScale() const {
    return this->projector_.scale;
}
void cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::setScale(float val) {
    this->projector_.scale = val;
}
void cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    float tl_uf = (std___1_numeric_limits_float_::max)();
    float tl_vf = (std___1_numeric_limits_float_::max)();
    float br_uf = -(std___1_numeric_limits_float_::max)();
    float br_vf = -(std___1_numeric_limits_float_::max)();
    float u, v;
    for (int y = 0; y < src_size.height; ++y) {
        for (int x = 0; x < src_size.width; ++x) {
            this->projector_.mapForward(static_cast<float>(x), static_cast<float>(y), u, v);
            tl_uf = (std___1_min_float_)(tl_uf, u);
            tl_vf = (std___1_min_float_)(tl_vf, v);
            br_uf = (std___1_max_float_)(br_uf, u);
            br_vf = (std___1_max_float_)(br_vf, v);
        }
    }
    dst_tl.x = static_cast<int>(tl_uf);
    dst_tl.y = static_cast<int>(tl_vf);
    dst_br.x = static_cast<int>(br_uf);
    dst_br.y = static_cast<int>(br_vf);
}
class cv_detail_PlaneWarper : public cv_detail_RotationWarperBase_cv__detail__PlaneProjector_ {
public:
     cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
     cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray R) override ;
    virtual cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_InputArray T, cv_OutputArray xmap, cv_OutputArray ymap);
     cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray xmap, cv_OutputArray ymap) override ;
     cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
    virtual cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, cv_InputArray T, int interp_mode, int border_mode, cv_OutputArray dst);
     cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray R) override ;
     void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) override ;
};

class cv_detail_AffineWarper : public cv_detail_PlaneWarper {
public:
     cv_Point2f warpPoint(const cv_Point2f &pt, cv_InputArray K, cv_InputArray H) override ;
     cv_Point2f warpPointBackward(const cv_Point2f &pt, cv_InputArray K, cv_InputArray H) override ;
     cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray H, cv_OutputArray xmap, cv_OutputArray ymap) override ;
     cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray H, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     cv_Rect warpRoi(cv_Size src_size, cv_InputArray K, cv_InputArray H) override ;
};

class cv_detail_SphericalWarper : public cv_detail_RotationWarperBase_cv__detail__SphericalProjector_ {
public:
     cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray xmap, cv_OutputArray ymap) override ;
     cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) override ;
};

class cv_detail_CylindricalWarper : public cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_ {
public:
     cv_Rect buildMaps(cv_Size src_size, cv_InputArray K, cv_InputArray R, cv_OutputArray xmap, cv_OutputArray ymap) override ;
     cv_Point warp(cv_InputArray src, cv_InputArray K, cv_InputArray R, int interp_mode, int border_mode, cv_OutputArray dst) override ;
     __attribute__((linkage("linkonce_odr"))) void detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) override ;
};

void cv_detail_CylindricalWarper::detectResultRoi(cv_Size src_size, cv_Point &dst_tl, cv_Point &dst_br) {
    this->cv_detail_RotationWarperBase_cv__detail__CylindricalProjector_::detectResultRoiByBorder(src_size, dst_tl, dst_br);
}
class cv_detail_FisheyeWarper : public cv_detail_RotationWarperBase_cv__detail__FisheyeProjector_ {
public:
};

class cv_detail_StereographicWarper : public cv_detail_RotationWarperBase_cv__detail__StereographicProjector_ {
public:
};

class cv_detail_CompressedRectilinearWarper : public cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearProjector_ {
public:
};

class cv_detail_CompressedRectilinearPortraitWarper : public cv_detail_RotationWarperBase_cv__detail__CompressedRectilinearPortraitProjector_ {
public:
};

class cv_detail_PaniniWarper : public cv_detail_RotationWarperBase_cv__detail__PaniniProjector_ {
public:
};

class cv_detail_PaniniPortraitWarper : public cv_detail_RotationWarperBase_cv__detail__PaniniPortraitProjector_ {
public:
};

class cv_detail_MercatorWarper : public cv_detail_RotationWarperBase_cv__detail__MercatorProjector_ {
public:
};

class cv_detail_TransverseMercatorWarper : public cv_detail_RotationWarperBase_cv__detail__TransverseMercatorProjector_ {
public:
};

 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PlaneProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    x_ = this->t[0] + x_ / z_ * (1 - this->t[2]);
    y_ = this->t[1] + y_ / z_ * (1 - this->t[2]);
    u = this->scale * x_;
    v = this->scale * y_;
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PlaneProjector::mapBackward(float u, float v, float &x, float &y)  {
    u = u / this->scale - this->t[0];
    v = v / this->scale - this->t[1];
    float z;
    x = this->k_rinv[0] * u + this->k_rinv[1] * v + this->k_rinv[2] * (1 - this->t[2]);
    y = this->k_rinv[3] * u + this->k_rinv[4] * v + this->k_rinv[5] * (1 - this->t[2]);
    z = this->k_rinv[6] * u + this->k_rinv[7] * v + this->k_rinv[8] * (1 - this->t[2]);
    x /= z;
    y /= z;
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_SphericalProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    u = this->scale * atan2f(x_, z_);
    float w = y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_);
    v = this->scale * (static_cast<float>(3.1415926535897931) - acosf(w == w ? w : 0));
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_SphericalProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float sinv = sinf(static_cast<float>(3.1415926535897931) - v);
    float x_ = sinv * sinf(u);
    float y_ = cosf(static_cast<float>(3.1415926535897931) - v);
    float z_ = sinv * cosf(u);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CylindricalProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    u = this->scale * atan2f(x_, z_);
    v = this->scale * y_ / sqrtf(x_ * x_ + z_ * z_);
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CylindricalProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float x_ = sinf(u);
    float y_ = v;
    float z_ = cosf(u);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_FisheyeProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = (float)3.1415926535897931 - acosf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    u = this->scale * v_ * cosf(u_);
    v = this->scale * v_ * sinf(u_);
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_FisheyeProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float u_ = atan2f(v, u);
    float v_ = sqrtf(u * u + v * v);
    float sinv = sinf((float)3.1415926535897931 - v_);
    float x_ = sinv * sinf(u_);
    float y_ = cosf((float)3.1415926535897931 - v_);
    float z_ = sinv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_StereographicProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = (float)3.1415926535897931 - acosf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    float r = sinf(v_) / (1 - cosf(v_));
    u = this->scale * r * cos(u_);
    v = this->scale * r * sin(u_);
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_StereographicProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float u_ = atan2f(v, u);
    float r = sqrtf(u * u + v * v);
    float v_ = 2 * atanf(1.F / r);
    float sinv = sinf((float)3.1415926535897931 - v_);
    float x_ = sinv * sinf(u_);
    float y_ = cosf((float)3.1415926535897931 - v_);
    float z_ = sinv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CompressedRectilinearProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    u = this->scale * this->a * tanf(u_ / this->a);
    v = this->scale * this->b * tanf(v_) / cosf(u_);
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CompressedRectilinearProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float aatg = this->a * atanf(u / this->a);
    float u_ = aatg;
    float v_ = atanf(v * cosf(aatg) / this->b);
    float cosv = cosf(v_);
    float x_ = cosv * sinf(u_);
    float y_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CompressedRectilinearPortraitProjector::mapForward(float x, float y, float &u, float &v)  {
    float y_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float x_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    u = -this->scale * this->a * tanf(u_ / this->a);
    v = this->scale * this->b * tanf(v_) / cosf(u_);
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_CompressedRectilinearPortraitProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= -this->scale;
    v /= this->scale;
    float aatg = this->a * atanf(u / this->a);
    float u_ = aatg;
    float v_ = atanf(v * cosf(aatg) / this->b);
    float cosv = cosf(v_);
    float y_ = cosv * sinf(u_);
    float x_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PaniniProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    float tg = this->a * tanf(u_ / this->a);
    u = this->scale * tg;
    float sinu = sinf(u_);
    if (fabs(sinu) < 9.9999999999999995E-8) {
        v = this->scale * this->b * tanf(v_);
    } else {
        v = this->scale * this->b * tg * tanf(v_) / sinu;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PaniniProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float lamda = this->a * atanf(u / this->a);
    float u_ = lamda;
    float v_;
    if (fabs(lamda) > 9.9999999999999995E-8) {
        v_ = atanf(v * sinf(lamda) / (this->b * this->a * tanf(lamda / this->a)));
    } else {
        v_ = atanf(v / this->b);
    }
    float cosv = cosf(v_);
    float x_ = cosv * sinf(u_);
    float y_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PaniniPortraitProjector::mapForward(float x, float y, float &u, float &v)  {
    float y_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float x_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    float tg = this->a * tanf(u_ / this->a);
    u = -this->scale * tg;
    float sinu = sinf(u_);
    if (fabs(sinu) < 9.9999999999999995E-8) {
        v = this->scale * this->b * tanf(v_);
    } else {
        v = this->scale * this->b * tg * tanf(v_) / sinu;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_PaniniPortraitProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= -this->scale;
    v /= this->scale;
    float lamda = this->a * atanf(u / this->a);
    float u_ = lamda;
    float v_;
    if (fabs(lamda) > 9.9999999999999995E-8) {
        v_ = atanf(v * sinf(lamda) / (this->b * this->a * tanf(lamda / this->a)));
    } else {
        v_ = atanf(v / this->b);
    }
    float cosv = cosf(v_);
    float y_ = cosv * sinf(u_);
    float x_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_MercatorProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    u = this->scale * u_;
    v = this->scale * logf(tanf((float)(3.1415926535897931 / 4) + v_ / 2));
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_MercatorProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float v_ = atanf(sinhf(v));
    float u_ = u;
    float cosv = cosf(v_);
    float x_ = cosv * sinf(u_);
    float y_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_TransverseMercatorProjector::mapForward(float x, float y, float &u, float &v)  {
    float x_ = this->r_kinv[0] * x + this->r_kinv[1] * y + this->r_kinv[2];
    float y_ = this->r_kinv[3] * x + this->r_kinv[4] * y + this->r_kinv[5];
    float z_ = this->r_kinv[6] * x + this->r_kinv[7] * y + this->r_kinv[8];
    float u_ = atan2f(x_, z_);
    float v_ = asinf(y_ / sqrtf(x_ * x_ + y_ * y_ + z_ * z_));
    float B = cosf(v_) * sinf(u_);
    u = this->scale / 2 * logf((1 + B) / (1 - B));
    v = this->scale * atan2f(tanf(v_), cosf(u_));
}
 __attribute__((linkage("linkonce_odr"))) inline void cv_detail_TransverseMercatorProjector::mapBackward(float u, float v, float &x, float &y)  {
    u /= this->scale;
    v /= this->scale;
    float v_ = asinf(sinf(v) / coshf(u));
    float u_ = atan2f(sinhf(u), cos(v));
    float cosv = cosf(v_);
    float x_ = cosv * sinf(u_);
    float y_ = sinf(v_);
    float z_ = cosv * cosf(u_);
    float z;
    x = this->k_rinv[0] * x_ + this->k_rinv[1] * y_ + this->k_rinv[2] * z_;
    y = this->k_rinv[3] * x_ + this->k_rinv[4] * y_ + this->k_rinv[5] * z_;
    z = this->k_rinv[6] * x_ + this->k_rinv[7] * y_ + this->k_rinv[8] * z_;
    if (z > 0) {
        x /= z;
        y /= z;
    } else {
        x = y = -1;
    }
}
class cv_WarperCreator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_WarperCreator() noexcept ;
    virtual cv_Ptr_cv__detail__RotationWarper_ create(float scale) const = 0;
};

cv_WarperCreator::~cv_WarperCreator() noexcept {
}
struct cv_detail_ImageFeatures {
    int img_idx;
    cv_Size img_size;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ keypoints;
    cv_UMat descriptors;
};

struct cv_detail_MatchesInfo {
    int src_img_idx;
    int dst_img_idx;
    std___1_vector_cv__DMatch__std____1__allocator_cv__DMatch__ matches;
    std___1_vector_unsigned_char__std____1__allocator_unsigned_char__ inliers_mask;
    int num_inliers;
    cv_Mat H;
    double confidence;
};

class cv_detail_FeaturesMatcher {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_FeaturesMatcher() noexcept ;
     __attribute__((linkage("linkonce_odr"))) virtual void collectGarbage() ;
    virtual void match(const cv_detail_ImageFeatures &features1, const cv_detail_ImageFeatures &features2, cv_detail_MatchesInfo &matches_info) = 0;
    bool is_thread_safe_;
};

cv_detail_FeaturesMatcher::~cv_detail_FeaturesMatcher() noexcept {
}
void cv_detail_FeaturesMatcher::collectGarbage() {
}
class std___1_queue;
class std___1_queue1 {
};
struct cv_detail_CameraParams {
    double focal;
    double aspect;
    double ppx;
    double ppy;
    cv_Mat R;
    cv_Mat t;
};

class cv_detail_Estimator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_Estimator() noexcept ;
    virtual bool estimate(const std___1_vector_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures__ &features, const std___1_vector_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo__ &pairwise_matches, std___1_vector_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ &cameras) = 0;
};

cv_detail_Estimator::~cv_detail_Estimator() noexcept {
}
class cv_detail_BundleAdjusterBase : public cv_detail_Estimator {
public:
     virtual bool estimate(const std___1_vector_cv__detail__ImageFeatures__std____1__allocator_cv__detail__ImageFeatures__ &features, const std___1_vector_cv__detail__MatchesInfo__std____1__allocator_cv__detail__MatchesInfo__ &pairwise_matches, std___1_vector_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ &cameras) override ;
    virtual void setUpInitialCameraParams(const std___1_vector_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ &cameras) = 0;
    virtual void obtainRefinedCameraParams(std___1_vector_cv__detail__CameraParams__std____1__allocator_cv__detail__CameraParams__ &cameras) const = 0;
    virtual void calcError(cv_Mat &err) = 0;
    virtual void calcJacobian(cv_Mat &jac) = 0;
    cv_Mat refinement_mask_;
    int num_images_;
    int total_num_matches_;
    int num_params_per_cam_;
    int num_errs_per_measurement_;
    const cv_detail_ImageFeatures *features_;
    const cv_detail_MatchesInfo *pairwise_matches_;
    double conf_thresh_;
    cv_TermCriteria term_criteria_;
    cv_Mat cam_params_;
    std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___ edges_;
};

class cv_detail_ExposureCompensator {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_ExposureCompensator() noexcept ;
    virtual void feed(const std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ &corners, const std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ &images, const std___1_vector_std____1__pair_cv__UMat__unsigned_char___std____1__allocator_std____1__pair_cv__UMat__unsigned_char___ &masks) = 0;
    virtual void apply(int index, cv_Point corner, cv_InputOutputArray image, cv_InputArray mask) = 0;
     __attribute__((linkage("linkonce_odr"))) virtual void getMatGains(std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ &__p1) ;
     __attribute__((linkage("linkonce_odr"))) virtual void setMatGains(std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ &__p1) ;
    bool updateGain;
};

cv_detail_ExposureCompensator::~cv_detail_ExposureCompensator() noexcept {
}
void cv_detail_ExposureCompensator::getMatGains(std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ &__p1) {
    cv_error(StsInternal, "", "getMatGains", "/usr/include/opencv4/opencv2/stitching/detail/exposure_compensate.hpp", 88);
}
void cv_detail_ExposureCompensator::setMatGains(std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ &__p1) {
    cv_error(StsInternal, "", "setMatGains", "/usr/include/opencv4/opencv2/stitching/detail/exposure_compensate.hpp", 89);
}
class cv_detail_SeamFinder {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_SeamFinder() noexcept ;
    virtual void find(const std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ &src, const std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ &corners, std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ &masks) = 0;
};

cv_detail_SeamFinder::~cv_detail_SeamFinder() noexcept {
}
class cv_detail_PairwiseSeamFinder : public cv_detail_SeamFinder {
public:
     virtual void find(const std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ &src, const std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ &corners, std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ &masks) override ;
    virtual void findInPair(size_t first, size_t second, cv_Rect roi) = 0;
    std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ images_;
    std___1_vector_cv__Size__int___std____1__allocator_cv__Size__int___ sizes_;
    std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ corners_;
    std___1_vector_cv__UMat__std____1__allocator_cv__UMat__ masks_;
};

class cv_detail_Blender {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~cv_detail_Blender() noexcept ;
    virtual void prepare(const std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ &corners, const std___1_vector_cv__Size__int___std____1__allocator_cv__Size__int___ &sizes);
    virtual void prepare(cv_Rect dst_roi);
    virtual void feed(cv_InputArray img, cv_InputArray mask, cv_Point tl);
    virtual void blend(cv_InputOutputArray dst, cv_InputOutputArray dst_mask);
    cv_UMat dst_;
    cv_UMat dst_mask_;
    cv_Rect dst_roi_;
};

cv_detail_Blender::~cv_detail_Blender() noexcept {
}
class ORB_SLAM2_ExtractorNode {
public:
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ vKeys;
    cv_Point2i UL;
    cv_Point2i UR;
    cv_Point2i BL;
    cv_Point2i BR;
    std___1___list_iterator_ORB_SLAM2__ExtractorNode__void___ lit;
    bool bNoMore;
};

class ORB_SLAM2_ORBextractor {
public:
    std___1_vector_cv__Mat__std____1__allocator_cv__Mat__ mvImagePyramid;
    std___1_vector_cv__Point__int___std____1__allocator_cv__Point__int___ pattern;
    int nfeatures;
    double scaleFactor;
    int nlevels;
    int iniThFAST;
    int minThFAST;
    std___1_vector_int__std____1__allocator_int__ mnFeaturesPerLevel;
    std___1_vector_int__std____1__allocator_int__ umax;
    std___1_vector_float__std____1__allocator_float__ mvScaleFactor;
    std___1_vector_float__std____1__allocator_float__ mvInvScaleFactor;
    std___1_vector_float__std____1__allocator_float__ mvLevelSigma2;
    std___1_vector_float__std____1__allocator_float__ mvInvLevelSigma2;
};

class ORB_SLAM2_MapPoint;

class ORB_SLAM2_KeyFrame;

class ORB_SLAM2_Frame {
public:
    ORB_SLAM2_ORBVocabulary *mpORBvocabulary;
    ORB_SLAM2_ORBextractor *mpORBextractorLeft;
    ORB_SLAM2_ORBextractor *mpORBextractorRight;
    double mTimeStamp;
    cv_Mat mK;
    cv_Mat mDistCoef;
    float mbf;
    float mb;
    float mThDepth;
    int N;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeys;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeysRight;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeysUn;
    std___1_vector_float__std____1__allocator_float__ mvuRight;
    std___1_vector_float__std____1__allocator_float__ mvDepth;
    DBoW2_BowVector mBowVec;
    DBoW2_FeatureVector mFeatVec;
    cv_Mat mDescriptors;
    cv_Mat mDescriptorsRight;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpMapPoints;
    std___1_vector_bool__std____1__allocator_bool__ mvbOutlier;
    std___1_vector_unsigned_long__std____1__allocator_unsigned_long__ mGrid[64][48];
    cv_Mat mTcw;
    unsigned long mnId;
    ORB_SLAM2_KeyFrame *mpReferenceKF;
    int mnScaleLevels;
    float mfScaleFactor;
    float mfLogScaleFactor;
    std___1_vector_float__std____1__allocator_float__ mvScaleFactors;
    std___1_vector_float__std____1__allocator_float__ mvInvScaleFactors;
    std___1_vector_float__std____1__allocator_float__ mvLevelSigma2;
    std___1_vector_float__std____1__allocator_float__ mvInvLevelSigma2;
    cv_Mat mRcw;
    cv_Mat mtcw;
    cv_Mat mRwc;
    cv_Mat mOw;
};

class ORB_SLAM2_MapPoint;

class ORB_SLAM2_KeyFrame;

class ORB_SLAM2_Map {
public:
    void AddKeyFrame(ORB_SLAM2_KeyFrame *pKF);
    void AddMapPoint(ORB_SLAM2_MapPoint *pMP);
    unsigned long KeyFramesInMap();
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mvpKeyFrameOrigins;
    std___1_mutex mMutexMapUpdate;
    std___1_mutex mMutexPointCreation;
    std___1_set_ORB_SLAM2__MapPoint____std____1__less_ORB_SLAM2__MapPoint_____std____1__allocator_ORB_SLAM2__MapPoint____ mspMapPoints;
    std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ mspKeyFrames;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpReferenceMapPoints;
    unsigned long mnMaxKFid;
    int mnBigChangeIdx;
    std___1_mutex mMutexMap;
};

class ORB_SLAM2_KeyFrame;

class ORB_SLAM2_Map;

class ORB_SLAM2_Frame;

class ORB_SLAM2_MapPoint {
public:
    ORB_SLAM2_MapPoint(const cv_Mat &Pos, ORB_SLAM2_KeyFrame *pRefKF, ORB_SLAM2_Map *pMap);
    std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ GetObservations();
    int Observations();
    void AddObservation(ORB_SLAM2_KeyFrame *pKF, size_t idx);
    bool IsInKeyFrame(ORB_SLAM2_KeyFrame *pKF);
    void SetBadFlag();
    bool isBad();
    float GetFoundRatio();
    void ComputeDistinctiveDescriptors();
    void UpdateNormalAndDepth();
    unsigned long mnId;
    long mnFirstKFid;
    long mnFirstFrame;
    int nObs;
    float mTrackProjX;
    float mTrackProjY;
    float mTrackProjXR;
    bool mbTrackInView;
    int mnTrackScaleLevel;
    float mTrackViewCos;
    unsigned long mnTrackReferenceForFrame;
    unsigned long mnLastFrameSeen;
    unsigned long mnBALocalForKF;
    unsigned long mnFuseCandidateForKF;
    unsigned long mnLoopPointForKF;
    unsigned long mnCorrectedByKF;
    unsigned long mnCorrectedReference;
    cv_Mat mPosGBA;
    unsigned long mnBAGlobalForKF;
    cv_Mat mWorldPos;
    std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ mObservations;
    cv_Mat mNormalVector;
    cv_Mat mDescriptor;
    ORB_SLAM2_KeyFrame *mpRefKF;
    int mnVisible;
    int mnFound;
    bool mbBad;
    ORB_SLAM2_MapPoint *mpReplaced;
    float mfMinDistance;
    float mfMaxDistance;
    ORB_SLAM2_Map *mpMap;
    std___1_mutex mMutexPos;
    std___1_mutex mMutexFeatures;
};

class ORB_SLAM2_KeyFrame;

class ORB_SLAM2_Frame;

class ORB_SLAM2_KeyFrameDatabase {
public:
    const ORB_SLAM2_ORBVocabulary *mpVoc;
    std___1_vector_std____1__list_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__list_ORB_SLAM2__KeyFrame_____ mvInvertedFile;
    std___1_mutex mMutex;
};

class ORB_SLAM2_Map;

class ORB_SLAM2_MapPoint;

class ORB_SLAM2_Frame;

class ORB_SLAM2_KeyFrameDatabase;

class ORB_SLAM2_KeyFrame {
public:
    cv_Mat GetCameraCenter();
    cv_Mat GetRotation();
    cv_Mat GetTranslation();
    void ComputeBoW();
    void UpdateConnections();
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ GetVectorCovisibleKeyFrames();
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ GetBestCovisibilityKeyFrames(const int &N);
    void AddMapPoint(ORB_SLAM2_MapPoint *pMP, const size_t &idx);
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ GetMapPointMatches();
    cv_Mat UnprojectStereo(int i);
    void SetBadFlag();
    bool isBad();
    float ComputeSceneMedianDepth(const int q);
    unsigned long mnId;
    const unsigned long mnFrameId;
    const double mTimeStamp;
    const int mnGridCols;
    const int mnGridRows;
    const float mfGridElementWidthInv;
    const float mfGridElementHeightInv;
    unsigned long mnTrackReferenceForFrame;
    unsigned long mnFuseTargetForKF;
    unsigned long mnBALocalForKF;
    unsigned long mnBAFixedForKF;
    unsigned long mnLoopQuery;
    int mnLoopWords;
    float mLoopScore;
    unsigned long mnRelocQuery;
    int mnRelocWords;
    float mRelocScore;
    cv_Mat mTcwGBA;
    cv_Mat mTcwBefGBA;
    unsigned long mnBAGlobalForKF;
    const float fx;
    const float fy;
    const float cx;
    const float cy;
    const float invfx;
    const float invfy;
    const float mbf;
    const float mb;
    const float mThDepth;
    const int N;
    const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeys;
    const std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeysUn;
    const std___1_vector_float__std____1__allocator_float__ mvuRight;
    const std___1_vector_float__std____1__allocator_float__ mvDepth;
    const cv_Mat mDescriptors;
    DBoW2_BowVector mBowVec;
    DBoW2_FeatureVector mFeatVec;
    cv_Mat mTcp;
    const int mnScaleLevels;
    const float mfScaleFactor;
    const float mfLogScaleFactor;
    const std___1_vector_float__std____1__allocator_float__ mvScaleFactors;
    const std___1_vector_float__std____1__allocator_float__ mvLevelSigma2;
    const std___1_vector_float__std____1__allocator_float__ mvInvLevelSigma2;
    const int mnMinX;
    const int mnMinY;
    const int mnMaxX;
    const int mnMaxY;
    const cv_Mat mK;
    cv_Mat Tcw;
    cv_Mat Twc;
    cv_Mat Ow;
    cv_Mat Cw;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpMapPoints;
    ORB_SLAM2_KeyFrameDatabase *mpKeyFrameDB;
    ORB_SLAM2_ORBVocabulary *mpORBvocabulary;
    std___1_vector_std____1__vector_std____1__vector_unsigned_long____std____1__allocator_std____1__vector_std____1__vector_unsigned_long____ mGrid;
    std___1_map_ORB_SLAM2__KeyFrame____int__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__int___ mConnectedKeyFrameWeights;
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mvpOrderedConnectedKeyFrames;
    std___1_vector_int__std____1__allocator_int__ mvOrderedWeights;
    bool mbFirstConnection;
    ORB_SLAM2_KeyFrame *mpParent;
    std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ mspChildrens;
    std___1_set_ORB_SLAM2__KeyFrame____std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_ORB_SLAM2__KeyFrame____ mspLoopEdges;
    bool mbNotErase;
    bool mbToBeErased;
    bool mbBad;
    float mHalfBaseline;
    ORB_SLAM2_Map *mpMap;
    std___1_mutex mMutexPose;
    std___1_mutex mMutexConnections;
    std___1_mutex mMutexFeatures;
};

class ORB_SLAM2_Tracking;

class ORB_SLAM2_FrameDrawer {
public:
    cv_Mat mIm;
    int N;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvCurrentKeys;
    std___1_vector_bool__std____1__allocator_bool__ mvbMap;
    std___1_vector_bool__std____1__allocator_bool__ mvbVO;
    bool mbOnlyTracking;
    int mnTracked;
    int mnTrackedVO;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvIniKeys;
    std___1_vector_int__std____1__allocator_int__ mvIniMatches;
    int mState;
    ORB_SLAM2_Map *mpMap;
    std___1_mutex mMutex;
};

class ORB_SLAM2_Initializer {
public:
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeys1;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mvKeys2;
    std___1_vector_std____1__pair_int__int___std____1__allocator_std____1__pair_int__int___ mvMatches12;
    std___1_vector_bool__std____1__allocator_bool__ mvbMatched1;
    cv_Mat mK;
    float mSigma;
    float mSigma2;
    int mMaxIterations;
    std___1_vector_std____1__vector_unsigned_long___std____1__allocator_std____1__vector_unsigned_long___ mvSets;
};

class __attribute__((visibility("default")))  std___1_thread  {
public:
    std___1___libcpp_thread_t __t_;
};

class ORB_SLAM2_FrameDrawer;

class ORB_SLAM2_Map;

class ORB_SLAM2_Tracking;

class ORB_SLAM2_LocalMapping;

class ORB_SLAM2_LoopClosing;

class ORB_SLAM2_System {
public:
    enum eSensor {
        MONOCULAR = 0,
        STEREO = 1,
        RGBD = 2
    };
    ORB_SLAM2_System::eSensor mSensor;
    ORB_SLAM2_ORBVocabulary *mpVocabulary;
    ORB_SLAM2_KeyFrameDatabase *mpKeyFrameDatabase;
    ORB_SLAM2_Map *mpMap;
    ORB_SLAM2_Tracking *mpTracker;
    ORB_SLAM2_LocalMapping *mpLocalMapper;
    ORB_SLAM2_LoopClosing *mpLoopCloser;
    ORB_SLAM2_FrameDrawer *mpFrameDrawer;
    std___1_thread *mptLocalMapping;
    std___1_thread *mptLoopClosing;
    std___1_mutex mMutexReset;
    bool mbReset;
    std___1_mutex mMutexMode;
    bool mbActivateLocalizationMode;
    bool mbDeactivateLocalizationMode;
    int mTrackingState;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mTrackedMapPoints;
    std___1_vector_cv__KeyPoint__std____1__allocator_cv__KeyPoint__ mTrackedKeyPointsUn;
    std___1_mutex mMutexState;
};

class ORB_SLAM2_FrameDrawer;

class ORB_SLAM2_Map;

class ORB_SLAM2_LocalMapping;

class ORB_SLAM2_LoopClosing;

class ORB_SLAM2_System;

class ORB_SLAM2_Tracking {
public:
    enum eTrackingState {
        SYSTEM_NOT_READY = -1,
        NO_IMAGES_YET = 0,
        NOT_INITIALIZED = 1,
        OK = 2,
        LOST = 3
    };
    ORB_SLAM2_Tracking::eTrackingState mState;
    ORB_SLAM2_Tracking::eTrackingState mLastProcessedState;
    int mSensor;
    ORB_SLAM2_Frame mCurrentFrame;
    cv_Mat mImGray;
    std___1_vector_int__std____1__allocator_int__ mvIniLastMatches;
    std___1_vector_int__std____1__allocator_int__ mvIniMatches;
    std___1_vector_cv__Point__float___std____1__allocator_cv__Point__float___ mvbPrevMatched;
    std___1_vector_cv__Point3__float___std____1__allocator_cv__Point3__float___ mvIniP3D;
    ORB_SLAM2_Frame mInitialFrame;
    std___1_list_cv__Mat__std____1__allocator_cv__Mat__ mlRelativeFramePoses;
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mlpReferences;
    std___1_list_double__std____1__allocator_double__ mlFrameTimes;
    std___1_list_bool__std____1__allocator_bool__ mlbLost;
    bool mbOnlyTracking;
    bool mbVO;
    ORB_SLAM2_LocalMapping *mpLocalMapper;
    ORB_SLAM2_LoopClosing *mpLoopClosing;
    ORB_SLAM2_ORBextractor *mpORBextractorLeft;
    ORB_SLAM2_ORBextractor *mpORBextractorRight;
    ORB_SLAM2_ORBextractor *mpIniORBextractor;
    ORB_SLAM2_ORBVocabulary *mpORBVocabulary;
    ORB_SLAM2_KeyFrameDatabase *mpKeyFrameDB;
    ORB_SLAM2_Initializer *mpInitializer;
    ORB_SLAM2_KeyFrame *mpReferenceKF;
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mvpLocalKeyFrames;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpLocalMapPoints;
    ORB_SLAM2_System *mpSystem;
    ORB_SLAM2_FrameDrawer *mpFrameDrawer;
    ORB_SLAM2_Map *mpMap;
    cv_Mat mK;
    cv_Mat mDistCoef;
    float mbf;
    int mMinFrames;
    int mMaxFrames;
    float mThDepth;
    float mDepthMapFactor;
    int mnMatchesInliers;
    ORB_SLAM2_KeyFrame *mpLastKeyFrame;
    ORB_SLAM2_Frame mLastFrame;
    unsigned int mnLastKeyFrameId;
    unsigned int mnLastRelocFrameId;
    cv_Mat mVelocity;
    bool mbRGB;
    std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mlpTemporalPoints;
};

class g2o_HyperGraph {
public:
    enum HyperGraphElementType {
        HGET_VERTEX,
        HGET_EDGE,
        HGET_PARAMETER,
        HGET_CACHE,
        HGET_DATA,
        HGET_NUM_ELEMS
    };
    virtual ~g2o_HyperGraph() noexcept;
    virtual bool removeVertex(g2o_HyperGraph_Vertex *v);
    virtual bool removeEdge(g2o_HyperGraph_Edge *e);
    virtual void clear();
    virtual bool addVertex(g2o_HyperGraph_Vertex *v);
    virtual bool addEdge(g2o_HyperGraph_Edge *e);
    virtual bool changeId(g2o_HyperGraph_Vertex *v, int newId);
    std___1_unordered_map_int__g2o__HyperGraph__Vertex____std____1__hash_int___std____1__equal_to_int___std____1__allocator_std____1__pair_const_int__g2o__HyperGraph__Vertex_____ _vertices;
    std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____ _edges;
};

struct g2o_HyperGraph_HyperGraphElement {
     __attribute__((linkage("linkonce_odr"))) virtual ~g2o_HyperGraph_HyperGraphElement() noexcept ;
    virtual g2o_HyperGraph::HyperGraphElementType elementType() const = 0;
};

class g2o_HyperGraph_Edge : public g2o_HyperGraph_HyperGraphElement {
public:
    virtual ~g2o_HyperGraph_Edge() noexcept;
    virtual void resize(size_t size);
     __attribute__((linkage("linkonce_odr"))) virtual g2o_HyperGraph::HyperGraphElementType elementType() const ;
    std___1_vector_g2o__HyperGraph__Vertex____std____1__allocator_g2o__HyperGraph__Vertex____ _vertices;
    int _id;
};

class g2o_HyperGraph_Vertex : public g2o_HyperGraph_HyperGraphElement {
public:
    virtual ~g2o_HyperGraph_Vertex() noexcept;
     __attribute__((linkage("linkonce_odr"))) virtual void setId(int newId) ;
     __attribute__((linkage("linkonce_odr"))) virtual g2o_HyperGraph::HyperGraphElementType elementType() const ;
    int _id;
    std___1_set_g2o__HyperGraph__Edge____std____1__less_g2o__HyperGraph__Edge_____std____1__allocator_g2o__HyperGraph__Edge____ _edges;
};

class g2o_HyperGraph_Edge;

class g2o_HyperGraph_Vertex;

g2o_HyperGraph_HyperGraphElement::~g2o_HyperGraph_HyperGraphElement() noexcept {
}
void g2o_HyperGraph_Vertex::setId(int newId) {
    this->_id = newId;
}
class g2o_Parameter : public g2o_HyperGraph_HyperGraphElement {
public:
     __attribute__((linkage("linkonce_odr"))) virtual ~g2o_Parameter() noexcept ;
    virtual bool read(std___1_istream &is) = 0;
    virtual bool write(std___1_ostream &os) const = 0;
     __attribute__((linkage("linkonce_odr"))) virtual g2o_HyperGraph::HyperGraphElementType elementType() const ;
    int _id;
};

g2o_Parameter::~g2o_Parameter() noexcept {
}
g2o_HyperGraph::HyperGraphElementType g2o_Parameter::elementType() const {
    return g2o_HyperGraph::HyperGraphElementType::HGET_PARAMETER;
}
class g2o_Parameter;

static const int Eigen_Dynamic = -1;

static const unsigned int Eigen_RowMajorBit = 1;

static const unsigned int Eigen_PacketAccessBit = 8;

static const unsigned int Eigen_LinearAccessBit = 16;

static const unsigned int Eigen_LvalueBit = 32;

static const unsigned int Eigen_DirectAccessBit = 64;

static const unsigned int Eigen_NestByRefBit = 256;

enum Eigen_StorageOptions {
    ColMajor = 0,
    RowMajor = 1,
    AutoAlign = 0,
    DontAlign = 2
};

enum Eigen_AccessorLevels {
    ReadOnlyAccessors,
    WriteAccessors,
    DirectAccessors,
    DirectWriteAccessors
};

struct Eigen_MatrixXpr {
};

struct Eigen_internal_is_same {
};
struct Eigen_internal_traits;
class Eigen_internal_compute_matrix_flags_double__3__1__0__3__1_ {
public:
    enum __unnamed59 {
        row_major_bit = 0 & RowMajor ? Eigen_RowMajorBit : 0
    };
    enum __unnamed60 {
        ret = Eigen_DirectAccessBit | Eigen_LvalueBit | Eigen_NestByRefBit | row_major_bit
    };
};
struct Eigen_internal_default_packet_traits {
};

struct Eigen_internal_packet_traits_double_ : Eigen_internal_default_packet_traits {
    enum __unnamed47 {
        Vectorizable = 0,
        size = 1,
        AlignedOnScalar = 0,
        HasHalfPacket = 0
    };
};
struct Eigen_internal_unpacket_traits_double_ {
    enum __unnamed49 {
        size = 1,
        alignment = 1
    };
};
struct Eigen_internal_compute_default_alignment_helper_24__16__false__false_ {
    enum __unnamed51 {
        value = 0
    };
};
struct Eigen_internal_compute_default_alignment_double__3_ {
    enum __unnamed55 {
        value = Eigen_internal_compute_default_alignment_helper_24__16__false__false_::__unnamed51::value
    };
};
struct Eigen_internal_size_at_compile_time_3__1_ {
    enum __unnamed64 {
        ret = (3 == Eigen_Dynamic || 1 == Eigen_Dynamic) ? Eigen_Dynamic : 3 * 1
    };
};
struct Eigen_internal_traits_Eigen__Matrix_double__3__1__0__ {
    enum __unnamed34 {
        size = Eigen_internal_size_at_compile_time_3__1_::__unnamed64::ret
    };
    enum __unnamed35 {
        row_major_bit = 0 & RowMajor ? Eigen_RowMajorBit : 0,
        is_dynamic_size_storage = 3 == Eigen_Dynamic || 1 == Eigen_Dynamic,
        max_size = is_dynamic_size_storage ? Eigen_Dynamic : 3 * 1,
        default_alignment = Eigen_internal_compute_default_alignment_double__3_::__unnamed55::value,
        actual_alignment = ((0 & DontAlign) == 0) ? default_alignment : 0,
        required_alignment = Eigen_internal_unpacket_traits_double_::__unnamed49::alignment,
        packet_access_bit = (Eigen_internal_packet_traits_double_::__unnamed47::Vectorizable && (1 || (actual_alignment >= required_alignment))) ? Eigen_PacketAccessBit : 0
    };
    enum __unnamed36 {
        RowsAtCompileTime = 3,
        ColsAtCompileTime = 1,
        MaxRowsAtCompileTime = 3,
        MaxColsAtCompileTime = 1,
        Flags = Eigen_internal_compute_matrix_flags_double__3__1__0__3__1_::__unnamed60::ret,
        Options = 0,
        InnerStrideAtCompileTime = 1,
        OuterStrideAtCompileTime = (Options & RowMajor) ? ColsAtCompileTime : RowsAtCompileTime,
        EvaluatorFlags = Eigen_LinearAccessBit | Eigen_DirectAccessBit | packet_access_bit | row_major_bit,
        Alignment = actual_alignment
    };
};
class Eigen_internal_compute_matrix_flags_double__4__1__0__4__1_ {
public:
    enum __unnamed61 {
        row_major_bit = 0 & RowMajor ? Eigen_RowMajorBit : 0
    };
    enum __unnamed62 {
        ret = Eigen_DirectAccessBit | Eigen_LvalueBit | Eigen_NestByRefBit | row_major_bit
    };
};
struct Eigen_internal_compute_default_alignment_helper_32__16__true__false_ {
    enum __unnamed52 {
        value = 16
    };
};
struct Eigen_internal_compute_default_alignment_double__4_ {
    enum __unnamed56 {
        value = Eigen_internal_compute_default_alignment_helper_32__16__true__false_::__unnamed52::value
    };
};
struct Eigen_internal_size_at_compile_time_4__1_ {
    enum __unnamed65 {
        ret = (4 == Eigen_Dynamic || 1 == Eigen_Dynamic) ? Eigen_Dynamic : 4 * 1
    };
};
struct Eigen_internal_traits_Eigen__Matrix_double__4__1__0__ {
    enum __unnamed37 {
        size = Eigen_internal_size_at_compile_time_4__1_::__unnamed65::ret
    };
    enum __unnamed38 {
        row_major_bit = 0 & RowMajor ? Eigen_RowMajorBit : 0,
        is_dynamic_size_storage = 4 == Eigen_Dynamic || 1 == Eigen_Dynamic,
        max_size = is_dynamic_size_storage ? Eigen_Dynamic : 4 * 1,
        default_alignment = Eigen_internal_compute_default_alignment_double__4_::__unnamed56::value,
        actual_alignment = ((0 & DontAlign) == 0) ? default_alignment : 0,
        required_alignment = Eigen_internal_unpacket_traits_double_::__unnamed49::alignment,
        packet_access_bit = (Eigen_internal_packet_traits_double_::__unnamed47::Vectorizable && (1 || (actual_alignment >= required_alignment))) ? Eigen_PacketAccessBit : 0
    };
    enum __unnamed39 {
        RowsAtCompileTime = 4,
        ColsAtCompileTime = 1,
        MaxRowsAtCompileTime = 4,
        MaxColsAtCompileTime = 1,
        Flags = Eigen_internal_compute_matrix_flags_double__4__1__0__4__1_::__unnamed62::ret,
        Options = 0,
        InnerStrideAtCompileTime = 1,
        OuterStrideAtCompileTime = (Options & RowMajor) ? ColsAtCompileTime : RowsAtCompileTime,
        EvaluatorFlags = Eigen_LinearAccessBit | Eigen_DirectAccessBit | packet_access_bit | row_major_bit,
        Alignment = actual_alignment
    };
};
struct Eigen_internal_traits_Eigen__Quaternion_double__0__ {
};
struct Eigen_internal_has_direct_access {
};
struct Eigen_internal_accessors_level {
};
struct Eigen_internal_accessors_level_Eigen__Matrix_double__3__1__0__ {
    enum __unnamed41 {
        has_direct_access = (Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::Flags & Eigen_DirectAccessBit) ? 1 : 0,
        has_write_access = (Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::Flags & Eigen_LvalueBit) ? 1 : 0,
        value = has_direct_access ? (has_write_access ? DirectWriteAccessors : DirectAccessors) : (has_write_access ? WriteAccessors : ReadOnlyAccessors)
    };
};
struct Eigen_internal_accessors_level_Eigen__Matrix_double__4__1__0__ {
    enum __unnamed42 {
        has_direct_access = (Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::Flags & Eigen_DirectAccessBit) ? 1 : 0,
        has_write_access = (Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::Flags & Eigen_LvalueBit) ? 1 : 0,
        value = has_direct_access ? (has_write_access ? DirectWriteAccessors : DirectAccessors) : (has_write_access ? WriteAccessors : ReadOnlyAccessors)
    };
};
struct Eigen_EigenBase;
struct Eigen_EigenBase_Eigen__Matrix_double__3__1__0__ {
};
struct Eigen_EigenBase_Eigen__Matrix_double__4__1__0__ {
};
class Eigen_DenseBase;
struct Eigen_internal_outer_stride_at_compile_time_Eigen__Matrix_double__3__1__0___true_ {
    enum __unnamed71 {
        ret = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::OuterStrideAtCompileTime
    };
};
struct Eigen_internal_inner_stride_at_compile_time_Eigen__Matrix_double__3__1__0___true_ {
    enum __unnamed68 {
        ret = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::InnerStrideAtCompileTime
    };
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___0_ : public Eigen_EigenBase_Eigen__Matrix_double__3__1__0__ {
public:
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___1_ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___0_ {
public:
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___3_ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___1_ {
public:
};
class Eigen_DenseBase_Eigen__Matrix_double__3__1__0__ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__3__1__0___3_ {
public:
    enum __unnamed43 {
        RowsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::RowsAtCompileTime,
        ColsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::ColsAtCompileTime,
        SizeAtCompileTime = (Eigen_internal_size_at_compile_time_3__1_::__unnamed64::ret),
        MaxRowsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::MaxRowsAtCompileTime,
        MaxColsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::MaxColsAtCompileTime,
        MaxSizeAtCompileTime = (Eigen_internal_size_at_compile_time_3__1_::__unnamed64::ret),
        IsVectorAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::MaxRowsAtCompileTime == 1 || Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::MaxColsAtCompileTime == 1,
        Flags = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::Flags,
        IsRowMajor = int(Flags) & Eigen_RowMajorBit,
        InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime) : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
        InnerStrideAtCompileTime = Eigen_internal_inner_stride_at_compile_time_Eigen__Matrix_double__3__1__0___true_::__unnamed68::ret,
        OuterStrideAtCompileTime = Eigen_internal_outer_stride_at_compile_time_Eigen__Matrix_double__3__1__0___true_::__unnamed71::ret
    };
};
struct Eigen_internal_outer_stride_at_compile_time_Eigen__Matrix_double__4__1__0___true_ {
    enum __unnamed72 {
        ret = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::OuterStrideAtCompileTime
    };
};
struct Eigen_internal_inner_stride_at_compile_time_Eigen__Matrix_double__4__1__0___true_ {
    enum __unnamed69 {
        ret = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::InnerStrideAtCompileTime
    };
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___0_ : public Eigen_EigenBase_Eigen__Matrix_double__4__1__0__ {
public:
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___1_ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___0_ {
public:
};
class Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___3_ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___1_ {
public:
};
class Eigen_DenseBase_Eigen__Matrix_double__4__1__0__ : public Eigen_DenseCoeffsBase_Eigen__Matrix_double__4__1__0___3_ {
public:
    enum __unnamed44 {
        RowsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::RowsAtCompileTime,
        ColsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::ColsAtCompileTime,
        SizeAtCompileTime = (Eigen_internal_size_at_compile_time_4__1_::__unnamed65::ret),
        MaxRowsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::MaxRowsAtCompileTime,
        MaxColsAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::MaxColsAtCompileTime,
        MaxSizeAtCompileTime = (Eigen_internal_size_at_compile_time_4__1_::__unnamed65::ret),
        IsVectorAtCompileTime = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::MaxRowsAtCompileTime == 1 || Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::MaxColsAtCompileTime == 1,
        Flags = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::Flags,
        IsRowMajor = int(Flags) & Eigen_RowMajorBit,
        InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime) : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
        InnerStrideAtCompileTime = Eigen_internal_inner_stride_at_compile_time_Eigen__Matrix_double__4__1__0___true_::__unnamed69::ret,
        OuterStrideAtCompileTime = Eigen_internal_outer_stride_at_compile_time_Eigen__Matrix_double__4__1__0___true_::__unnamed72::ret
    };
};
class Eigen_PlainObjectBase;
struct Eigen_internal_plain_array_double__3__0__0_ {
    double array[3];
};
class Eigen_DenseStorage_double__3__3__1__0_ {
public:
    Eigen_internal_plain_array_double__3__0__0_ m_data;
};
class Eigen_MatrixBase_Eigen__Matrix_double__3__1__0__ : public Eigen_DenseBase_Eigen__Matrix_double__3__1__0__ {
public:
    using Eigen_DenseBase_Eigen__Matrix_double__3__1__0__::RowsAtCompileTime;
    using Eigen_DenseBase_Eigen__Matrix_double__3__1__0__::ColsAtCompileTime;
    using Eigen_DenseBase_Eigen__Matrix_double__3__1__0__::MaxSizeAtCompileTime;
};
class Eigen_PlainObjectBase_Eigen__Matrix_double__3__1__0__ : public Eigen_MatrixBase_Eigen__Matrix_double__3__1__0__ {
public:
    enum __unnamed45 {
        Options = Eigen_internal_traits_Eigen__Matrix_double__3__1__0__::__unnamed36::Options
    };
    Eigen_DenseStorage_double__3__3__1__0_ m_storage;
};
struct Eigen_internal_plain_array_double__4__0__16_ {
    double array[4] __attribute__((aligned(16))) ;
};
class Eigen_DenseStorage_double__4__4__1__0_ {
public:
    Eigen_internal_plain_array_double__4__0__16_ m_data;
};
class Eigen_MatrixBase_Eigen__Matrix_double__4__1__0__ : public Eigen_DenseBase_Eigen__Matrix_double__4__1__0__ {
public:
    using Eigen_DenseBase_Eigen__Matrix_double__4__1__0__::RowsAtCompileTime;
    using Eigen_DenseBase_Eigen__Matrix_double__4__1__0__::ColsAtCompileTime;
    using Eigen_DenseBase_Eigen__Matrix_double__4__1__0__::MaxSizeAtCompileTime;
};
class Eigen_PlainObjectBase_Eigen__Matrix_double__4__1__0__ : public Eigen_MatrixBase_Eigen__Matrix_double__4__1__0__ {
public:
    enum __unnamed46 {
        Options = Eigen_internal_traits_Eigen__Matrix_double__4__1__0__::__unnamed39::Options
    };
    Eigen_DenseStorage_double__4__4__1__0_ m_storage;
};
class Eigen_DenseCoeffsBase;
class Eigen_Matrix;
class Eigen_Matrix_int__2__2__0__2__2_;
class Eigen_Matrix_int__2__1__0__2__1_;
class Eigen_Matrix_int__1__2__1__1__2_;
class Eigen_Matrix_int__3__3__0__3__3_;
class Eigen_Matrix_int__1__3__1__1__3_;
class Eigen_Matrix_int__4__4__0__4__4_;
class Eigen_Matrix_int__4__1__0__4__1_;
class Eigen_Matrix_int__1__4__1__1__4_;
class Eigen_Matrix_int___1___1__0___1___1_;
class Eigen_Matrix_int___1__1__0___1__1_;
class Eigen_Matrix_int__1___1__1__1___1_;
class Eigen_Matrix_int__2___1__0__2___1_;
class Eigen_Matrix_int___1__2__0___1__2_;
class Eigen_Matrix_int__3___1__0__3___1_;
class Eigen_Matrix_int___1__3__0___1__3_;
class Eigen_Matrix_int__4___1__0__4___1_;
class Eigen_Matrix_int___1__4__0___1__4_;
class Eigen_Matrix_float__2__2__0__2__2_;
class Eigen_Matrix_float__2__1__0__2__1_;
class Eigen_Matrix_float__1__2__1__1__2_;
class Eigen_Matrix_float__3__3__0__3__3_;
class Eigen_Matrix_float__3__1__0__3__1_;
class Eigen_Matrix_float__1__3__1__1__3_;
class Eigen_Matrix_float__4__4__0__4__4_;
class Eigen_Matrix_float__4__1__0__4__1_;
class Eigen_Matrix_float__1__4__1__1__4_;
class Eigen_Matrix_float___1___1__0___1___1_;
class Eigen_Matrix_float___1__1__0___1__1_;
class Eigen_Matrix_float__1___1__1__1___1_;
class Eigen_Matrix_float__2___1__0__2___1_;
class Eigen_Matrix_float___1__2__0___1__2_;
class Eigen_Matrix_float__3___1__0__3___1_;
class Eigen_Matrix_float___1__3__0___1__3_;
class Eigen_Matrix_float__4___1__0__4___1_;
class Eigen_Matrix_float___1__4__0___1__4_;
class Eigen_Matrix_double__1__2__1__1__2_;
class Eigen_Matrix_double__3__1__0__3__1_ : public Eigen_PlainObjectBase_Eigen__Matrix_double__3__1__0__ {
public:
};
class Eigen_Matrix_double__4__1__0__4__1_ : public Eigen_PlainObjectBase_Eigen__Matrix_double__4__1__0__ {
public:
};
class Eigen_Matrix_double__1__4__1__1__4_;
class Eigen_Matrix_double__1___1__1__1___1_;
class Eigen_Matrix_double__2___1__0__2___1_;
class Eigen_Matrix_double___1__2__0___1__2_;
class Eigen_Matrix_double__3___1__0__3___1_;
class Eigen_Matrix_double___1__3__0___1__3_;
class Eigen_Matrix_double__4___1__0__4___1_;
class Eigen_Matrix_double___1__4__0___1__4_;
class Eigen_Matrix_std____1__complex_float___2__2__0__2__2_;
class Eigen_Matrix_std____1__complex_float___2__1__0__2__1_;
class Eigen_Matrix_std____1__complex_float___1__2__1__1__2_;
class Eigen_Matrix_std____1__complex_float___3__3__0__3__3_;
class Eigen_Matrix_std____1__complex_float___3__1__0__3__1_;
class Eigen_Matrix_std____1__complex_float___1__3__1__1__3_;
class Eigen_Matrix_std____1__complex_float___4__4__0__4__4_;
class Eigen_Matrix_std____1__complex_float___4__1__0__4__1_;
class Eigen_Matrix_std____1__complex_float___1__4__1__1__4_;
class Eigen_Matrix_std____1__complex_float____1___1__0___1___1_;
class Eigen_Matrix_std____1__complex_float____1__1__0___1__1_;
class Eigen_Matrix_std____1__complex_float___1___1__1__1___1_;
class Eigen_Matrix_std____1__complex_float___2___1__0__2___1_;
class Eigen_Matrix_std____1__complex_float____1__2__0___1__2_;
class Eigen_Matrix_std____1__complex_float___3___1__0__3___1_;
class Eigen_Matrix_std____1__complex_float____1__3__0___1__3_;
class Eigen_Matrix_std____1__complex_float___4___1__0__4___1_;
class Eigen_Matrix_std____1__complex_float____1__4__0___1__4_;
class Eigen_Matrix_std____1__complex_double___2__2__0__2__2_;
class Eigen_Matrix_std____1__complex_double___2__1__0__2__1_;
class Eigen_Matrix_std____1__complex_double___1__2__1__1__2_;
class Eigen_Matrix_std____1__complex_double___3__3__0__3__3_;
class Eigen_Matrix_std____1__complex_double___3__1__0__3__1_;
class Eigen_Matrix_std____1__complex_double___1__3__1__1__3_;
class Eigen_Matrix_std____1__complex_double___4__4__0__4__4_;
class Eigen_Matrix_std____1__complex_double___4__1__0__4__1_;
class Eigen_Matrix_std____1__complex_double___1__4__1__1__4_;
class Eigen_Matrix_std____1__complex_double____1___1__0___1___1_;
class Eigen_Matrix_std____1__complex_double____1__1__0___1__1_;
class Eigen_Matrix_std____1__complex_double___1___1__1__1___1_;
class Eigen_Matrix_std____1__complex_double___2___1__0__2___1_;
class Eigen_Matrix_std____1__complex_double____1__2__0___1__2_;
class Eigen_Matrix_std____1__complex_double___3___1__0__3___1_;
class Eigen_Matrix_std____1__complex_double____1__3__0___1__3_;
class Eigen_Matrix_std____1__complex_double___4___1__0__4___1_;
class Eigen_Matrix_std____1__complex_double____1__4__0___1__4_;
class Eigen_Matrix_double__1__1__0__1__1_;
class Eigen_Matrix_std____1__complex_double___1__1__0__1__1_;
class Eigen_Matrix_long__1___1__1__1___1_;
class Eigen_Matrix_long___1__1__0___1__1_;
class Eigen_Matrix_double__1__8__1__1__8_;
class Eigen_Matrix_double__5__1__0__5__1_;
class Eigen_Matrix_std____1__complex_double___6__1__0__6__1_;
class Eigen_Matrix_double__1__35__1__1__35_;
class Eigen_Matrix_double___1___1__0__6__6_;
class Eigen_Matrix_double__1___1__1__1__6_;
class Eigen_Matrix_double__1__15__1__1__15_;
class Eigen_Matrix_double___1___1__0__4__4_;
class Eigen_Matrix_double__1___1__1__1__4_;
class Eigen_Matrix_double___1__1__0__4__1_;
class Eigen_Matrix_double__1__5__1__1__5_;
class Eigen_Matrix_double__1__11__1__1__11_;
class Eigen_Matrix_double__1__17__1__1__17_;
class Eigen_Matrix_int__1__1__0__1__1_;
class Eigen_Matrix_std____1__complex_int___1__1__0__1__1_;
class Eigen_Matrix_std____1__complex_double___7__1__0__7__1_;
class Eigen_Matrix_double__1__48__1__1__48_;
class Eigen_Matrix_double__1__13__1__1__13_;
class Eigen_Matrix_double__1__20__1__1__20_;
class Eigen_Matrix_bool__1__1__0__1__1_;
class Eigen_Matrix_bool__3__3__0__3__3_;
class Eigen_Matrix_std____1__complex_bool___1__1__0__1__1_;
class Eigen_Matrix_bool__2__1__0__2__1_;
class Eigen_Matrix_double__0__1__0__0__1_;
class Eigen_Matrix_double__1__0__1__1__0_;
class Eigen_Matrix_std____1__complex_double___0__1__0__0__1_;
class Eigen_Matrix_double__1__1__1__1__1_;
class Eigen_MatrixBase;
class Eigen_RotationBase;
class Eigen_RotationBase_Eigen__Quaternion_double__0___3_ {
public:
};
class Eigen_QuaternionBase;
class Eigen_QuaternionBase_Eigen__Quaternion_double__0__ : public Eigen_RotationBase_Eigen__Quaternion_double__0___3_ {
public:
};
class Eigen_Quaternion;
class Eigen_Quaternion_float__0_;
class Eigen_Quaternion_double__0_ : public Eigen_QuaternionBase_Eigen__Quaternion_double__0__ {
public:
    Eigen_Matrix_double__4__1__0__4__1_ m_coeffs;
};
struct Eigen_internal_packet_traits;
struct Eigen_internal_unpacket_traits {
};
struct Eigen_internal_find_best_packet_helper;
struct Eigen_internal_find_best_packet_helper_3__double__true_ {
};
struct Eigen_internal_find_best_packet_helper_4__double__true_ {
};
struct Eigen_internal_find_best_packet {
};
struct Eigen_internal_find_best_packet_double__3_ {
};
struct Eigen_internal_find_best_packet_double__4_ {
};
struct Eigen_internal_compute_default_alignment_helper {
};
struct Eigen_internal_compute_default_alignment {
};
class Eigen_internal_compute_matrix_flags {
};
struct Eigen_internal_size_at_compile_time {
};
struct Eigen_internal_dense_xpr_base {
};
struct Eigen_internal_dense_xpr_base_Eigen__Matrix_double__3__1__0___Eigen__MatrixXpr_ {
};
struct Eigen_internal_dense_xpr_base_Eigen__Matrix_double__4__1__0___Eigen__MatrixXpr_ {
};
struct Eigen_internal_packet_traits1 {
};
struct Eigen_internal_inner_stride_at_compile_time {
};
struct Eigen_internal_outer_stride_at_compile_time {
};
class Eigen_DenseBase1 {
};
class Eigen_MatrixBase1 {
};
struct Eigen_EigenBase1 {
};
struct Eigen_internal_plain_array {
};
class Eigen_DenseStorage;
class Eigen_DenseStorage1 {
};
class Eigen_PlainObjectBase1 {
};
class Eigen_Matrix1 {
};
typedef Eigen_Matrix_double__3__1__0__3__1_ Eigen_Vector3d;

class Eigen_RotationBase1 {
};
class Eigen_QuaternionBase1 {
};
class Eigen_Quaternion1 {
};
typedef Eigen_Quaternion_double__0_ Eigen_Quaterniond;

struct g2o_Sim3 {
    Eigen_Quaterniond r;
    Eigen_Vector3d t;
    double s;
};

class ORB_SLAM2_Tracking;

class ORB_SLAM2_LocalMapping;

class ORB_SLAM2_KeyFrameDatabase;

class ORB_SLAM2_LoopClosing {
public:
    void InsertKeyFrame(ORB_SLAM2_KeyFrame *pKF);
    bool mbResetRequested;
    std___1_mutex mMutexReset;
    bool mbFinishRequested;
    bool mbFinished;
    std___1_mutex mMutexFinish;
    ORB_SLAM2_Map *mpMap;
    ORB_SLAM2_Tracking *mpTracker;
    ORB_SLAM2_KeyFrameDatabase *mpKeyFrameDB;
    ORB_SLAM2_ORBVocabulary *mpORBVocabulary;
    ORB_SLAM2_LocalMapping *mpLocalMapper;
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mlpLoopKeyFrameQueue;
    std___1_mutex mMutexLoopQueue;
    float mnCovisibilityConsistencyTh;
    ORB_SLAM2_KeyFrame *mpCurrentKF;
    ORB_SLAM2_KeyFrame *mpMatchedKF;
    std___1_vector_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___std____1__allocator_std____1__pair_std____1__set_ORB_SLAM2__KeyFrame_____int___ mvConsistentGroups;
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mvpEnoughConsistentCandidates;
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mvpCurrentConnectedKFs;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpCurrentMatchedPoints;
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mvpLoopMapPoints;
    cv_Mat mScw;
    g2o_Sim3 mg2oScw;
    unsigned long mLastLoopKFid;
    bool mbRunningGBA;
    bool mbFinishedGBA;
    bool mbStopGBA;
    std___1_mutex mMutexGBA;
    std___1_thread *mpThreadGBA;
    bool mbFixScale;
    bool mnFullBAIdx;
};

class ORB_SLAM2_Tracking;

class ORB_SLAM2_LoopClosing;

class ORB_SLAM2_Map;

class ORB_SLAM2_LocalMapping {
public:
    ORB_SLAM2_LocalMapping(ORB_SLAM2_Map *pMap, const float bMonocular);
    void SetLoopCloser(ORB_SLAM2_LoopClosing *pLoopCloser);
    void SetTracker(ORB_SLAM2_Tracking *pTracker);
    void Run();
    void InsertKeyFrame(ORB_SLAM2_KeyFrame *pKF);
    void RequestStop();
    void RequestReset();
    bool Stop();
    void Release();
    bool isStopped();
    bool stopRequested();
    bool AcceptKeyFrames();
    void SetAcceptKeyFrames(bool flag);
    bool SetNotStop(bool flag);
    void InterruptBA();
    void RequestFinish();
    bool isFinished();
    bool CheckNewKeyFrames();
    void ProcessNewKeyFrame();
    void CreateNewMapPoints();
    void MapPointCulling();
    void SearchInNeighbors();
    void KeyFrameCulling();
    cv_Mat ComputeF12(ORB_SLAM2_KeyFrame *&pKF1, ORB_SLAM2_KeyFrame *&pKF2);
    cv_Mat SkewSymmetricMatrix(const cv_Mat &v);
    bool mbMonocular;
    void ResetIfRequested();
    bool mbResetRequested;
    std___1_mutex mMutexReset;
    bool CheckFinish();
    void SetFinish();
    bool mbFinishRequested;
    bool mbFinished;
    std___1_mutex mMutexFinish;
    ORB_SLAM2_Map *mpMap;
    ORB_SLAM2_LoopClosing *mpLoopCloser;
    ORB_SLAM2_Tracking *mpTracker;
    std___1_list_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ mlNewKeyFrames;
    ORB_SLAM2_KeyFrame *mpCurrentKeyFrame;
    std___1_list_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ mlpRecentAddedMapPoints;
    std___1_mutex mMutexNewKFs;
    bool mbAbortBA;
    bool mbStopped;
    bool mbStopRequested;
    bool mbNotStop;
    std___1_mutex mMutexStop;
    bool mbAcceptKeyFrames;
    std___1_mutex mMutexAccept;
};

class ORB_SLAM2_ORBmatcher {
public:
    ORB_SLAM2_ORBmatcher(float nnratio, bool checkOri);
    int SearchForTriangulation(ORB_SLAM2_KeyFrame *pKF1, ORB_SLAM2_KeyFrame *pKF2, cv_Mat F12, std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ &vMatchedPairs, const bool bOnlyStereo);
    int Fuse(ORB_SLAM2_KeyFrame *pKF, const std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ &vpMapPoints, const float th);
    float mfNNratio;
    bool mbCheckOrientation;
};

class ORB_SLAM2_LoopClosing;

class ORB_SLAM2_Optimizer {
public:
    static void LocalBundleAdjustment(ORB_SLAM2_KeyFrame *pKF, bool *pbStopFlag, ORB_SLAM2_Map *pMap);
};

ORB_SLAM2_LocalMapping::ORB_SLAM2_LocalMapping(ORB_SLAM2_Map *pMap, const float bMonocular) : mbMonocular(bMonocular), mbResetRequested(false), mbFinishRequested(false), mbFinished(true), mpMap(pMap), mbAbortBA(false), mbStopped(false), mbStopRequested(false), mbNotStop(false), mbAcceptKeyFrames(true) {
}
void ORB_SLAM2_LocalMapping::SetLoopCloser(ORB_SLAM2_LoopClosing *pLoopCloser) {
    this->mpLoopCloser = pLoopCloser;
}
void ORB_SLAM2_LocalMapping::SetTracker(ORB_SLAM2_Tracking *pTracker) {
    this->mpTracker = pTracker;
}
void ORB_SLAM2_LocalMapping::Run() {
    this->mbFinished = false;
    while (1)
        {
            this->SetAcceptKeyFrames(false);
            if (this->CheckNewKeyFrames()) {
                this->ProcessNewKeyFrame();
                this->MapPointCulling();
                this->CreateNewMapPoints();
                if (!this->CheckNewKeyFrames()) {
                    this->SearchInNeighbors();
                }
                this->mbAbortBA = false;
                if (!this->CheckNewKeyFrames() && !this->stopRequested()) {
                    if (this->mpMap->KeyFramesInMap() > 2) {
                        ORB_SLAM2_Optimizer::LocalBundleAdjustment(this->mpCurrentKeyFrame, &this->mbAbortBA, this->mpMap);
                    }
                    this->KeyFrameCulling();
                }
                this->mpLoopCloser->InsertKeyFrame(this->mpCurrentKeyFrame);
            } else {
                if (this->Stop()) {
                    while (this->isStopped() && !this->CheckFinish())
                        {
                            usleep(3000);
                        }
                    if (this->CheckFinish()) {
                        break;
                    }
                }
            }
            this->ResetIfRequested();
            this->SetAcceptKeyFrames(true);
            if (this->CheckFinish()) {
                break;
            }
            usleep(3000);
        }
    this->SetFinish();
}
void ORB_SLAM2_LocalMapping::InsertKeyFrame(ORB_SLAM2_KeyFrame *pKF) {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexNewKFs);
    this->mlNewKeyFrames.push_back(pKF);
    this->mbAbortBA = true;
}
bool ORB_SLAM2_LocalMapping::CheckNewKeyFrames() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexNewKFs);
    return (!this->mlNewKeyFrames.empty());
}
void ORB_SLAM2_LocalMapping::ProcessNewKeyFrame() {
    {
        std___1_unique_lock_std____1__mutex_ lock(this->mMutexNewKFs);
        this->mpCurrentKeyFrame = this->mlNewKeyFrames.front();
        this->mlNewKeyFrames.pop_front();
    }
    this->mpCurrentKeyFrame->ComputeBoW();
    const std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ vpMapPointMatches = this->mpCurrentKeyFrame->GetMapPointMatches();
    for (size_t i = 0; i < vpMapPointMatches.size(); i++) {
        ORB_SLAM2_MapPoint *pMP = vpMapPointMatches[i];
        if (pMP) {
            if (!pMP->isBad()) {
                if (!pMP->IsInKeyFrame(this->mpCurrentKeyFrame)) {
                    pMP->AddObservation(this->mpCurrentKeyFrame, i);
                    pMP->UpdateNormalAndDepth();
                    pMP->ComputeDistinctiveDescriptors();
                } else {
                    this->mlpRecentAddedMapPoints.push_back(pMP);
                }
            }
        }
    }
    this->mpCurrentKeyFrame->UpdateConnections();
    this->mpMap->AddKeyFrame(this->mpCurrentKeyFrame);
}
void ORB_SLAM2_LocalMapping::MapPointCulling() {
    std___1___list_iterator_ORB_SLAM2__MapPoint____void___ lit = this->mlpRecentAddedMapPoints.begin();
    const unsigned long nCurrentKFid = this->mpCurrentKeyFrame->mnId;
    int nThObs;
    if (this->mbMonocular) {
        nThObs = 2;
    } else {
        nThObs = 3;
    }
    const int cnThObs = nThObs;
    while (lit != this->mlpRecentAddedMapPoints.end())
        {
            ORB_SLAM2_MapPoint *pMP = * lit;
            if (pMP->isBad()) {
                lit = this->mlpRecentAddedMapPoints.erase(lit);
            } else {
                if (pMP->GetFoundRatio() < 0.25F) {
                    pMP->SetBadFlag();
                    lit = this->mlpRecentAddedMapPoints.erase(lit);
                } else {
                    if (((int)nCurrentKFid - (int)pMP->mnFirstKFid) >= 2 && pMP->Observations() <= cnThObs) {
                        pMP->SetBadFlag();
                        lit = this->mlpRecentAddedMapPoints.erase(lit);
                    } else {
                        if (((int)nCurrentKFid - (int)pMP->mnFirstKFid) >= 3) {
                            lit = this->mlpRecentAddedMapPoints.erase(lit);
                        } else {
                            lit ++;
                        }
                    }
                }
            }
        }
}
void ORB_SLAM2_LocalMapping::CreateNewMapPoints() {
    int nn = 10;
    if (this->mbMonocular) {
        nn = 20;
    }
    const std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ vpNeighKFs = this->mpCurrentKeyFrame->GetBestCovisibilityKeyFrames(nn);
    ORB_SLAM2_ORBmatcher matcher(0.59999999999999998, false);
    cv_Mat Rcw1 = this->mpCurrentKeyFrame->GetRotation();
    cv_Mat Rwc1 = Rcw1.t();
    cv_Mat tcw1 = this->mpCurrentKeyFrame->GetTranslation();
    cv_Mat Tcw1(3, 4, 5);
    Rcw1.copyTo(Tcw1.colRange(0, 3));
    tcw1.copyTo(Tcw1.col(3));
    cv_Mat Ow1 = this->mpCurrentKeyFrame->GetCameraCenter();
    const float &fx1 = this->mpCurrentKeyFrame->fx;
    const float &fy1 = this->mpCurrentKeyFrame->fy;
    const float &cx1 = this->mpCurrentKeyFrame->cx;
    const float &cy1 = this->mpCurrentKeyFrame->cy;
    const float &invfx1 = this->mpCurrentKeyFrame->invfx;
    const float &invfy1 = this->mpCurrentKeyFrame->invfy;
    const float ratioFactor = 1.5F * this->mpCurrentKeyFrame->mfScaleFactor;
    int nnew = 0;
    for (size_t i = 0; i < vpNeighKFs.size(); i++) {
        if (i > 0 && this->CheckNewKeyFrames()) {
            return;
        }
        ORB_SLAM2_KeyFrame *pKF2 = vpNeighKFs[i];
        cv_Mat Ow2 = pKF2->GetCameraCenter();
        cv_Mat vBaseline = Ow2 - Ow1;
        const float baseline = cv_norm(vBaseline, NORM_L2, cv_noArray());
        if (!this->mbMonocular) {
            if (baseline < pKF2->mb) {
                continue;
            }
        } else {
            const float medianDepthKF2 = pKF2->ComputeSceneMedianDepth(2);
            const float ratioBaselineDepth = baseline / medianDepthKF2;
            if (ratioBaselineDepth < 0.01) {
                continue;
            }
        }
        cv_Mat F12 = this->ComputeF12(this->mpCurrentKeyFrame, pKF2);
        std___1_vector_std____1__pair_unsigned_long__unsigned_long___std____1__allocator_std____1__pair_unsigned_long__unsigned_long___ vMatchedIndices;
        matcher.SearchForTriangulation(this->mpCurrentKeyFrame, pKF2, F12, vMatchedIndices, false);
        cv_Mat Rcw2 = pKF2->GetRotation();
        cv_Mat Rwc2 = Rcw2.t();
        cv_Mat tcw2 = pKF2->GetTranslation();
        cv_Mat Tcw2(3, 4, 5);
        Rcw2.copyTo(Tcw2.colRange(0, 3));
        tcw2.copyTo(Tcw2.col(3));
        const float &fx2 = pKF2->fx;
        const float &fy2 = pKF2->fy;
        const float &cx2 = pKF2->cx;
        const float &cy2 = pKF2->cy;
        const float &invfx2 = pKF2->invfx;
        const float &invfy2 = pKF2->invfy;
        const int nmatches = vMatchedIndices.size();
        for (int ikp = 0; ikp < nmatches; ikp++) {
            const int &idx1 = vMatchedIndices[ikp].first;
            const int &idx2 = vMatchedIndices[ikp].second;
            const cv_KeyPoint &kp1 = this->mpCurrentKeyFrame->mvKeysUn[idx1];
            const float kp1_ur = this->mpCurrentKeyFrame->mvuRight[idx1];
            bool bStereo1 = kp1_ur >= 0;
            const cv_KeyPoint &kp2 = pKF2->mvKeysUn[idx2];
            const float kp2_ur = pKF2->mvuRight[idx2];
            bool bStereo2 = kp2_ur >= 0;
            cv_Mat xn1 = (cv_Mat__float_(3, 1) << (kp1.pt.x - cx1) * invfx1 , (kp1.pt.y - cy1) * invfy1 , 1.);
            cv_Mat xn2 = (cv_Mat__float_(3, 1) << (kp2.pt.x - cx2) * invfx2 , (kp2.pt.y - cy2) * invfy2 , 1.);
            cv_Mat ray1 = Rwc1 * xn1;
            cv_Mat ray2 = Rwc2 * xn2;
            const float cosParallaxRays = ray1.dot(ray2) / (cv_norm(ray1, NORM_L2, cv_noArray()) * cv_norm(ray2, NORM_L2, cv_noArray()));
            float cosParallaxStereo = cosParallaxRays + 1;
            float cosParallaxStereo1 = cosParallaxStereo;
            float cosParallaxStereo2 = cosParallaxStereo;
            if (bStereo1) {
                cosParallaxStereo1 = cos(2 * atan2(this->mpCurrentKeyFrame->mb / 2, this->mpCurrentKeyFrame->mvDepth[idx1]));
            } else {
                if (bStereo2) {
                    cosParallaxStereo2 = cos(2 * atan2(pKF2->mb / 2, pKF2->mvDepth[idx2]));
                }
            }
            cosParallaxStereo = std___1_min_float_(cosParallaxStereo1, cosParallaxStereo2);
            cv_Mat x3D;
            if (cosParallaxRays < cosParallaxStereo && cosParallaxRays > 0 && (bStereo1 || bStereo2 || cosParallaxRays < 0.99980000000000002)) {
                cv_Mat A(4, 4, 5);
                A.row(0) = xn1.at_float_(0) * Tcw1.row(2) - Tcw1.row(0);
                A.row(1) = xn1.at_float_(1) * Tcw1.row(2) - Tcw1.row(1);
                A.row(2) = xn2.at_float_(0) * Tcw2.row(2) - Tcw2.row(0);
                A.row(3) = xn2.at_float_(1) * Tcw2.row(2) - Tcw2.row(1);
                cv_Mat w, u, vt;
                cv_SVD::compute(A, w, u, vt, cv_SVD::Flags::MODIFY_A | cv_SVD::Flags::FULL_UV);
                x3D = vt.row(3).t();
                if (x3D.at_float_(3) == 0) {
                    continue;
                }
                x3D = x3D.rowRange(0, 3) / x3D.at_float_(3);
            } else {
                if (bStereo1 && cosParallaxStereo1 < cosParallaxStereo2) {
                    x3D = this->mpCurrentKeyFrame->UnprojectStereo(idx1);
                } else {
                    if (bStereo2 && cosParallaxStereo2 < cosParallaxStereo1) {
                        x3D = pKF2->UnprojectStereo(idx2);
                    } else {
                        continue;
                    }
                }
            }
            cv_Mat x3Dt = x3D.t();
            float z1 = Rcw1.row(2).dot(x3Dt) + tcw1.at_float_(2);
            if (z1 <= 0) {
                continue;
            }
            float z2 = Rcw2.row(2).dot(x3Dt) + tcw2.at_float_(2);
            if (z2 <= 0) {
                continue;
            }
            const float &sigmaSquare1 = this->mpCurrentKeyFrame->mvLevelSigma2[kp1.octave];
            const float x1 = Rcw1.row(0).dot(x3Dt) + tcw1.at_float_(0);
            const float y1 = Rcw1.row(1).dot(x3Dt) + tcw1.at_float_(1);
            const float invz1 = 1. / z1;
            if (!bStereo1) {
                float u1 = fx1 * x1 * invz1 + cx1;
                float v1 = fy1 * y1 * invz1 + cy1;
                float errX1 = u1 - kp1.pt.x;
                float errY1 = v1 - kp1.pt.y;
                if ((errX1 * errX1 + errY1 * errY1) > 5.9909999999999997 * sigmaSquare1) {
                    continue;
                }
            } else {
                float u1 = fx1 * x1 * invz1 + cx1;
                float u1_r = u1 - this->mpCurrentKeyFrame->mbf * invz1;
                float v1 = fy1 * y1 * invz1 + cy1;
                float errX1 = u1 - kp1.pt.x;
                float errY1 = v1 - kp1.pt.y;
                float errX1_r = u1_r - kp1_ur;
                if ((errX1 * errX1 + errY1 * errY1 + errX1_r * errX1_r) > 7.7999999999999998 * sigmaSquare1) {
                    continue;
                }
            }
            const float sigmaSquare2 = pKF2->mvLevelSigma2[kp2.octave];
            const float x2 = Rcw2.row(0).dot(x3Dt) + tcw2.at_float_(0);
            const float y2 = Rcw2.row(1).dot(x3Dt) + tcw2.at_float_(1);
            const float invz2 = 1. / z2;
            if (!bStereo2) {
                float u2 = fx2 * x2 * invz2 + cx2;
                float v2 = fy2 * y2 * invz2 + cy2;
                float errX2 = u2 - kp2.pt.x;
                float errY2 = v2 - kp2.pt.y;
                if ((errX2 * errX2 + errY2 * errY2) > 5.9909999999999997 * sigmaSquare2) {
                    continue;
                }
            } else {
                float u2 = fx2 * x2 * invz2 + cx2;
                float u2_r = u2 - this->mpCurrentKeyFrame->mbf * invz2;
                float v2 = fy2 * y2 * invz2 + cy2;
                float errX2 = u2 - kp2.pt.x;
                float errY2 = v2 - kp2.pt.y;
                float errX2_r = u2_r - kp2_ur;
                if ((errX2 * errX2 + errY2 * errY2 + errX2_r * errX2_r) > 7.7999999999999998 * sigmaSquare2) {
                    continue;
                }
            }
            cv_Mat normal1 = x3D - Ow1;
            float dist1 = cv_norm(normal1, NORM_L2, cv_noArray());
            cv_Mat normal2 = x3D - Ow2;
            float dist2 = cv_norm(normal2, NORM_L2, cv_noArray());
            if (dist1 == 0 || dist2 == 0) {
                continue;
            }
            const float ratioDist = dist2 / dist1;
            const float ratioOctave = this->mpCurrentKeyFrame->mvScaleFactors[kp1.octave] / pKF2->mvScaleFactors[kp2.octave];
            if (ratioDist * ratioFactor < ratioOctave || ratioDist > ratioOctave * ratioFactor) {
                continue;
            }
            ORB_SLAM2_MapPoint *pMP = new ORB_SLAM2_MapPoint(x3D, this->mpCurrentKeyFrame, this->mpMap);
            pMP->AddObservation(this->mpCurrentKeyFrame, idx1);
            pMP->AddObservation(pKF2, idx2);
            this->mpCurrentKeyFrame->AddMapPoint(pMP, idx1);
            pKF2->AddMapPoint(pMP, idx2);
            pMP->ComputeDistinctiveDescriptors();
            pMP->UpdateNormalAndDepth();
            this->mpMap->AddMapPoint(pMP);
            this->mlpRecentAddedMapPoints.push_back(pMP);
            nnew++;
        }
    }
}
void ORB_SLAM2_LocalMapping::SearchInNeighbors() {
    int nn = 10;
    if (this->mbMonocular) {
        nn = 20;
    }
    const std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ vpNeighKFs = this->mpCurrentKeyFrame->GetBestCovisibilityKeyFrames(nn);
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ vpTargetKFs;
    for (std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ vit = vpNeighKFs.begin(), vend = vpNeighKFs.end(); vit != vend; vit ++) {
        ORB_SLAM2_KeyFrame *pKFi = * vit;
        if (pKFi->isBad() || pKFi->mnFuseTargetForKF == this->mpCurrentKeyFrame->mnId) {
            continue;
        }
        vpTargetKFs.push_back(pKFi);
        pKFi->mnFuseTargetForKF = this->mpCurrentKeyFrame->mnId;
        const std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ vpSecondNeighKFs = pKFi->GetBestCovisibilityKeyFrames(5);
        for (std___1___wrap_iter_ORB_SLAM2__KeyFrame__const___ vit2 = vpSecondNeighKFs.begin(), vend2 = vpSecondNeighKFs.end(); vit2 != vend2; vit2 ++) {
            ORB_SLAM2_KeyFrame *pKFi2 = * vit2;
            if (pKFi2->isBad() || pKFi2->mnFuseTargetForKF == this->mpCurrentKeyFrame->mnId || pKFi2->mnId == this->mpCurrentKeyFrame->mnId) {
                continue;
            }
            vpTargetKFs.push_back(pKFi2);
        }
    }
    ORB_SLAM2_ORBmatcher matcher(0.59999999999999998, true);
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ vpMapPointMatches = this->mpCurrentKeyFrame->GetMapPointMatches();
    for (std___1___wrap_iter_ORB_SLAM2__KeyFrame____ vit = vpTargetKFs.begin(), vend = vpTargetKFs.end(); vit != vend; vit ++) {
        ORB_SLAM2_KeyFrame *pKFi = * vit;
        matcher.Fuse(pKFi, vpMapPointMatches, 3.);
    }
    std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ vpFuseCandidates;
    vpFuseCandidates.reserve(vpTargetKFs.size() * vpMapPointMatches.size());
    for (std___1___wrap_iter_ORB_SLAM2__KeyFrame____ vitKF = vpTargetKFs.begin(), vendKF = vpTargetKFs.end(); vitKF != vendKF; vitKF ++) {
        ORB_SLAM2_KeyFrame *pKFi = * vitKF;
        std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ vpMapPointsKFi = pKFi->GetMapPointMatches();
        for (std___1___wrap_iter_ORB_SLAM2__MapPoint____ vitMP = vpMapPointsKFi.begin(), vendMP = vpMapPointsKFi.end(); vitMP != vendMP; vitMP ++) {
            ORB_SLAM2_MapPoint *pMP = * vitMP;
            if (!pMP) {
                continue;
            }
            if (pMP->isBad() || pMP->mnFuseCandidateForKF == this->mpCurrentKeyFrame->mnId) {
                continue;
            }
            pMP->mnFuseCandidateForKF = this->mpCurrentKeyFrame->mnId;
            vpFuseCandidates.push_back(pMP);
        }
    }
    matcher.Fuse(this->mpCurrentKeyFrame, vpFuseCandidates, 3.);
    vpMapPointMatches = this->mpCurrentKeyFrame->GetMapPointMatches();
    for (size_t i = 0, iend = vpMapPointMatches.size(); i < iend; i++) {
        ORB_SLAM2_MapPoint *pMP = vpMapPointMatches[i];
        if (pMP) {
            if (!pMP->isBad()) {
                pMP->ComputeDistinctiveDescriptors();
                pMP->UpdateNormalAndDepth();
            }
        }
    }
    this->mpCurrentKeyFrame->UpdateConnections();
}
cv_Mat ORB_SLAM2_LocalMapping::ComputeF12(ORB_SLAM2_KeyFrame *&pKF1, ORB_SLAM2_KeyFrame *&pKF2) {
    cv_Mat R1w = pKF1->GetRotation();
    cv_Mat t1w = pKF1->GetTranslation();
    cv_Mat R2w = pKF2->GetRotation();
    cv_Mat t2w = pKF2->GetTranslation();
    cv_Mat R12 = R1w * R2w.t();
    cv_Mat t12 = - R1w * R2w.t() * t2w + t1w;
    cv_Mat t12x = this->SkewSymmetricMatrix(t12);
    const cv_Mat &K1 = pKF1->mK;
    const cv_Mat &K2 = pKF2->mK;
    return K1.t().inv(DECOMP_LU) * t12x * R12 * K2.inv(DECOMP_LU);
}
void ORB_SLAM2_LocalMapping::RequestStop() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    this->mbStopRequested = true;
    std___1_unique_lock_std____1__mutex_ lock2(this->mMutexNewKFs);
    this->mbAbortBA = true;
}
bool ORB_SLAM2_LocalMapping::Stop() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    if (this->mbStopRequested && !this->mbNotStop) {
        this->mbStopped = true;
        std___1_cout << "Local Mapping STOP" << std___1_endl_char__std____1__char_traits_char__;
        return true;
    }
    return false;
}
bool ORB_SLAM2_LocalMapping::isStopped() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    return this->mbStopped;
}
bool ORB_SLAM2_LocalMapping::stopRequested() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    return this->mbStopRequested;
}
void ORB_SLAM2_LocalMapping::Release() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    std___1_unique_lock_std____1__mutex_ lock2(this->mMutexFinish);
    if (this->mbFinished) {
        return;
    }
    this->mbStopped = false;
    this->mbStopRequested = false;
    for (std___1___list_iterator_ORB_SLAM2__KeyFrame____void___ lit = this->mlNewKeyFrames.begin(), lend = this->mlNewKeyFrames.end(); lit != lend; lit ++) {
        delete * lit;
    }
    this->mlNewKeyFrames.clear();
    std___1_cout << "Local Mapping RELEASE" << std___1_endl_char__std____1__char_traits_char__;
}
bool ORB_SLAM2_LocalMapping::AcceptKeyFrames() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexAccept);
    return this->mbAcceptKeyFrames;
}
void ORB_SLAM2_LocalMapping::SetAcceptKeyFrames(bool flag) {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexAccept);
    this->mbAcceptKeyFrames = flag;
}
bool ORB_SLAM2_LocalMapping::SetNotStop(bool flag) {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexStop);
    if (flag && this->mbStopped) {
        return false;
    }
    this->mbNotStop = flag;
    return true;
}
void ORB_SLAM2_LocalMapping::InterruptBA() {
    this->mbAbortBA = true;
}
void ORB_SLAM2_LocalMapping::KeyFrameCulling() {
    std___1_vector_ORB_SLAM2__KeyFrame____std____1__allocator_ORB_SLAM2__KeyFrame____ vpLocalKeyFrames = this->mpCurrentKeyFrame->GetVectorCovisibleKeyFrames();
    for (std___1___wrap_iter_ORB_SLAM2__KeyFrame____ vit = vpLocalKeyFrames.begin(), vend = vpLocalKeyFrames.end(); vit != vend; vit ++) {
        ORB_SLAM2_KeyFrame *pKF = * vit;
        if (pKF->mnId == 0) {
            continue;
        }
        const std___1_vector_ORB_SLAM2__MapPoint____std____1__allocator_ORB_SLAM2__MapPoint____ vpMapPoints = pKF->GetMapPointMatches();
        int nObs = 3;
        const int thObs = nObs;
        int nRedundantObservations = 0;
        int nMPs = 0;
        for (size_t i = 0, iend = vpMapPoints.size(); i < iend; i++) {
            ORB_SLAM2_MapPoint *pMP = vpMapPoints[i];
            if (pMP) {
                if (!pMP->isBad()) {
                    if (!this->mbMonocular) {
                        if (pKF->mvDepth[i] > pKF->mThDepth || pKF->mvDepth[i] < 0) {
                            continue;
                        }
                    }
                    nMPs++;
                    if (pMP->Observations() > thObs) {
                        const int &scaleLevel = pKF->mvKeysUn[i].octave;
                        const std___1_map_ORB_SLAM2__KeyFrame____unsigned_long__std____1__less_ORB_SLAM2__KeyFrame_____std____1__allocator_std____1__pair_ORB_SLAM2__KeyFrame__const__unsigned_long___ observations = pMP->GetObservations();
                        int nObs = 0;
                        for (std___1___map_const_iterator_std____1____tree_const_iterator_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___std____1____tree_node_std____1____value_type_ORB_SLAM2__KeyFrame____unsigned_long___void_______long__ mit = observations.begin(), mend = observations.end(); mit != mend; mit ++) {
                            ORB_SLAM2_KeyFrame *pKFi = mit->first;
                            if (pKFi == pKF) {
                                continue;
                            }
                            const int &scaleLeveli = pKFi->mvKeysUn[mit->second].octave;
                            if (scaleLeveli <= scaleLevel + 1) {
                                nObs++;
                                if (nObs >= thObs) {
                                    break;
                                }
                            }
                        }
                        if (nObs >= thObs) {
                            nRedundantObservations++;
                        }
                    }
                }
            }
        }
        if (nRedundantObservations > 0.90000000000000002 * nMPs) {
            pKF->SetBadFlag();
        }
    }
}
cv_Mat ORB_SLAM2_LocalMapping::SkewSymmetricMatrix(const cv_Mat &v) {
    return (cv_Mat__float_(3, 3) << 0 , -v.at_float_(2) , v.at_float_(1) , v.at_float_(2) , 0 , -v.at_float_(0) , -v.at_float_(1) , v.at_float_(0) , 0);
}
void ORB_SLAM2_LocalMapping::RequestReset() {
    {
        std___1_unique_lock_std____1__mutex_ lock(this->mMutexReset);
        this->mbResetRequested = true;
    }
    while (1)
        {
            {
                std___1_unique_lock_std____1__mutex_ lock2(this->mMutexReset);
                if (!this->mbResetRequested) {
                    break;
                }
            }
            usleep(3000);
        }
}
void ORB_SLAM2_LocalMapping::ResetIfRequested() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexReset);
    if (this->mbResetRequested) {
        this->mlNewKeyFrames.clear();
        this->mlpRecentAddedMapPoints.clear();
        this->mbResetRequested = false;
    }
}
void ORB_SLAM2_LocalMapping::RequestFinish() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexFinish);
    this->mbFinishRequested = true;
}
bool ORB_SLAM2_LocalMapping::CheckFinish() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexFinish);
    return this->mbFinishRequested;
}
void ORB_SLAM2_LocalMapping::SetFinish() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexFinish);
    this->mbFinished = true;
    std___1_unique_lock_std____1__mutex_ lock2(this->mMutexStop);
    this->mbStopped = true;
}
bool ORB_SLAM2_LocalMapping::isFinished() {
    std___1_unique_lock_std____1__mutex_ lock(this->mMutexFinish);
    return this->mbFinished;
}
